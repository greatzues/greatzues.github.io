<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zues blog</title>
  <subtitle>浅呼吸，深思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zuesblog.xyz/"/>
  <updated>2017-07-31T13:26:29.613Z</updated>
  <id>http://zuesblog.xyz/</id>
  
  <author>
    <name>漏雨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>鲈鱼的奇思妙想日记</title>
    <link href="http://zuesblog.xyz/2017/07/31/%E9%B2%88%E9%B1%BC%E7%9A%84%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%E6%97%A5%E8%AE%B0/"/>
    <id>http://zuesblog.xyz/2017/07/31/鲈鱼的奇思妙想日记/</id>
    <published>2017-07-31T08:03:49.000Z</published>
    <updated>2017-07-31T13:26:29.613Z</updated>
    
    <content type="html">&lt;h2 id=&quot;做梦&quot;&gt;&lt;a href=&quot;#做梦&quot; class=&quot;headerlink&quot; title=&quot;做梦&quot;&gt;&lt;/a&gt;做梦&lt;/h2&gt;&lt;p&gt;在睡觉的时候，明明梦里过去一天了，但是醒来发现就只有几个小时。&lt;/p&gt;
&lt;p&gt;就像今天中午，我挑了一个12分钟的闹钟，这是我长期积累下来的最佳午休时长（这个时间因人而异），睡得不会很久醒来也不会过分头晕，并且醒来之后效率很高，当然这里我指的是在最佳环境中，如果是直接趴在桌子上，那我或许整个下午都浑浑噩噩，我是直接躺在床上睡的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;why-time&quot;&gt;&lt;a href=&quot;#why-time&quot; class=&quot;headerlink&quot; title=&quot;why time&quot;&gt;&lt;/a&gt;why time&lt;/h2&gt;&lt;p&gt;在上面那段话中，有两个问题我觉得非常有趣：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1、为什么梦中的时间会那么快？&lt;/li&gt;
&lt;li&gt;2、为什么我趴在桌子上睡觉整个下午都会浑浑噩噩？&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img src=&quot;http://i5.qhmsg.com/t019348ccdf3644fc08.jpg&quot; alt=&quot;dream picture1&quot;&gt;&lt;/h2&gt;&lt;h2 id=&quot;为什么梦中的时间过得那么快？&quot;&gt;&lt;a href=&quot;#为什么梦中的时间过得那么快？&quot; class=&quot;headerlink&quot; title=&quot;为什么梦中的时间过得那么快？&quot;&gt;&lt;/a&gt;为什么梦中的时间过得那么快？&lt;/h2&gt;&lt;p&gt;难道是我产生错觉？我先记录下来，回头google一下寻找答案。&lt;/p&gt;
&lt;h3 id=&quot;假设&quot;&gt;&lt;a href=&quot;#假设&quot; class=&quot;headerlink&quot; title=&quot;假设&quot;&gt;&lt;/a&gt;假设&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;睡梦中我的思维是更加活跃的，大脑的运转速度比平时更快。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;奇思妙想&quot;&gt;&lt;a href=&quot;#奇思妙想&quot; class=&quot;headerlink&quot; title=&quot;奇思妙想&quot;&gt;&lt;/a&gt;奇思妙想&lt;/h3&gt;&lt;p&gt;若上面的假设成立的话，以后说不定能出一些睡梦记录设备，在梦中思考并解决问题，不但能起到休息的作用，甚至由于大脑在高速运转中，那么说不定解决问题的效率能高出平时的几倍，整个社会的进步就可能形成质的飞跃。&lt;/p&gt;
&lt;h3 id=&quot;若能成立，目前瓶颈&quot;&gt;&lt;a href=&quot;#若能成立，目前瓶颈&quot; class=&quot;headerlink&quot; title=&quot;若能成立，目前瓶颈&quot;&gt;&lt;/a&gt;若能成立，目前瓶颈&lt;/h3&gt;&lt;p&gt;假设能成立的话，那么目前的困难就是如何像《盗梦空间》那样能够控制梦境？&lt;/p&gt;
&lt;p&gt;然后是睡梦协作，甚至是更多娱乐方向的商业潜能！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;为什么我趴在桌子上睡觉整个下午都会浑浑噩噩？&quot;&gt;&lt;a href=&quot;#为什么我趴在桌子上睡觉整个下午都会浑浑噩噩？&quot; class=&quot;headerlink&quot; title=&quot;为什么我趴在桌子上睡觉整个下午都会浑浑噩噩？&quot;&gt;&lt;/a&gt;为什么我趴在桌子上睡觉整个下午都会浑浑噩噩？&lt;/h2&gt;&lt;p&gt;或许是我个人体质问题？这个我也留着后面解决&lt;/p&gt;
&lt;h3 id=&quot;假设-1&quot;&gt;&lt;a href=&quot;#假设-1&quot; class=&quot;headerlink&quot; title=&quot;假设&quot;&gt;&lt;/a&gt;假设&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;体内的血液循环不流畅，输氧不足导致大脑缺氧产生短暂性头晕。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;奇思妙想-1&quot;&gt;&lt;a href=&quot;#奇思妙想-1&quot; class=&quot;headerlink&quot; title=&quot;奇思妙想&quot;&gt;&lt;/a&gt;奇思妙想&lt;/h3&gt;&lt;p&gt;若是假设能成立的话，按照《刻意练习》的理论，长时间内经常的趴在桌子上睡觉的人，类似疯狂上班族或者是勤奋的高考生是不是在趴在桌子上睡觉能适应头晕，不舒服现象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为刻意练习可以锻炼大脑，和体型保持者长时间不断挑战自己的体力极限，最后练成完美的肌肉线条类似，大脑在被不断挑战的同时，会由于躯体提前迈出“舒适区”，大脑为了保持和躯体的平衡，也会做出改变来调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我猜测调整的方向可能有两个：&lt;strong&gt;1、增加大脑毛细血管的数量；2、降低大脑思考的速率。&lt;/strong&gt;这样一来的话，最好的当然希望是第一种结果了，因为那样的话，相当于那一类人可以通过更加艰难的环境下都能保持非常良好的呼吸，维持能量供应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.aqioo.com/article/2013_11/2013112110482005.jpg&quot; alt=&quot;dream picture2&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;做梦&quot;&gt;&lt;a href=&quot;#做梦&quot; class=&quot;headerlink&quot; title=&quot;做梦&quot;&gt;&lt;/a&gt;做梦&lt;/h2&gt;&lt;p&gt;在睡觉的时候，明明梦里过去一天了，但是醒来发现就只有几个小时。&lt;/p&gt;
&lt;p&gt;就像今天中午，我挑了一个12分钟的闹钟，这是我长期积累下来的最
    
    </summary>
    
      <category term="日记" scheme="http://zuesblog.xyz/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="http://zuesblog.xyz/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>IOS开发_记ios登录功能</title>
    <link href="http://zuesblog.xyz/2017/04/26/IOS%E5%BC%80%E5%8F%91_ios%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
    <id>http://zuesblog.xyz/2017/04/26/IOS开发_ios登录功能/</id>
    <published>2017-04-26T05:30:56.000Z</published>
    <updated>2017-07-28T05:26:27.193Z</updated>
    
    <content type="html">&lt;p&gt;入门ios一个星期，开始写ios，对于Xcode有点懵逼，我要写一篇博客来理清楚整个流程的顺序，为后面的编写加印象&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;封装好网路请求库，创建model、controller、Operation事件处理三者的父类，然后开始干活&lt;/p&gt;
&lt;h3 id=&quot;创建model&quot;&gt;&lt;a href=&quot;#创建model&quot; class=&quot;headerlink&quot; title=&quot;创建model&quot;&gt;&lt;/a&gt;创建model&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;继承父类BaseModel，根据和服务器说好的协议，也就是根据返回的json来创建变量，通过传入有网络请求拿到的数据，用NSDictionary字典将其保存起来并且传入到infoFromDict函数，返回一个UserModel对象，完成整个model层的创建。&lt;/p&gt;
&lt;h4 id=&quot;UserModel-h&quot;&gt;&lt;a href=&quot;#UserModel-h&quot; class=&quot;headerlink&quot; title=&quot;UserModel.h&quot;&gt;&lt;/a&gt;UserModel.h&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DABaseModel.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface UserModel : DABaseModel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, strong) NSString *sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, strong) NSString *avatar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;UserModel-m&quot;&gt;&lt;a href=&quot;#UserModel-m&quot; class=&quot;headerlink&quot; title=&quot;UserModel.m&quot;&gt;&lt;/a&gt;UserModel.m&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;UserModel.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation UserModel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (UserModel *)infoFromDict:(NSDictionary *)dict&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UserModel *user = [[UserModel alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user.ID = [dict objectForKey:@&amp;quot;userId&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user.name = [dict objectForKey:@&amp;quot;username&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user.sex = [dict objectForKey:@&amp;quot;sex&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user.avatar = [dict objectForKey:@&amp;quot;avatar&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建Controller&quot;&gt;&lt;a href=&quot;#创建Controller&quot; class=&quot;headerlink&quot; title=&quot;创建Controller&quot;&gt;&lt;/a&gt;创建Controller&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Controller类与view类关联，处理的是对应的username，password的获取，登录按钮的操作，以后还包括将数据呈现在view上。&lt;/p&gt;
&lt;p&gt;其中，处理数据的类就交给了Operation代理类，在Operation类中将请求上传到服务器，并且将返回的数据拿到。&lt;/p&gt;
&lt;h4 id=&quot;LoginPage-h&quot;&gt;&lt;a href=&quot;#LoginPage-h&quot; class=&quot;headerlink&quot; title=&quot;LoginPage.h&quot;&gt;&lt;/a&gt;LoginPage.h&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DABasePage.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface LoginPage : DABasePage&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IBOutlet UITextField    *username;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IBOutlet UITextField    *password;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;LoginPage-m&quot;&gt;&lt;a href=&quot;#LoginPage-m&quot; class=&quot;headerlink&quot; title=&quot;LoginPage.m&quot;&gt;&lt;/a&gt;LoginPage.m&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;LoginPage.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DALogin.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;UserModel.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation LoginPage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)didReceiveMemoryWarning &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super didReceiveMemoryWarning];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//此行为和用户的行为关联，当用户按下确定按钮，触发这个方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (IBAction)doLoginEvent:(id)sender&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if([self checkValidate])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //构造请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *body = [NSString stringWithFormat:@&amp;quot;phone=%@&amp;amp;password=%@&amp;quot;,username.text,password.text];    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NSDictionary *opInfo = @&amp;#123;@&amp;quot;url&amp;quot;:LoginURL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             @&amp;quot;body&amp;quot;:body&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _operation = [[DALogin alloc] initWithDelegate:self opInfo:opInfo]; //初始化代理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_operation executeOp];	//执行代理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//请求成功执行下面的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)opSuccess:(UserModel *)data&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super opSuccess:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BASE_INFO_FUN(data.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BASE_INFO_FUN(data.sex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//检查数据有效性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)checkValidate&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (![username.text  isEqual: @&amp;quot;&amp;quot;]&amp;amp;&amp;amp;![password.text  isEqual: @&amp;quot;&amp;quot;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BASE_INFO_FUN(@&amp;quot;用户名或者密码为空&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建DALogin数据代理类&quot;&gt;&lt;a href=&quot;#创建DALogin数据代理类&quot; class=&quot;headerlink&quot; title=&quot;创建DALogin数据代理类&quot;&gt;&lt;/a&gt;创建DALogin数据代理类&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;在父类中请求数据，加载数据，解析数据，处理成功或者失败之后的操作，DALogin只需要进行重写解析成功之后的操作即可。&lt;/p&gt;
&lt;h4 id=&quot;DALogin-h&quot;&gt;&lt;a href=&quot;#DALogin-h&quot; class=&quot;headerlink&quot; title=&quot;DALogin.h&quot;&gt;&lt;/a&gt;DALogin.h&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DABaseOperation.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface DALogin : DABaseOperation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;DALogin-m&quot;&gt;&lt;a href=&quot;#DALogin-m&quot; class=&quot;headerlink&quot; title=&quot;DALogin.m&quot;&gt;&lt;/a&gt;DALogin.m&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DALogin.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;UserModel.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation DALogin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)parseSuccess:(NSDictionary *)dict jsonString:(NSString *)jsonString&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSDictionary *dictData = [dict objectForKey:NetData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UserModel *info = [UserModel infoFromDict:dictData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_delegate opSuccess:info]; //告诉代理登录成功&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码显示了，将请求拿到数据，传入到model类，通过model类转化为本地的json数据，可以填充到view上，这里用来告知用户登录成功，也就是这里的opSuccess函数&lt;/p&gt;
&lt;p&gt;通过opSuccess函数，我们可以把传进来的info，也就是服务器返回的数据展示到view上，通过alert等形式告诉用户登录成功了，也可以在这里执行页面跳转的操作。&lt;/p&gt;
&lt;h3 id=&quot;创建和展示View&quot;&gt;&lt;a href=&quot;#创建和展示View&quot; class=&quot;headerlink&quot; title=&quot;创建和展示View&quot;&gt;&lt;/a&gt;创建和展示View&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;新建一个view，也就是这里的LoginPage.xib，通过拖拽和配置图片的方式将需要的控件拼接进去&lt;/p&gt;
&lt;p&gt;然后将控件调整到合适的位置，我这里其实有点疑惑，因为这里是通过在界面使用某一种iphone设备来调试，也就是说，我觉得是绝对定位，主要是控件的长度宽度到时遇到适配就可能很蛋疼了。&lt;/p&gt;
&lt;p&gt;这里来介绍一下关于最左边的六个顶部按钮的作用&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;show the file inspector译为“显示文件检查器”，可以查看view文件名字、类型、相对位置、绝对路径、界面构建器文档、本地化&lt;/li&gt;
&lt;li&gt;show Quick help inspector译为“显示帮助检查器”，有声明和描述，反正是一大段英文&lt;/li&gt;
&lt;li&gt;show the indentity inspector译为“显示身份检查器”，可以定制一个类和模块，暂时还不知道怎么用&lt;/li&gt;
&lt;li&gt;show the attribute inspector译为“显示属性检查器”，可以显示对应选中控件的所有属性，例如Button有button type有Custom、system、Detail Disclosure、info Light、info Dark，还有颜色等等&lt;/li&gt;
&lt;li&gt;show the size inspector译为“显示尺寸检查器”，定制组件的大小和位置&lt;/li&gt;
&lt;li&gt;show the connection inspector译为“显示连接检查器”，可以将对应组件在这里与对应的代码相关联&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多具体的用法还不知道，这里只是为了加深印象，理清后面要写的思路。&lt;/p&gt;
&lt;p&gt;最后通过点击Placeholders还有view来完成对应的关联操作，关联也相当简单，只需要像连线一样，把控件连接起来就可以了。&lt;/p&gt;
&lt;h3 id=&quot;预编译头文件&quot;&gt;&lt;a href=&quot;#预编译头文件&quot; class=&quot;headerlink&quot; title=&quot;预编译头文件&quot;&gt;&lt;/a&gt;预编译头文件&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;为了更方便在全局使用一些需要经常要用到的类，可以在Xcode中创建一个pch的预编译头文件，然后在文件中添加的类就可以不需要导入，都可以使用了，超级方便。&lt;/p&gt;
&lt;h4 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h4&gt;&lt;p&gt;然后在项目的Build Settings中找到Apple LLVM 8.0 - Language&lt;br&gt;选中Prefix Header并且将pch文件路径写进去&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#ifndef name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//在此处导入要预编译的头文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;入门ios一个星期，开始写ios，对于Xcode有点懵逼，我要写一篇博客来理清楚整个流程的顺序，为后面的编写加印象&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="ios" scheme="http://zuesblog.xyz/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之路-PRD撰写-设计联盟项目</title>
    <link href="http://zuesblog.xyz/2017/04/24/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF-PRD%E6%92%B0%E5%86%99-%E8%AE%BE%E8%AE%A1%E8%81%94%E7%9B%9F%E9%A1%B9%E7%9B%AE/"/>
    <id>http://zuesblog.xyz/2017/04/24/产品经理之路-PRD撰写-设计联盟项目/</id>
    <published>2017-04-24T09:09:14.000Z</published>
    <updated>2017-07-31T15:43:08.865Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;看了比较多的产品类书籍，包括《启示录》《人人都是产品经理》，都明确提出了需求文档的重要性，而作为团队负责人，更加应该对目标不明确而导致的后期变更需求，产生的成本负责，为了尽量避免这种事情发现，在写设计联盟之前已经开始和美工的汉子（这次的美工是大一的师弟，真可惜本以为可以和妹子合作）合作把高保真的原型做了出来，图片很不错。&lt;/p&gt;
&lt;p&gt;而我也继续将机会转化为锻炼不断完善自己的全面产品技能，反正尽量不会让用户思考就对了。我将从以下几点记录我这次的PRD撰写。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;信息结构设计&lt;/li&gt;
&lt;li&gt;流程设计&lt;/li&gt;
&lt;li&gt;功能设计&lt;/li&gt;
&lt;li&gt;交互与视觉设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;信息结构设计&quot;&gt;&lt;a href=&quot;#信息结构设计&quot; class=&quot;headerlink&quot; title=&quot;信息结构设计&quot;&gt;&lt;/a&gt;信息结构设计&lt;/h2&gt;&lt;p&gt;为了更快的梳理信息架构，这里我直接采用表格形式进行描述。&lt;/p&gt;
&lt;p&gt;在网上会有人说使用MindManage或是Xmind来制作信息架构图，我觉得这之间有一个误会，工具只是为人而生的，当然我不否认使用脑图工具看上去会更专业，也更清晰，但有时候可能追求专业的同时会增加了时间成本，工具是为方便快捷而生，只有最适合自己的才是最好的。&lt;/p&gt;
&lt;h2 id=&quot;产品原型&quot;&gt;&lt;a href=&quot;#产品原型&quot; class=&quot;headerlink&quot; title=&quot;产品原型&quot;&gt;&lt;/a&gt;产品原型&lt;/h2&gt;&lt;p&gt;最快并且直观了解PRD的方式估计就是看原型图了，这里我用Axure做了一个原型，在阿里买的服务器到期了，没办法，只能托管到Axure share空间了。&lt;br&gt;如需查看可以点击这里打开,&lt;a href=&quot;http://4hf2wg.axshare.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计联盟APP产品原型&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;看了比较多的产品类书籍，包括《启示录》《人人都是产品经理》，都明确提出了需求文档的重要性，而作为团队负责人，更加应该对目标不明确而导致的后期
    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
      <category term="PRD" scheme="http://zuesblog.xyz/tags/PRD/"/>
    
  </entry>
  
  <entry>
    <title>IOS开发_Objective-C指针</title>
    <link href="http://zuesblog.xyz/2017/04/19/IOS%E5%BC%80%E5%8F%91_Objective-C%E6%8C%87%E9%92%88/"/>
    <id>http://zuesblog.xyz/2017/04/19/IOS开发_Objective-C指针/</id>
    <published>2017-04-19T09:10:38.000Z</published>
    <updated>2017-07-28T15:58:36.886Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Objective-C指针&quot;&gt;&lt;a href=&quot;#Objective-C指针&quot; class=&quot;headerlink&quot; title=&quot;Objective-C指针&quot;&gt;&lt;/a&gt;Objective-C指针&lt;/h2&gt;&lt;p&gt;在java中也有指针的说法，当然Objective-C中也有，指针的学习可以更好的分配内存。&lt;/p&gt;
&lt;h3 id=&quot;指针概念&quot;&gt;&lt;a href=&quot;#指针概念&quot; class=&quot;headerlink&quot; title=&quot;指针概念&quot;&gt;&lt;/a&gt;指针概念&lt;/h3&gt;&lt;p&gt;这个概念是比较难以理解的，首先要先明白什么是指针，给等会要解释的Objective-C的指针做辅垫，&lt;br&gt;&lt;strong&gt;指针：计算机的内存是由连续的存储单元组成的，每个存储单元都有惟一确定的编号，这个编号就是“地址”。如果程序中定义了一个变量，编译系统在编译程序时，会根据变量的类型给这个变量分配一定长度并且连续的存储单元。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;怎么来理解呢？举个例子，随便在java中声明一个变量int i = 5;那么在内存梯子上会对应开辟出一块空间（也就是编号）专门用来存在5这个数字，而i就被指向了这块内存空间。&lt;/p&gt;
&lt;h3 id=&quot;Objective-C的指针&quot;&gt;&lt;a href=&quot;#Objective-C的指针&quot; class=&quot;headerlink&quot; title=&quot;Objective-C的指针&quot;&gt;&lt;/a&gt;Objective-C的指针&lt;/h3&gt;&lt;p&gt;在OC中，任意创建一个变量的时候，通过&lt;code&gt;NSObject *object = [[NSObject alloc] init];&lt;/code&gt;形式创建了一个变量，他就像是准备去订酒店的房客，拥有预定房间的权利，但此时还未做好决定，这时候的变量被称为指针变量，是指用来存放&lt;code&gt;[[NSObject alloc] init]&lt;/code&gt;对象的地址。&lt;/p&gt;
&lt;p&gt;然后&lt;code&gt;object&lt;/code&gt;可以通过内存地址来访问存放的数据，也就是被赋值，这时候这个房客预定了房间，他可以通过预定好的房间号来查找到对应的房间，而这个过程被称为间接访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1370044-f7df9c4b1e38a74e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;C程序设计语言&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Objective-C指针&quot;&gt;&lt;a href=&quot;#Objective-C指针&quot; class=&quot;headerlink&quot; title=&quot;Objective-C指针&quot;&gt;&lt;/a&gt;Objective-C指针&lt;/h2&gt;&lt;p&gt;在java中也有指针的说法，当然Objective-
    
    </summary>
    
    
      <category term="ios" scheme="http://zuesblog.xyz/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>IOS开发_ios入门</title>
    <link href="http://zuesblog.xyz/2017/04/07/IOS%E5%BC%80%E5%8F%91_ios%E5%85%A5%E9%97%A8/"/>
    <id>http://zuesblog.xyz/2017/04/07/IOS开发_ios入门/</id>
    <published>2017-04-07T01:28:47.000Z</published>
    <updated>2017-07-28T05:26:24.131Z</updated>
    
    <content type="html">&lt;h2 id=&quot;IOS基础入门&quot;&gt;&lt;a href=&quot;#IOS基础入门&quot; class=&quot;headerlink&quot; title=&quot;IOS基础入门&quot;&gt;&lt;/a&gt;IOS基础入门&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;ios的开发使用Objective-C语言，和java一样，它页是一种面向对象的语言&quot;&gt;&lt;a href=&quot;#ios的开发使用Objective-C语言，和java一样，它页是一种面向对象的语言&quot; class=&quot;headerlink&quot; title=&quot;ios的开发使用Objective C语言，和java一样，它页是一种面向对象的语言&quot;&gt;&lt;/a&gt;ios的开发使用Objective C语言，和java一样，它页是一种面向对象的语言&lt;/h2&gt;&lt;h3 id=&quot;消息传递&quot;&gt;&lt;a href=&quot;#消息传递&quot; class=&quot;headerlink&quot; title=&quot;消息传递&quot;&gt;&lt;/a&gt;消息传递&lt;/h3&gt;&lt;p&gt;在java中我们把Objective-C的消息传递叫做调用方法&lt;/p&gt;
&lt;h4 id=&quot;不带参数&quot;&gt;&lt;a href=&quot;#不带参数&quot; class=&quot;headerlink&quot; title=&quot;不带参数&quot;&gt;&lt;/a&gt;不带参数&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[obj method]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;带一个参数&quot;&gt;&lt;a href=&quot;#带一个参数&quot; class=&quot;headerlink&quot; title=&quot;带一个参数&quot;&gt;&lt;/a&gt;带一个参数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[obj method:value];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[counter increse:1];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应java版本&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;counter.increse(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;带多个参数&quot;&gt;&lt;a href=&quot;#带多个参数&quot; class=&quot;headerlink&quot; title=&quot;带多个参数&quot;&gt;&lt;/a&gt;带多个参数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- void setColorToRed: (float)red Green:(float)green Blue:(float)blue&amp;#123;...&amp;#125; //定义方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Obj setColorToRed: 1.0 Green:0.8 Blue: 0.2]; //调用方法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对应的java&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setColorToRedGreenBlue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; red, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; green, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; blue)&lt;/span&gt;&lt;/span&gt;&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Obj.setColorToRedGreenBlue(&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我找了几个博客，对比了一下，看到了别人总结的规律&lt;br&gt;定义：&lt;code&gt;-(void) setWord1:(NSString *) word1 setWord2:(NSString *) word2&lt;/code&gt;&lt;br&gt;也就是：&lt;code&gt;-(方法返回类型) 方法名:(参数1的数据类型) 参数1的变量名 参数2名称:(参数2的数据类型) 参数2的变量名 ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后调用方法是这样的:&lt;code&gt;[obj setWord1:&amp;quot;parameter1&amp;quot; setWord2:&amp;quot;parameter2&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;我简单粗暴的总结了下来，发现非常容易记，那就是把方法名直接记忆为参数1的名称，也就是通过`参数名:参数值`调用即可
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;消息嵌套&quot;&gt;&lt;a href=&quot;#消息嵌套&quot; class=&quot;headerlink&quot; title=&quot;消息嵌套&quot;&gt;&lt;/a&gt;消息嵌套&lt;/h4&gt;&lt;p&gt;对比上面的带多个参数，消息嵌套就灰常简单了，完全有据可循&lt;br&gt;直接就是把一个&lt;code&gt;[]&lt;/code&gt;符号当作java中的&lt;code&gt;.&lt;/code&gt;符号即可，只是&lt;code&gt;[]&lt;/code&gt;是包括了对象和消息，而&lt;code&gt;.&lt;/code&gt;是将对象和方法连接起来&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Obj *obj = [[[Obj methodOne] methodTwo] methodThree];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的java就是&lt;code&gt;Obj obj = Obj.methodOne().methodTwo().methodThree();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到对于变量名字前面是带了一个&lt;code&gt;*&lt;/code&gt;号的，在Onjective中，是代表一个指针，也就是说，可以指向一个内存地址，关于&lt;code&gt;*&lt;/code&gt;号的放置其实有四种方式，我采用其中一种就可以，也就是这里的这种，当然也有人会喜欢这种&lt;code&gt;NSString* obj = @&amp;quot;Hello&amp;quot;&lt;/code&gt;，因为使用obj的时候是不用带*号的&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;p&gt;在Objective-C中关于@符号，似乎是一种象征，字符串也一样，由双引号包裹，并且在引号前面加一个@符号&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title = @&amp;quot;Hello&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if(title == @&amp;quot;Hello&amp;quot;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h3&gt;&lt;p&gt;在Objective-C中类可以分为接口定义和实现两个部分，接口定义(Interface)放在头文件中，文件扩展名是.h，实现(implementation)放在实现文件中，文件扩展名是.m，网上不建议将接口定义写在.m中，最好是分开两个文件写。&lt;/p&gt;
&lt;h4 id=&quot;Interface&quot;&gt;&lt;a href=&quot;#Interface&quot; class=&quot;headerlink&quot; title=&quot;Interface&quot;&gt;&lt;/a&gt;Interface&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface Myclass &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int menberVar1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	id memberVar2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance_method1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance_method2: (int) p1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance_method3: (int) p1 parameter2: (int) p2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Implementation&quot;&gt;&lt;a href=&quot;#Implementation&quot; class=&quot;headerlink&quot; title=&quot;Implementation&quot;&gt;&lt;/a&gt;Implementation&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation MyClass &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int memberVar3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance_method1 &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance)method2: (int) p1 &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance_method3: (int) p1 parameter2: (int) p2 &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到接口还有实现都是以@interface、@implementation开头，都以@end结束。&lt;/p&gt;
&lt;p&gt;如果用java来写是这样的&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; memberVar1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; pointer memberVar2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; memberVar3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; (return_type) instance_method1() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; (return_type) instance_method2(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; (return_type) instance_method3andPar(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在Objective-C中，对于&lt;code&gt;Interface&lt;/code&gt;没有私有方法，都是公共的。我还不清楚变量的&lt;code&gt;protected&lt;/code&gt;和&lt;code&gt;private&lt;/code&gt;，后面慢慢写到应该会理解的&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;类方法和实例方法&quot;&gt;&lt;a href=&quot;#类方法和实例方法&quot; class=&quot;headerlink&quot; title=&quot;类方法和实例方法&quot;&gt;&lt;/a&gt;类方法和实例方法&lt;/h3&gt;&lt;p&gt;类方法就是在&lt;code&gt;java&lt;/code&gt;中使用&lt;code&gt;static&lt;/code&gt;修饰的方法，不用实例化就可以直接调用，类方法的声明用一个&lt;code&gt;+&lt;/code&gt;号修饰。&lt;/p&gt;
&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface MyClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	+(void) sayHello;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation MyClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+(void) sayHello &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NSLog(@&amp;quot;Hello&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[MyClass sayHello];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例方法就是需要实例化一个对象才可以调用的普通方法，实例方法使用一个&lt;code&gt;-&lt;/code&gt;号修饰。&lt;/p&gt;
&lt;h4 id=&quot;定义-1&quot;&gt;&lt;a href=&quot;#定义-1&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface MyClass : NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void) sayHello;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;实现-1&quot;&gt;&lt;a href=&quot;#实现-1&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation MyClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void) sayHello &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NSLog(@&amp;quot;Hello&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;使用-1&quot;&gt;&lt;a href=&quot;#使用-1&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;myCls = [MyClass new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[myCls sayHello]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的myCls前面没有类来修饰，在java中实例是这样的，&lt;code&gt;MyClass myCls = new MyClass();&lt;/code&gt;，这个应该是区别。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;继承和java是一样的原理，不同的是Objective-C是写在Interface定义里面的。语法为：子类名:父类名。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface MyClass : NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在java中：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MyClass extends NSObject&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;协议（Protocol）&quot;&gt;&lt;a href=&quot;#协议（Protocol）&quot; class=&quot;headerlink&quot; title=&quot;协议（Protocol）&quot;&gt;&lt;/a&gt;协议（Protocol）&lt;/h3&gt;&lt;p&gt;Objective-C的协议就相当于java中的Interface。&lt;/p&gt;
&lt;h4 id=&quot;定义-2&quot;&gt;&lt;a href=&quot;#定义-2&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@protocol Printable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(void)print:(NSString)str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在java中&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Printable&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;协议的继承&quot;&gt;&lt;a href=&quot;#协议的继承&quot; class=&quot;headerlink&quot; title=&quot;协议的继承&quot;&gt;&lt;/a&gt;协议的继承&lt;/h4&gt;&lt;p&gt;协议本身可以实现别的协议，通过两个尖括号包裹&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@protocol Printable &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(void)print:(NSString)str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在java中&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Printable&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;entends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;可选方法&quot;&gt;&lt;a href=&quot;#可选方法&quot; class=&quot;headerlink&quot; title=&quot;可选方法&quot;&gt;&lt;/a&gt;可选方法&lt;/h4&gt;&lt;p&gt;和java中的abstract声明的抽象类相反，java抽象类里面的抽象方法必须被重写，Objective-C的协议也可以包含可选方法，通过@optional关键字标识的方法，可以不被类实现：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@protocol Printable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(void)print:(NSString)str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;协议的实现&quot;&gt;&lt;a href=&quot;#协议的实现&quot; class=&quot;headerlink&quot; title=&quot;协议的实现&quot;&gt;&lt;/a&gt;协议的实现&lt;/h4&gt;&lt;p&gt;语法：协议名用尖括号包裹，多个协议名用逗号隔开，协议写在父类的右边。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@ interface class Myclass : NSObject &amp;lt;Printable,Drawable&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中Printable和Drawable就是两个协议。在java中&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Printable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Drawable&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;分类（Category）&quot;&gt;&lt;a href=&quot;#分类（Category）&quot; class=&quot;headerlink&quot; title=&quot;分类（Category）&quot;&gt;&lt;/a&gt;分类（Category）&lt;/h3&gt;&lt;p&gt;分类可以给一个已经存在的类增加方法，而不用去修改它的源码，这在java中可没有这样的特性。&lt;/p&gt;
&lt;p&gt;例如，NSObject是一个Objective-C内置的系统类，我们想给它增加toJson方法，就像这样：&lt;br&gt;头文件：NSObject+Json.h&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface NSObject (Json)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toJson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实现文件：NSObject+Json.m&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation NSObject (Json)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toJson&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用的时候，只要包含NSObject+Json.h，实例化NSObject类，就可以使用toJson方法了：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;quot;NSObject+Json.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation XYZController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(void)test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		NSObject *obj = [[NSObject alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		NSString *str = [obj toJson]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;分类多个方法&quot;&gt;&lt;a href=&quot;#分类多个方法&quot; class=&quot;headerlink&quot; title=&quot;分类多个方法&quot;&gt;&lt;/a&gt;分类多个方法&lt;/h4&gt;&lt;p&gt;头文件：NSObject+Json+XML.h&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface NSObject (Json)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toJson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface NSObject(XML)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toXML;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实现文件：NSObject+Json+XML.m&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;implementation NSObject (Json)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toJson &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toXML &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;quot;NSObject+Json+XML.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation XYZController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(void)test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		NSObject *obj = [[NSObject alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		NSString *json = [obj toJson];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		NSString *xml = [obj toXML];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Selector&quot;&gt;&lt;a href=&quot;#Selector&quot; class=&quot;headerlink&quot; title=&quot;Selector&quot;&gt;&lt;/a&gt;Selector&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IOS基础入门&quot;&gt;&lt;a href=&quot;#IOS基础入门&quot; class=&quot;headerlink&quot; title=&quot;IOS基础入门&quot;&gt;&lt;/a&gt;IOS基础入门&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;ios的开发使用Objective-C语言，和java一样，它页是一种面向对象的
    
    </summary>
    
    
      <category term="ios" scheme="http://zuesblog.xyz/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之路-Axure中英转换</title>
    <link href="http://zuesblog.xyz/2017/04/05/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF-Axure%E4%B8%AD%E8%8B%B1%E8%BD%AC%E6%8D%A2/"/>
    <id>http://zuesblog.xyz/2017/04/05/产品经理之路-Axure中英转换/</id>
    <published>2017-04-05T13:49:40.000Z</published>
    <updated>2017-07-28T16:05:59.670Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;当然不是因为我不会汉化Axure，而是想用更接近原著的方式使用一款国外的工具，使用Axure也做了不少的简单demo小组件，想记录下中英转换词，我不一定会翻看，因为在写的过程中，我或许完全记住每个功能标签了，从本质上去理解，这比单纯的背更持久更具备重复利用性。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;成为产品经理必备要素之一：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、逻辑清晰;&lt;br&gt;2、事先策划;&lt;br&gt;3，用最简约的载体展示最丰富的内容;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此下面的中英转换我会尊造一个原则：&lt;code&gt;文字&amp;lt;图表&amp;lt;图片&lt;/code&gt;,同时按照Axure的框架来管理不同功能标签，ok,let go!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整体流程&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/img/Axure RP 8.png&quot; alt=&quot;AXURE RP 8&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;右面板&quot;&gt;&lt;a href=&quot;#右面板&quot; class=&quot;headerlink&quot; title=&quot;右面板&quot;&gt;&lt;/a&gt;右面板&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;一、检查器&quot;&gt;&lt;a href=&quot;#一、检查器&quot; class=&quot;headerlink&quot; title=&quot;一、检查器&quot;&gt;&lt;/a&gt;一、检查器&lt;/h3&gt;&lt;p&gt;为什么从这部分说起，因为我认为这里是整个Axure中的交互核心，汇聚了各种事件监听和样式设计。&lt;/p&gt;
&lt;h4 id=&quot;1、PROPERTIES-gt-属性&quot;&gt;&lt;a href=&quot;#1、PROPERTIES-gt-属性&quot; class=&quot;headerlink&quot; title=&quot;1、PROPERTIES-&amp;gt;属性&quot;&gt;&lt;/a&gt;1、PROPERTIES-&amp;gt;属性&lt;/h4&gt;&lt;p&gt;Interactions-&amp;gt;交互，还好学过，在云南旅行时这个词被一对般配的法国情侣说出来了，他们是做虚拟现实的素材采集的，男主很帅气女主很美，真的，哎呀走偏了！&lt;br&gt;回到刚刚说的，在交互这里我按照&lt;code&gt;事件种类-&amp;gt;共有的事件监听-&amp;gt;每一种监听的详细实现&lt;/code&gt;步骤来翻译这里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事件种类&lt;/strong&gt;&lt;br&gt;事件种类按照&lt;code&gt;page&lt;/code&gt;和&lt;code&gt;libraries&lt;/code&gt;来分，两者有不同的&lt;code&gt;Event&lt;/code&gt;。&lt;strong&gt;首先是&lt;code&gt;page&lt;/code&gt;的事件种类&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;OnPageLoad&lt;/li&gt;
&lt;li&gt;OnWindowResize&lt;/li&gt;
&lt;li&gt;OnWindowScroll&lt;/li&gt;
&lt;li&gt;OnPageClick&lt;/li&gt;
&lt;li&gt;OnpageDoubleClick&lt;/li&gt;
&lt;li&gt;OnPageContextMenu&lt;/li&gt;
&lt;li&gt;OnPageMouseMove&lt;/li&gt;
&lt;li&gt;OnPageKeyDowm&lt;/li&gt;
&lt;li&gt;OnPageKeyUp&lt;/li&gt;
&lt;li&gt;OnwindowScrollUp&lt;/li&gt;
&lt;li&gt;OnWindowScrollDown&lt;/li&gt;
&lt;li&gt;OnAdaptiveViewChange&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;然后是&lt;code&gt;libraries&lt;/code&gt;的事件种类&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;OnClick&lt;/li&gt;
&lt;li&gt;OnMouseEnter&lt;/li&gt;
&lt;li&gt;OnMouseOut&lt;/li&gt;
&lt;li&gt;OnDoubleClick&lt;/li&gt;
&lt;li&gt;OnContextMenu&lt;/li&gt;
&lt;li&gt;OnMouseDown&lt;/li&gt;
&lt;li&gt;OnMouseUp&lt;/li&gt;
&lt;li&gt;OnMouseMove&lt;/li&gt;
&lt;li&gt;OnMouseHover&lt;/li&gt;
&lt;li&gt;OnLongClick&lt;/li&gt;
&lt;li&gt;OnKeyDown&lt;/li&gt;
&lt;li&gt;OnkeyUp&lt;/li&gt;
&lt;li&gt;OnMove&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Adaptive-&amp;gt;适配，点击了Enable之后可以适配很多不同终端设备，点最右边的突变之后，有一些参数可以挑包括：&lt;br&gt;Presets-&amp;gt;预设，可以提前设定适配的是不同的尺寸的视角，这个和苹果开发的时候，制作启动页的图考虑的差不多，如果想要适配每一种的话就不断点击“+”号添加就行。&lt;br&gt;Large Display -&amp;gt;大型显示屏,屏幕宽度大于1200像素&lt;br&gt;Landscape Tablet-&amp;gt;横屏平板，屏幕宽度小于1024像素&lt;br&gt;Portrait Tablet-&amp;gt;竖屏平板，屏幕宽度小于768像素&lt;br&gt;Landscape Phone-&amp;gt;横屏手机，屏幕宽度小于480像素&lt;br&gt;Portrait Phone-&amp;gt;竖屏手机，屏幕宽度小于320像素&lt;/p&gt;
&lt;p&gt;提到这个我就想起了开发iphone的时候，在设计LaunchImage的时候，刚开始被弄糊涂了，怎么一个启动页可以有这么多尺寸图片来组成，原来，这是为了保证在不同的屏幕下图片都可以在不丢失长宽比且保持最佳分辨率展示，说实话很喜欢这样的标准，或许这就是苹果公司的产品原则吧，哈哈，体现了苹果公司的严谨团队理念和用户体验至上价值观。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/ios_launchImage_size.png&quot; alt=&quot;ios_launch_image_size&quot;&gt;&lt;br&gt;在上图中可以看到，在侧边的检查器部分是有四个不同的iphone/ipad尺寸，认真看，其实就是不同分辨率的Portrait和Landscape，因为我开发的是iphone竖屏应用，所以我没有勾选其它ipad或者landscape的启动页适配。&lt;br&gt;看到中间面板，可以发现尽管是ios5、6，也有1x、2x和Retina（视网膜屏）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;ios_version&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;type&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;size&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;just like&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 5、6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1x&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;320 x 480 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 3GS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 5、6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2x&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;640 x 960 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 4、iPhone 4s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 5、6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Retina 4&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;640 x 1136 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 4、iPhone 4s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 8、9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Retina HD 5.5&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1242 x 2208 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 6 plus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 8、9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Retina HD 4.7&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;750 x 1334 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 6、iPhone 6s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 7-9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2x&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;320 x 480 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 5、iPhone 5c、iPhone 5s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 7-9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Retina 4&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;640 x 1136 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 5、iPhone 5c、iPhone 5s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当然这个是不属于这次的中英文转化，因此我把这部分放到最后面，作为额外奖励看完整篇博客的读者，哈哈，当然也为加深自己印象。&lt;/p&gt;
&lt;p&gt;当浏览器大小不满足任何其他视图的尺寸时，将显示基本视图。基本视图的宽度和高度仅影响画布上显示的指南。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img src=&quot;/img/Axure RP 8_Panel.png&quot; alt=&quot;Axure_Panel&quot;&gt;&lt;/h2&gt;&lt;h3 id=&quot;Axure原型设计之tab选项卡&quot;&gt;&lt;a href=&quot;#Axure原型设计之tab选项卡&quot; class=&quot;headerlink&quot; title=&quot;Axure原型设计之tab选项卡&quot;&gt;&lt;/a&gt;Axure原型设计之tab选项卡&lt;/h3&gt;&lt;p&gt;第一步：拖拉摆放相关的控件&lt;/p&gt;
&lt;p&gt;1、三个同样大小的矩形控件(Rectangle)，分别命名为“tab1”，“tab2”和“tab3”，均设置为无底边(STYLE-&amp;gt;Border-&amp;gt;Border Visibility)、黑边(STYLE-&amp;gt;Border-&amp;gt;line color)、灰底(STYLE-&amp;gt;Fill-&amp;gt;Fill Type)矩形，整齐横排在动态面板的左上方；&lt;/p&gt;
&lt;p&gt;2、一个动态面板控件(Libraries-&amp;gt;Dynamic Panel)，并为其设置3个相对应面板状态(state)，分别命名为“面板1”，“面板2”和“面板3”，这3个面板状态中都放置一个黑边白底的矩形和一张各不相同的图片，其中矩形与动态面板一样大小。&lt;/p&gt;
&lt;p&gt;第二步：设置选项卡的样式&lt;/p&gt;
&lt;p&gt;1、选中“tab1”，右键设置其初始状态为选中状态(selected)；&lt;/p&gt;
&lt;p&gt;2、同时选中“tab1”，“tab2”和“tab3”，右键“设置选项组(Assian Selection Group)”，设置名称为“tab选项卡”；&lt;/p&gt;
&lt;p&gt;3、同时选中“tab1”，“tab2”和“tab3”，右键“交互样式(Interaction Styles)”，设置“鼠标悬停(MouseOver)”，“鼠标按下(MouseDown)”和“选中(Selected)”三种状态的“填充颜色(Fill Color)”均为白色。&lt;/p&gt;
&lt;p&gt;第三步：设置选项卡的鼠标单击时用例&lt;/p&gt;
&lt;p&gt;分别为“tab1”，“tab2”和“tab3”添加一个鼠标单击时用例(Add Case-&amp;gt;onclick)，并为用例添加以下4个动作：&lt;/p&gt;
&lt;p&gt;1、设置选中当前元件(selected)&lt;/p&gt;
&lt;p&gt;2、将动态面板置于顶层(Bring to Front/Back-&amp;gt;Bring to Front)&lt;/p&gt;
&lt;p&gt;3、将当前元件置于顶层(Bring to Front/Back-&amp;gt;Bring to Front)&lt;/p&gt;
&lt;p&gt;4、设置动态面板为相对应的面板状态(Set Panel State)（“tab1”对应“面板1”，“tab2”对应“面板2”，“tab3”对应“面板3”）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;axure原型设计之播放控制条&quot;&gt;&lt;a href=&quot;#axure原型设计之播放控制条&quot; class=&quot;headerlink&quot; title=&quot;axure原型设计之播放控制条&quot;&gt;&lt;/a&gt;axure原型设计之播放控制条&lt;/h2&gt;&lt;p&gt;第二步：为“面板2”设置拖动时用例&lt;/p&gt;
&lt;p&gt;在拖动时用例中(Add Case-&amp;gt;onDrag)，添加2个移动动作。&lt;/p&gt;
&lt;p&gt;1、移动(move)“面板2”，移动设置为“水平拖动(with drag x)”，添加左侧边界(Add boundary)大于等于(is greater than)0，添加右侧边界小于等于(is less than or equals)“控制槽”的宽度([[widget.width]])。&lt;/p&gt;
&lt;p&gt;这里刚做完的时候我有一个疑问就是:明明添加的case中只针对面板2的state1，也就是控制点，但是为什么会连着控制条也会动呢！&lt;br&gt;我猜测这是boundaries的作用，在拖动的时候给对应的面板2和控制条一起移动，所以导致在拖动的时候，两者都会移动。&lt;br&gt;理解面板2的移动到容易，因为在拖动事例中，控制点只能在左边边缘和右边移动，故只能被水平移动右侧距离为控制槽的长度&lt;br&gt;而控制条却是，一开始就是为了连接控制点，部分被移动到动态面板外，因为是在面板1内的state1，故移出部分不可见。而在拖动实例中，控制条的左侧肯定不会超过当全部控制条长度的负值，这里的负值代表在向左边移动的数值，而右侧和控制点一样，不会超过控制槽的宽度。&lt;/p&gt;
&lt;p&gt;还是感觉有点不清晰，不过比分析前好多了！&lt;/p&gt;
&lt;p&gt;Fire Event = 事件触发&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;当然不是因为我不会汉化Axure，而是想用更接近原著的方式使用一款国外的工具，使用Axure也做了不少的简单demo小组件，想记录下中英转换
    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Axure" scheme="http://zuesblog.xyz/tags/Axure/"/>
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之之路-PRD撰写-产品结构图</title>
    <link href="http://zuesblog.xyz/2017/03/30/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E4%B9%8B%E8%B7%AF-PRD%E6%92%B0%E5%86%99-%E4%BA%A7%E5%93%81%E7%BB%93%E6%9E%84%E5%9B%BE/"/>
    <id>http://zuesblog.xyz/2017/03/30/产品经理之之路-PRD撰写-产品结构图/</id>
    <published>2017-03-30T07:17:07.000Z</published>
    <updated>2017-07-31T13:26:38.827Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在参考&lt;a href=&quot;http://www.woshipm.com/it/80078.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;产品需求文档的写作(二) – 梳理需求(产品结构图和用户流程图)&lt;/a&gt;这篇文章时，可能是我太笨，没看懂这里的信息结构中对频道的解释。&lt;/p&gt;
&lt;p&gt;我的理解是这样的，因为文章中说到产品结构图是在设计原型之前做的一种思路梳理方式，并不是给所有人看的，因为这一步或许和微信的设计一样，按照不同的维度来设计，并且参考用户习惯来排列哪些频道应该先展示。&lt;/p&gt;
&lt;p&gt;在微信的设计中，之前有一个很经典的问题是这样的，为什么微信不把朋友圈放在首页，基于这个问题的回答在PMCAFF和人人都是产品经理等社区的讨论都炸开了花，感谢我一位非常好的朋友，她的思维水平高我几个台阶。&lt;/p&gt;
&lt;p&gt;我整理总结了一下她的思考方式：手机流行时，大家最习以为常的社交恐怕就是手机电话和短信了，相信80年代的大学生都经历过和男/女朋友用手机打电话/发短信聊天，那是IM雏形。回想一下，那时候的IM只有通讯记录和通讯列表，这不刚好对应的微信的前两个tab，而社区功能在互联网盛行时出现，人们使用社区来讨论话题，对于那时候的手机用户，最核心的功能是电话/短信，其次按照马斯洛的需求理论，才会使用社区功能，而朋友圈则更像是一个社区。&lt;/p&gt;
&lt;p&gt;好了，通过上面的逻辑，在用户习惯上思考，就不难想到为什么把朋友圈放在第三个tab了。不过这是基于单独朋友圈的功能来思考，另一方面按照微信的定位来分析，我的想法是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;微信是基于点对点的IM应用，从核心功能上分析朋友圈就不会被放在首页&lt;/li&gt;
&lt;li&gt;第三个tab发现是一系列社交功能的集合，在IM的基础上，增强用户体验，如果说微信能让人们用来通讯，那么朋友圈能让人增加使用微信的频率&lt;/li&gt;
&lt;li&gt;部分特殊人群不喜欢看朋友圈、发朋友圈，而朋友圈的路径深的话可以很好的规避这类用户的散失。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;除此之外，在网上有很多不一样的想法，例如朋友圈带来导流”的效果，通过朋友圈来曝光“发现”中的其它功能。&lt;/p&gt;
&lt;p&gt;不过我还是先回到今天的主题，按照上面的思考，产品结构图给PM带来的是如何将最核心的功能放在首页，并且每一个模块的不同功能路径深浅要如何安排才能最大符合用户习惯，并且带来持续的用户转化，这就是产品结构图的功能了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;p&gt;那么如何来做产品结构图呢，我个人想法是因人而异，因业务而异，具体做法的话参考网上的一些资深回复，或许不合适我，但肯定比自己摸索能少走很多弯路：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1、确定产品所有的功能&lt;/li&gt;
&lt;li&gt;2、将多个功能组合为一个模块&lt;/li&gt;
&lt;li&gt;3、在组合中确定子模块或子功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实还是有点迷茫，不清楚怎么做，我用我的博客做一个test版本试一试，哈哈哈！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在参考&lt;a href=&quot;http://www.woshipm.com/it/80078.html&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
      <category term="PRD" scheme="http://zuesblog.xyz/tags/PRD/"/>
    
  </entry>
  
  <entry>
    <title>ANDROID开发_rxAndroid基础入门</title>
    <link href="http://zuesblog.xyz/2017/03/26/ANDROID%E5%BC%80%E5%8F%91_rxAndroid%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://zuesblog.xyz/2017/03/26/ANDROID开发_rxAndroid基础入门/</id>
    <published>2017-03-26T10:50:02.000Z</published>
    <updated>2017-07-28T05:19:14.667Z</updated>
    
    <content type="html">&lt;p&gt;这篇博客参考&lt;a href=&quot;https://gank.io/post/560e15be2dca930e00da1083#toc_5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给 Android 开发者的 RxJava 详解&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建Observer&quot;&gt;&lt;a href=&quot;#创建Observer&quot; class=&quot;headerlink&quot; title=&quot;创建Observer&quot;&gt;&lt;/a&gt;创建Observer&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observer&amp;lt;String&amp;gt; observer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observer&amp;lt;String&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外还有一个抽象类&lt;code&gt;Subscriber&lt;/code&gt;也实现了Observer接口，源码中可以看到&lt;code&gt;Subscriber&lt;/code&gt;中没有实现&lt;code&gt;Observer&lt;/code&gt;的三个方法，而是新增了一些新的方法。因此创建一个&lt;code&gt;Subscriber&lt;/code&gt;能实现同样的方法，而且还可以使用新增的&lt;code&gt;onStart&lt;/code&gt;和&lt;code&gt;unsubscribe&lt;/code&gt;方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onStart()&lt;/code&gt;能在事件未发送之前调用，可以做一些准备的事件，例如数据的清零，更多详情还是看文章一开始的链接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsubscribe()&lt;/code&gt;可以取消订阅，使用了这个方法之前使用&lt;code&gt;isUnsubscribed()&lt;/code&gt;判断状态，可以防止内存泄漏&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建Observable&quot;&gt;&lt;a href=&quot;#创建Observable&quot; class=&quot;headerlink&quot; title=&quot;创建Observable&quot;&gt;&lt;/a&gt;创建Observable&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.create(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observable.OnSubscribe&amp;lt;String&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Subscriber&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; String&amp;gt; subscriber)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onNext(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onNext(&lt;span class=&quot;string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onNext(&lt;span class=&quot;string&quot;&gt;&quot;Aloha&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，create里面的参数是一个&lt;code&gt;OnSubscribe&lt;/code&gt;参数，从字面理解就是正在注册着广播的观察者，查看源码，&lt;code&gt;OnSubscribe&lt;/code&gt;是一个接口继承了一个叫&lt;code&gt;Action1&amp;lt;Subscriber&amp;lt;? super T&amp;gt;&amp;gt;&lt;/code&gt;的接口&lt;br&gt;当call方法被调用的时候，已经注册的观察者会依次执行三个&lt;code&gt;onNext()&lt;/code&gt;和&lt;code&gt;onCompleted()&lt;/code&gt;方法&lt;/p&gt;
&lt;h3 id=&quot;just-方法和from-方法&quot;&gt;&lt;a href=&quot;#just-方法和from-方法&quot; class=&quot;headerlink&quot; title=&quot;just()方法和from()方法&quot;&gt;&lt;/a&gt;just()方法和from()方法&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.just(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;my&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;is&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;zues&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//等价于依次调用create的onNext(&quot;hello&quot;);onNext(&quot;my&quot;);onNext(&quot;name&quot;);onNext(&quot;is&quot;);onNext(&quot;zues&quot;);onCompleted();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String[] words = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;my&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;is&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;zues&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.from(words);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//同样等价于依次调用create的onNext(&quot;hello&quot;);onNext(&quot;my&quot;);onNext(&quot;name&quot;);onNext(&quot;is&quot;);onNext(&quot;zues&quot;);onCompleted();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;建立订阅关系&quot;&gt;&lt;a href=&quot;#建立订阅关系&quot; class=&quot;headerlink&quot; title=&quot;建立订阅关系&quot;&gt;&lt;/a&gt;建立订阅关系&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe(observer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//或者是observeable.subscribe(subscriber);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看源码可以发现，在&lt;code&gt;subscribe()&lt;/code&gt;方法中，传入一个&lt;code&gt;Subscriber&lt;/code&gt;参数,在方法中调用&lt;code&gt;onStart()&lt;/code&gt;和&lt;code&gt;call()&lt;/code&gt;方法，也就是&lt;code&gt;observable&lt;/code&gt;不是在创建的时候就开始发送事件，而是在被订阅的时候才开始执行。&lt;/p&gt;
&lt;h2 id=&quot;自定义创建出Subscriber&quot;&gt;&lt;a href=&quot;#自定义创建出Subscriber&quot; class=&quot;headerlink&quot; title=&quot;自定义创建出Subscriber&quot;&gt;&lt;/a&gt;自定义创建出Subscriber&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Action1&amp;lt;String&amp;gt; onNextAction = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;String&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Action1&amp;lt;Throwable&amp;gt; onErrorAction = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Throwable&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable throwable)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Action0 onCompletedAction = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action0()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe(onNextAction);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe(onNextAction, onErrorAction);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe(onNextAction, onErrorAction, onCompletedAction);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;调度器Scheduler的使用&quot;&gt;&lt;a href=&quot;#调度器Scheduler的使用&quot; class=&quot;headerlink&quot; title=&quot;调度器Scheduler的使用&quot;&gt;&lt;/a&gt;调度器Scheduler的使用&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribeOn(Schedulers.io()) &lt;span class=&quot;comment&quot;&gt;//指定subscribe()发生在IO线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.observeOn(AndroidSchedulers.mainThread()) &lt;span class=&quot;comment&quot;&gt;//指定Subscriber的回调发生在主线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Integer&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Integer number)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;Scheduler&lt;/code&gt;中,默认在当前线程运行，也就是&lt;code&gt;Scheduler.immediate()&lt;/code&gt;，另外还可以新开一个线程，在新的线程操作的&lt;code&gt;Scheduler.newThread()&lt;/code&gt;方法，以及比较常用的io流上工作的&lt;code&gt;Scheduler.io()&lt;/code&gt;，原理我解释不清楚，但是这个比&lt;code&gt;newThread()&lt;/code&gt;更有效率，因为我没有读懂博客的内容&lt;/p&gt;
&lt;p&gt;除此之外，还有&lt;code&gt;Schedulers.computation()&lt;/code&gt;主要CPU-bound(计算密集型)操作和指定在Android主线程运行的&lt;code&gt;AndroidSchedulers.mainThread()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;关于密集型操作是指用来计算、逻辑判断，例如计算圆周率、开根号、图形的计算等大型操作。&lt;/p&gt;
&lt;h2 id=&quot;区分subscribeOn-和observeOn-区分&quot;&gt;&lt;a href=&quot;#区分subscribeOn-和observeOn-区分&quot; class=&quot;headerlink&quot; title=&quot;区分subscribeOn()和observeOn()区分&quot;&gt;&lt;/a&gt;区分subscribeOn()和observeOn()区分&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observeable.just(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribeOn(Sbhedules.io())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Integer&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Integer number)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;subscribeOn(Schedulers.io())&lt;/code&gt;指定的是事件的创建也就是观察者发生在IO线程&lt;br&gt;&lt;code&gt;observeOn(AndroidSchedulers.mainThread())&lt;/code&gt;指定Subscriber的回调，也就是订阅者的回调运行在Android主线程&lt;/p&gt;
&lt;h2 id=&quot;map-和flatMap&quot;&gt;&lt;a href=&quot;#map-和flatMap&quot; class=&quot;headerlink&quot; title=&quot;map()和flatMap()&quot;&gt;&lt;/a&gt;map()和flatMap()&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(&lt;span class=&quot;string&quot;&gt;&quot;images/logo.png&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.map(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;String, Bitmap&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Bitmap &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String filePath)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getBitmapFromPath(filePath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Bitmap&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bitmap bitmap)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//showBitmap(bitmap); 展示图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;map()方法&lt;/code&gt;同样不说原理了，在new Fun1中传入的键值对是自定义的，由传入just的数据类型来定义键，对应的值由自己的需求来更换，这里需要返回Bitmap对象，然后将返回的类型传入subscribe中去，传入call函数使用&lt;/p&gt;
&lt;p&gt;当直接传入的对象不是一对一的单个对象，而是一对多的转化，怎样才能把一个Student转化为多个Course，这时候就可以用到&lt;code&gt;flatMap()&lt;/code&gt;了&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Student[] students = ...;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Subacriber&amp;lt;Corese&amp;gt; subscriber = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;Course&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Course course)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Log.d(tag, course.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.from(students)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;Student, Observable&amp;lt;Course&amp;gt;&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;Couese&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Student student)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.from(student.getCourses());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribe(subscriber);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看了几遍，终于搞懂了这里的逻辑，首先将学生对象传进去，接着就是转化为一个Observable对象，返回的是每一个遍历好的student.getCourses，也就是返回course数组，最后在&lt;code&gt;Observable.from()&lt;/code&gt;中将数组对象再依次遍历出来&lt;/p&gt;
&lt;p&gt;逻辑：students—传入—&amp;gt;&amp;gt;通过&lt;code&gt;Observable.from&lt;/code&gt;遍历数组每一个&lt;code&gt;students&lt;/code&gt;的值拿到每一个学生对应的课程&lt;code&gt;Course&lt;/code&gt;—返回—&amp;gt;&amp;gt;student.getCourses—传入—&amp;gt;&amp;gt;通过&lt;code&gt;Observable.from&lt;/code&gt;遍历数组每一个&lt;code&gt;Course&lt;/code&gt;的值拿到每一个学生对应的课程&lt;code&gt;Course.getName()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于interface的理解&quot;&gt;&lt;a href=&quot;#关于interface的理解&quot; class=&quot;headerlink&quot; title=&quot;关于interface的理解&quot;&gt;&lt;/a&gt;关于interface的理解&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1、关于接口的匿名内部类&quot;&gt;&lt;a href=&quot;#1、关于接口的匿名内部类&quot; class=&quot;headerlink&quot; title=&quot;1、关于接口的匿名内部类&quot;&gt;&lt;/a&gt;1、关于接口的匿名内部类&lt;/h3&gt;&lt;p&gt;今天看到rxJava中的一个方法&lt;code&gt;Observer&amp;lt;String&amp;gt; observer = new Observer&amp;lt;String&amp;gt;(){...}&lt;/code&gt;是直接内部类，然后看了一下Observer的源码，发现是一个接口，突然想了一想，觉得接口不是不可以new的吗&lt;/p&gt;
&lt;p&gt;接着就去看了知乎的一些解释，其实就是另一种隐藏的实现了对应Observer接口的匿名内部类，类似如下&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observer&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也就是在new的时候会自动实现一个匿名的内部类，而里面的内部类实现了Observer接口&lt;/p&gt;
&lt;h3 id=&quot;2、关于接口的意义&quot;&gt;&lt;a href=&quot;#2、关于接口的意义&quot; class=&quot;headerlink&quot; title=&quot;2、关于接口的意义&quot;&gt;&lt;/a&gt;2、关于接口的意义&lt;/h3&gt;&lt;p&gt;我们都知道接口是一个规范，也就是只有空的方法，但是没有实现，非抽象类一旦实现了接口的话就要实现接口的所有方法，但是抽象类可以不用是实现接口的所有方法。&lt;/p&gt;
&lt;p&gt;关于接口的意义，在知乎看到一个网友这么说，感觉很贴切：&lt;br&gt;`接口就是个招牌。比如说你今年放假出去杭州旅游，玩了一上午，你也有点饿了，突然看到前面有个店子，上面挂着KFC，然后你就知道今天中饭有着落了。KFC就是接口，我们看到了这个接口，就知道这个店会卖炸鸡腿（实现接口）。那么为神马我们要去定义一个接口涅，这个店可以直接卖炸鸡腿啊（直接写实现方法），是的，这个店可以直接卖炸鸡腿，但没有挂KFC的招牌，我们就不能直接简单粗暴的冲进去叫服务员给两个炸鸡腿了。要么，我们就要进去问，你这里卖不卖炸鸡腿啊，卖不卖汉堡啊，卖不卖圣代啊（这就是反射）。很显然，这样一家家的问实在是非常麻烦（反射性能很差）。要么，我们就要记住，中山路108号卖炸鸡，黄山路45号卖炸鸡（硬编码），很显然这样我们要记住的很多很多东西（代码量剧增），而且，如果有新的店卖炸鸡腿，我们也不可能知道（不利于扩展）。&lt;/p&gt;
&lt;p&gt;（上面那句回答来自&lt;a href=&quot;https://www.zhihu.com/question/20111251/answer/16585393&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java 中的接口有什么作用？&lt;/a&gt;,作者：Ivony）&lt;/p&gt;
&lt;p&gt;我又看了一下，rxAndroid中一个比较重要的东西&lt;code&gt;Subscriber&lt;/code&gt;，&lt;code&gt;Subscriber&lt;/code&gt;是抽象类并且实现了&lt;code&gt;Observer&lt;/code&gt;的接口，&lt;code&gt;Subscriber&lt;/code&gt;没有实现Observer的方法，不过当我实现&lt;code&gt;Subscriber&lt;/code&gt;的时候，也一样要实现Observer的三个方法&lt;/p&gt;
&lt;p&gt;也就是，一个实现了接口的抽象类可以实现接口的方法，但是一个一个普通类实现了接口或者是继承了抽象类就要实现所有的父类实现接口的那些方法，也要实现抽象类的抽象方法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客参考&lt;a href=&quot;https://gank.io/post/560e15be2dca930e00da1083#toc_5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给 Android 开发者的 RxJava 详解&lt;/a&gt;&lt;/p&gt;
&lt;h2 i
    
    </summary>
    
    
      <category term="android" scheme="http://zuesblog.xyz/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>ANDROID开发_android知识总结</title>
    <link href="http://zuesblog.xyz/2017/03/22/ANDROID%E5%BC%80%E5%8F%91_android%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://zuesblog.xyz/2017/03/22/ANDROID开发_android知识总结/</id>
    <published>2017-03-22T07:26:32.000Z</published>
    <updated>2017-07-28T05:18:37.634Z</updated>
    
    <content type="html">&lt;h2 id=&quot;三种命名空间&quot;&gt;&lt;a href=&quot;#三种命名空间&quot; class=&quot;headerlink&quot; title=&quot;三种命名空间&quot;&gt;&lt;/a&gt;三种命名空间&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;作用：我的理解是标识属性的命名，解决命名上的冲突。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xmlns:android=”http://schemas.android.com/apk/res/android”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xmlns:tools=”http://schemas.android.com/tools”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xmlns:app=”http://schemas.android.com/apk/res-auto”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;1和2命名空间里的属性是系统封装好的，第3种命名空间里的属性是用户自定义的&lt;/p&gt;
&lt;p&gt;对于第三种，自定义的xmlns的来源其实是自定义view里面的自己定义的属性，而那个app只是一个名字，可以把xmlns:app改成xmlns:test,效果都是一样&lt;br&gt;举一个比较典型的例子，我们现在都在用的一个&lt;code&gt;android.support.design.widget.CoordinatorLayout&lt;/code&gt;,它属于一个自定义的viewGroud，它有自己专属的属性，例如layout_behavior属性，可以用来控制子组件的滚动效果，但是安卓预定义没有这个属性名字，那么我们用来表示标识的时候就要用到自己的自定义的命名空间了，所以才出现了xmlns:app=”…”，可以用来区分属性。&lt;/p&gt;
&lt;p&gt;我也可能说错了吧！不过我确实是这样认为的。&lt;/p&gt;
&lt;p&gt;详情看这篇博客：&lt;a href=&quot;http://xiroid.com/post/android/ru-he-li-jie-androidzhong-de-xmlns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Android中XML的命名空间&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;id与-id的区别&quot;&gt;&lt;a href=&quot;#id与-id的区别&quot; class=&quot;headerlink&quot; title=&quot;@id与@+id的区别&quot;&gt;&lt;/a&gt;@id与@+id的区别&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;同样的地方就是都可以标识一个组件，但是@id是引用在&lt;code&gt;R.java&lt;/code&gt;中已经创建过的id，而@+id则是假如不存在对应的id，就创建新的id&lt;br&gt;其实按照我的想法，那么使用@+id不就一劳永逸？或许可以考虑到代码复用的情况，不过我还是喜欢用@+id，哈哈，这样不用考虑太多&lt;/p&gt;
&lt;h2 id=&quot;CoordinatorLayout用法&quot;&gt;&lt;a href=&quot;#CoordinatorLayout用法&quot; class=&quot;headerlink&quot; title=&quot;CoordinatorLayout用法&quot;&gt;&lt;/a&gt;CoordinatorLayout用法&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;这个部分比较难，不过大体上知道效果是怎样的，先放着&lt;br&gt;&lt;code&gt;CoordinatorLayout&lt;/code&gt;可以给自己的子组件制造出一种折叠的效果，例如可以产生有视觉差的详情页，还有可以扩展用户视图的tarbar，当用互手势上划的时候，会将顶部的toolbar隐藏，等用户向下滑动的时候，显示出来。&lt;/p&gt;
&lt;h2 id=&quot;java的protect关键字&quot;&gt;&lt;a href=&quot;#java的protect关键字&quot; class=&quot;headerlink&quot; title=&quot;java的protect关键字&quot;&gt;&lt;/a&gt;java的protect关键字&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;一直被这个关键困扰着，本来以为自己已经熟练掌握了，但是才发现，protect还没理解好，关于public和private两个极端就不说了&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;priavte          本类可见&lt;/li&gt;
&lt;li&gt;public            所有类可见&lt;/li&gt;
&lt;li&gt;protected      本包和所有子类都可见&lt;/li&gt;
&lt;li&gt;friendly          本包可见（即默认的形式）&lt;br&gt;也就是protected：protected对于子女、朋友来说，就是public的，可以自由使用，没有任何限制，而对于其他的外部class，protected就变成private。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;java的assert关键字&quot;&gt;&lt;a href=&quot;#java的assert关键字&quot; class=&quot;headerlink&quot; title=&quot;java的assert关键字&quot;&gt;&lt;/a&gt;java的assert关键字&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;assert关键字语法很简单，有两种用法：&lt;/p&gt;
&lt;p&gt;1、assert &lt;boolean表达式&gt;&lt;br&gt;如果&lt;boolean表达式&gt;为true，则程序继续执行。&lt;br&gt;如果为false，则程序抛出AssertionError，并终止执行。&lt;/boolean表达式&gt;&lt;/boolean表达式&gt;&lt;/p&gt;
&lt;p&gt;2、assert &lt;boolean表达式&gt; : &amp;lt;错误信息表达式&amp;gt;&lt;br&gt;如果&lt;boolean表达式&gt;为true，则程序继续执行。&lt;br&gt;如果为false，则程序抛出java.lang.AssertionError，并输入&amp;lt;错误信息表达式&amp;gt;。&lt;/boolean表达式&gt;&lt;/boolean表达式&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;使用assert断言有陷阱，详情可以看这篇博客[Java陷阱之assert关键字详解](http://m.jb51.net/article/41155.htm)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;LayoutInflater与MenuInflater&quot;&gt;&lt;a href=&quot;#LayoutInflater与MenuInflater&quot; class=&quot;headerlink&quot; title=&quot;LayoutInflater与MenuInflater&quot;&gt;&lt;/a&gt;LayoutInflater与MenuInflater&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;Inflater方法&quot;&gt;&lt;a href=&quot;#Inflater方法&quot; class=&quot;headerlink&quot; title=&quot;Inflater方法&quot;&gt;&lt;/a&gt;Inflater方法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;public View inflate (int resource, ViewGroup root)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;参数resource：将要加载的XML布局id，例如R.layout.list_item&lt;/li&gt;
&lt;li&gt;参数root：父视图，可选项，一般为Null,不过在填充menu的时候父视图就是menu对象了&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关于LayoutInflater可以在运行是加载一个xml文件，这样可以减少在onCreate的时候对应用的加载造成太大的负担，有三种方式可以获取LayoutInflater&quot;&gt;&lt;a href=&quot;#关于LayoutInflater可以在运行是加载一个xml文件，这样可以减少在onCreate的时候对应用的加载造成太大的负担，有三种方式可以获取LayoutInflater&quot; class=&quot;headerlink&quot; title=&quot;关于LayoutInflater可以在运行是加载一个xml文件，这样可以减少在onCreate的时候对应用的加载造成太大的负担，有三种方式可以获取LayoutInflater&quot;&gt;&lt;/a&gt;关于LayoutInflater可以在运行是加载一个xml文件，这样可以减少在onCreate的时候对应用的加载造成太大的负担，有三种方式可以获取LayoutInflater&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这是第一种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LayoutInflater inflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这是第二种，from方法封装了getSystemService(...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LayoutInflater inflater = LayoutInflater.from(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这是第三种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LayoutInflater inflater = getLayoutInflater();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取之后，就可以调用inflater获取一个View对象了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View myView = inflater.inflate(R.layout.main, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;MenuInflater用法要简单很多，它只有Activity-getMenuInflater-方法&quot;&gt;&lt;a href=&quot;#MenuInflater用法要简单很多，它只有Activity-getMenuInflater-方法&quot; class=&quot;headerlink&quot; title=&quot;MenuInflater用法要简单很多，它只有Activity.getMenuInflater()方法&quot;&gt;&lt;/a&gt;MenuInflater用法要简单很多，它只有Activity.getMenuInflater()方法&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreateOptionsMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Menu menu)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getMenuInflater().inflater.inflate(R.menu.mymenu, menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreateOptionsMenu(menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多详情参考：&lt;a href=&quot;http://www.bozhiyue.com/anroid/boke/2016/0330/12683.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android菜单详解（二）——创建并响应选项菜单&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;onSaveInstanceState方法&quot;&gt;&lt;a href=&quot;#onSaveInstanceState方法&quot; class=&quot;headerlink&quot; title=&quot;onSaveInstanceState方法&quot;&gt;&lt;/a&gt;onSaveInstanceState方法&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在每一个&lt;code&gt;activity&lt;/code&gt;的&lt;code&gt;onCreate&lt;/code&gt;函数重都会带一个&lt;code&gt;bundle&lt;/code&gt;参数，也就是&lt;code&gt;bundle SaveInstanceState&lt;/code&gt;，拆分单词为Save Instance State，也就是保存实例状态，不过其实这个是保存&lt;code&gt;activity&lt;/code&gt;状态的&lt;/p&gt;
&lt;p&gt;使用的话，可以通过下面的代码来理解&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle saveInstanceState)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(saveInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码很经常可以见到，可是saveInstanceState中的数据中怎么拿到的呢！&lt;br&gt;在一个&lt;code&gt;activity&lt;/code&gt;生命周期结束的时候，会调用&lt;code&gt;onSaveInstanceState&lt;/code&gt;方法,如下面的代码所示&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle saveInstanceState)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(saveInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果需要保存状态，就在onsaveInstanceState中，将状态数据以key-value的形式放入到saveInstanceState中，如果需要手动将数据保存到状态中，可以通过下面的代码实现&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      savedInstanceState.putInt(&lt;span class=&quot;string&quot;&gt;&quot;IntTest&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      savedInstanceState.putString(&lt;span class=&quot;string&quot;&gt;&quot;StrTest&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;savedInstanceState test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;手动将activity传进来的的savedInstanceState参数，添加key，value值，下次要取值的时候就可以调用&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onRestoreInstanceState(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; IntTest = savedInstanceState.getInt(&lt;span class=&quot;string&quot;&gt;&quot;IntTest&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String StrTest = savedInstanceState.getString(&lt;span class=&quot;string&quot;&gt;&quot;StrTest&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;setRetainInstance-作用&quot;&gt;&lt;a href=&quot;#setRetainInstance-作用&quot; class=&quot;headerlink&quot; title=&quot;setRetainInstance()作用&quot;&gt;&lt;/a&gt;setRetainInstance()作用&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;可以让fragment在重新创建activity的时候，不完全被销毁，以便恢复&lt;br&gt;我看到的代码是在onCreate中调用setRetainInstance()的，返回true的时候，fragment会被保存到内存中&lt;br&gt;在销毁时，直接从onDestroyView()到onDeatch()，跳过了onDestroy()；&lt;br&gt;在创建的时候，直接从onAttach()到onCreateView()，跳过了onCreate()；&lt;br&gt;这时候就不适宜在在onCreate()中放置一些初始化逻辑&lt;/p&gt;
&lt;p&gt;详情见&lt;a href=&quot;http://blog.csdn.net/weihan1314/article/details/7997421&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android4.0-Fragment框架实现方式剖析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;adapter简单使用&quot;&gt;&lt;a href=&quot;#adapter简单使用&quot; class=&quot;headerlink&quot; title=&quot;adapter简单使用&quot;&gt;&lt;/a&gt;adapter简单使用&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;常用的有 BaseAdapter，SimpleAdapter，ArrayAdapter，SimpleCursorAdapter&lt;br&gt;1、ArrayAdapter是最简单的adapter了，只显示纯文本，&lt;code&gt;ArrayAdapter(Context context, int textViewResourceId, List&amp;lt;T&amp;gt; objects)&lt;/code&gt;的第一个参数是上下文，一般都是this；第二个参数比如&lt;code&gt;android.R.layout.simple_list_item_1&lt;/code&gt;，就是每一个text的排列方式，第三个就是数据列表了&lt;/p&gt;
&lt;p&gt;2、SimpleAdapter的扩展性最好,可以定义各种不同的&lt;code&gt;item view&lt;/code&gt;布局，&lt;code&gt;SimpleAdapter adapter = new SimpleAdapter(this, getData(), R.layout.simple, new String[] { &amp;quot;title&amp;quot;,  &amp;quot;img&amp;quot; }, new int[] { R.id.title, R.id.img });&lt;/code&gt;&lt;br&gt;同样，this代表上下文，getData是要适配进去的数据，第三个是每一个item view的xml文件，接着就是数据中的不同数组对象的键，通过键可以读取对应的值，放到第五个参数对应的&lt;code&gt;child view&lt;/code&gt;中，第五个是&lt;code&gt;item view&lt;/code&gt;不同的&lt;code&gt;child view id&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;3、SimpleCursorAdapter，这个我没用过，不过也很好理解，一定要以数据库作为数据源的时候,才能使用SimpleCursorAdapter&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SimpleCursorAdapterActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListActivity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;//获得一个指向系统通讯录数据库的Cursor对象获得数据来源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         Cursor cur = getContentResolver().query(People.CONTENT_URI, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         startManagingCursor(cur);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;//实例化列表适配器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;//上下文，显示的view形式，数据源，数据源的键获取对应的值，适配到id为text1的位置上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ListAdapter adapter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleCursorAdapter(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, android.R.layout.simple_list_item_1, cur, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[] &amp;#123;People.NAME&amp;#125;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] &amp;#123;android.R.id.text1&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         setListAdapter(adapter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要在AndroidManifest.xml文件中加入权限，&lt;code&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.READ_CONTACTS&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么findViewById之后要强制转化&quot;&gt;&lt;a href=&quot;#为什么findViewById之后要强制转化&quot; class=&quot;headerlink&quot; title=&quot;为什么findViewById之后要强制转化&quot;&gt;&lt;/a&gt;为什么findViewById之后要强制转化&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;这时候可以查看源码，下面的源码可以看到findViewById返回的基本类型是View&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@IdRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后随便找一个组件，例如Button，继承的是TextView，而TextView又是View子类，在java中，子类由于继承于父类并且比父类更多一些属性，所以当向下转化的时候就需要强制变成子类了&lt;/p&gt;
&lt;p&gt;ok，好像就是这些了！&lt;/p&gt;
&lt;h2 id=&quot;区别final变量、final方法、final类&quot;&gt;&lt;a href=&quot;#区别final变量、final方法、final类&quot; class=&quot;headerlink&quot; title=&quot;区别final变量、final方法、final类&quot;&gt;&lt;/a&gt;区别final变量、final方法、final类&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fianl&lt;/code&gt;变量，一般和&lt;code&gt;static&lt;/code&gt;关键字一起使用声明一个常量,这样可以保证共享内存，最关键的是，&lt;code&gt;final&lt;/code&gt;变量是只读的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;方法，如果一个方法的功能已经很完整了，子类不需要改变，可以声明为&lt;code&gt;final&lt;/code&gt;方法，值得注意的是，&lt;code&gt;final&lt;/code&gt;方法比非&lt;code&gt;final&lt;/code&gt;方法更快，因为在编译的时候已经静态绑定，不需要在运行时动态绑定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;类的功能是完整的，不能被继承，    例如&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Interger&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;final有几个优点&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;final关键字提高了性能。JVM和Java应用都会缓存final变量。&lt;/li&gt;
&lt;li&gt;final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。&lt;/li&gt;
&lt;li&gt;使用final关键字，JVM会对方法、变量及类进行优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考&lt;a href=&quot;http://www.importnew.com/7553.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解Java中的final关键字&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Application类的用法&quot;&gt;&lt;a href=&quot;#Application类的用法&quot; class=&quot;headerlink&quot; title=&quot;Application类的用法&quot;&gt;&lt;/a&gt;Application类的用法&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;通过单例创造整个应用中唯一的&lt;code&gt;Application&lt;/code&gt;类，生命周期就是应用的生命周期，应用内所有的&lt;code&gt;activity&lt;/code&gt;都运行在该&lt;code&gt;application&lt;/code&gt;所在的进程上。&lt;br&gt;因为所有组件都可以使用&lt;code&gt;getApplication&lt;/code&gt;来获取&lt;code&gt;application&lt;/code&gt;对象，而且这个对象都是相同的，所有&lt;code&gt;application&lt;/code&gt;也可以进行数据共享、数据缓存&lt;/p&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;安卓应用创建的时候会自定义一个&lt;code&gt;application&lt;/code&gt;，作为该程序的入口，可以通过继承&lt;code&gt;Application&lt;/code&gt;来自定义自己的&lt;code&gt;application&lt;/code&gt;对象，&lt;code&gt;getApplication()&lt;/code&gt;这个方法可以用来获取&lt;code&gt;applicaltion&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;通过继承&lt;code&gt;Application&lt;/code&gt;类来实现应用程序级的全局变量，这种全局变量方法相对静态类更有保障，直到应用的所有&lt;code&gt;Activity&lt;/code&gt;全部被&lt;code&gt;destory&lt;/code&gt;掉之后才会被释放掉&lt;/p&gt;
&lt;h2 id=&quot;SharedPreferences对象&quot;&gt;&lt;a href=&quot;#SharedPreferences对象&quot; class=&quot;headerlink&quot; title=&quot;SharedPreferences对象&quot;&gt;&lt;/a&gt;SharedPreferences对象&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在整个应用中，可以通过&lt;code&gt;SharedPreferences&lt;/code&gt;来保存对象，实现方式有很多，我陈列几种：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Context.getSharedPreferences()&lt;/code&gt;，获取的数据可以被同一应用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Activity.getPreferences()&lt;/code&gt;，数据只能在该Activity中共享&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PreferenceManager.getDefaultSharedPreferences()&lt;/code&gt;，与&lt;code&gt;getSharedPreferences()&lt;/code&gt;不同的是，这个使用默认名称，例如：com.example.something_prefer&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;操作模式&quot;&gt;&lt;a href=&quot;#操作模式&quot; class=&quot;headerlink&quot; title=&quot;操作模式&quot;&gt;&lt;/a&gt;操作模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Context.MOED_PRIVATE&lt;/code&gt;，默认操作模式，只能在应用本身访问，写入的内容会覆盖原文件的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Context.MOED_APPEND&lt;/code&gt;，检查文件是否存在，存在则追加内容，否则就新创建&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Context.MOED_WORLD_READABLE&lt;/code&gt;，表示当前文件可以被其它应用阅读&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Context.MODE_WORLD_WRITAEBLE&lt;/code&gt;，表示当前文件可以被其它应用写入&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多用法自己google，我只是记载一些基本内容唤醒记忆而已！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;三种命名空间&quot;&gt;&lt;a href=&quot;#三种命名空间&quot; class=&quot;headerlink&quot; title=&quot;三种命名空间&quot;&gt;&lt;/a&gt;三种命名空间&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;作用：我的理解是标识属性的命名，解决命名上的冲突。&lt;br&gt;&lt;figure class=&quot;highl
    
    </summary>
    
    
      <category term="android" scheme="http://zuesblog.xyz/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之路-PRD撰写-信息结构图</title>
    <link href="http://zuesblog.xyz/2017/03/07/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF-PRD%E6%92%B0%E5%86%99-%E4%BF%A1%E6%81%AF%E7%BB%93%E6%9E%84%E5%9B%BE/"/>
    <id>http://zuesblog.xyz/2017/03/07/产品经理之路-PRD撰写-信息结构图/</id>
    <published>2017-03-07T00:54:11.000Z</published>
    <updated>2017-07-28T16:14:25.335Z</updated>
    
    <content type="html">&lt;h2 id=&quot;信息架构&quot;&gt;&lt;a href=&quot;#信息架构&quot; class=&quot;headerlink&quot; title=&quot;信息架构&quot;&gt;&lt;/a&gt;信息架构&lt;/h2&gt;&lt;p&gt;在产品设计中，按照对产品决定作用大小排列，依次为：信息结构设计、流程设计、功能设计、交互设计、视觉设计!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;信息结构设计&quot;&gt;&lt;a href=&quot;#信息结构设计&quot; class=&quot;headerlink&quot; title=&quot;信息结构设计&quot;&gt;&lt;/a&gt;信息结构设计&lt;/h3&gt;&lt;p&gt;信息结构是产品呈现的信息层次（也有人把信息结构称为信息架构），而我认为主要是信息，因为大多数人都把它与功能结构图混在一起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在&lt;a href=&quot;https://www.zhihu.com/question/21252588&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎上整理了两个优质的答案&lt;/a&gt;，个人觉得醍醐灌顶很提神。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;信息结构关注的是单个页面的元素、信息来源、字段限制等，而非结构化的信息，不符合思维导图的特点，建议用表格来展示。&lt;br&gt;在PRD中，信息结构是供开发建数据库的参考依据，这里引用UML里面类的概念，一个类包含属性和方法，而信息就是类的属性，举个例子，博客系统有最主要的文章类、评论类，文章类包含的信息有：标题、作者、发布时间、摘要、正文、访问量等；评论类包含的信息有评论者头像、昵称、回复内容、邮件、QQ等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相比之下，我会更倾向于理解第二个，因为在java设计中也采用到了类的概念,另外类似ANDROID开发中的model来理解信息结构对我来说更具优势，按照对象来划分属性，这个分类觉得是最好的了。&lt;/p&gt;
&lt;h3 id=&quot;个人理解&quot;&gt;&lt;a href=&quot;#个人理解&quot; class=&quot;headerlink&quot; title=&quot;个人理解&quot;&gt;&lt;/a&gt;个人理解&lt;/h3&gt;&lt;p&gt;那我可不可以这样来理解，如果信息结构设计是供数据库设计人员而做，那么流程设计和功能设计则是为了开发者编码而做，交互设计和视觉设计是为用户体验师而做，这样总结下来一个信息结构图，就可以简单的理解为给不同角色提供不同的前期判断帮助而做，那么由于处理的对象不同功能就区分下来了！&lt;/p&gt;
&lt;p&gt;依据上面的分析，做了自己博客的信息结构图（最好是使用表格来显示）：&lt;br&gt;&lt;img src=&quot;https://xmindshare.s3.amazonaws.com/preview/vGVD-VFKVufj-94527.png&quot; alt=&quot;zues blog信息结构图&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;流程设计&quot;&gt;&lt;a href=&quot;#流程设计&quot; class=&quot;headerlink&quot; title=&quot;流程设计&quot;&gt;&lt;/a&gt;流程设计&lt;/h2&gt;&lt;p&gt;细致描述用户在使用产品的流程，同时也在时间的角度上规定各个部分之间的关系，如下图是我的博客操作流程，采用visio设计：&lt;br&gt;&lt;img src=&quot;https://thumbnail0.baidupcs.com/thumbnail/b20bb1456dadee37139795021249d327?fid=3375241367-250528-251413492401602&amp;amp;time=1501232400&amp;amp;rt=yt&amp;amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-dsWiXiqNp0qWGjTLa3s%2BBYwY4ZM%3D&amp;amp;expires=2h&amp;amp;chkv=0&amp;amp;chkbd=0&amp;amp;chkpc=&amp;amp;dp-logid=4840558639286715197&amp;amp;dp-callid=0&amp;amp;size=c1280_u1024&amp;amp;quality=100&amp;amp;vuk=-&amp;amp;ft=video&quot; alt=&quot;博客流程图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;功能设计&quot;&gt;&lt;a href=&quot;#功能设计&quot; class=&quot;headerlink&quot; title=&quot;功能设计&quot;&gt;&lt;/a&gt;功能设计&lt;/h2&gt;&lt;p&gt;在功能上，整个博客核心是展示文章，因此更多的是首页功能，显示文章列表，进而可以查看文章详情。&lt;br&gt;&lt;img src=&quot;https://xmindshare.s3.amazonaws.com/preview/W7kL-lbQAbyQ-95290.png&quot; alt=&quot;zues blog 功能设计&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;由于是个人的博客，所以没有很负责的业务逻辑，只有寥寥几张粗暴的图，哈哈哈，产品小白第一次做难免非常粗糙，希望我有机会在项目中成长！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;信息架构&quot;&gt;&lt;a href=&quot;#信息架构&quot; class=&quot;headerlink&quot; title=&quot;信息架构&quot;&gt;&lt;/a&gt;信息架构&lt;/h2&gt;&lt;p&gt;在产品设计中，按照对产品决定作用大小排列，依次为：信息结构设计、流程设计、功能设计、交互设计、视觉设计!&lt;/p&gt;
&lt;hr&gt;

    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
      <category term="PRD" scheme="http://zuesblog.xyz/tags/PRD/"/>
    
  </entry>
  
  <entry>
    <title>REACT-NATIVE开发_项目感想11</title>
    <link href="http://zuesblog.xyz/2017/03/05/REACT-NATIVE%E5%BC%80%E5%8F%91_%E9%A1%B9%E7%9B%AE%E6%84%9F%E6%83%B311/"/>
    <id>http://zuesblog.xyz/2017/03/05/REACT-NATIVE开发_项目感想11/</id>
    <published>2017-03-05T08:56:10.000Z</published>
    <updated>2017-07-28T05:29:03.118Z</updated>
    
    <content type="html">&lt;h3 id=&quot;记录map方法&quot;&gt;&lt;a href=&quot;#记录map方法&quot; class=&quot;headerlink&quot; title=&quot;记录map方法&quot;&gt;&lt;/a&gt;记录map方法&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;map方法可以很轻松的迭代数组中的每一个元素，并且根据回调函数来处理每一个元素，最后返回一个新的数组。这个方法不会改变原始数组。&lt;/p&gt;
&lt;p&gt;当然回调函数也可以支持多个参数，除了当前元素本身，还返回元素的索引index、原始数组arr。&lt;/p&gt;
&lt;p&gt;这是一个粒子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var Array = [1,2,3,4,5];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var newArray = Array.map(function(value)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return value+10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//输出新的数组newArray为[11,12,13,14,15]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这次意外的发现bug的所在，总结出一个道理，那就是检索出来的信息，仔细阅读，肯定是有用的。&lt;/p&gt;
&lt;p&gt;详细的说明一下这次的bug，&lt;code&gt;Warning:setState(...):Can only update a mounter or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Login component.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后我把setState和导航跳转的顺序调了之后就正常运行，没有警告。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//改之后&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let timer =  setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    clearTimeout(timer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    this.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        //...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    const &amp;#123; navigator &amp;#125; = this.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    navigator.resetTo(&amp;#123;name: &amp;apos;BottomTap&amp;apos;, component: BottomTap&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,3000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//改之前&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let timer =  setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    clearTimeout(timer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    const &amp;#123; navigator &amp;#125; = this.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    navigator.resetTo(&amp;#123;name: &amp;apos;BottomTap&amp;apos;, component: BottomTap&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					this.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        editable: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        login:false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        disabled:false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,3000);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;哈哈，我也是比较笨，这都没看到！当时写的时候也不规范。全都怪我，没把改写的代码好好写。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;记录map方法&quot;&gt;&lt;a href=&quot;#记录map方法&quot; class=&quot;headerlink&quot; title=&quot;记录map方法&quot;&gt;&lt;/a&gt;记录map方法&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;map方法可以很轻松的迭代数组中的每一个元素，并且根据回调函数来处理每一个元素，最后返回一
    
    </summary>
    
      <category term="react" scheme="http://zuesblog.xyz/categories/react/"/>
    
    
      <category term="react-native" scheme="http://zuesblog.xyz/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>REACT-NATIVE开发_项目感想10</title>
    <link href="http://zuesblog.xyz/2017/03/04/REACT-NATIVE%E5%BC%80%E5%8F%91_%E9%A1%B9%E7%9B%AE%E6%84%9F%E6%83%B310/"/>
    <id>http://zuesblog.xyz/2017/03/04/REACT-NATIVE开发_项目感想10/</id>
    <published>2017-03-04T12:16:05.000Z</published>
    <updated>2017-07-28T05:29:05.474Z</updated>
    
    <content type="html">&lt;h2 id=&quot;关于ios新的坑&quot;&gt;&lt;a href=&quot;#关于ios新的坑&quot; class=&quot;headerlink&quot; title=&quot;关于ios新的坑&quot;&gt;&lt;/a&gt;关于ios新的坑&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;今天刚部署最新的项目到ios上时，发现一点问题：&lt;br&gt;一，由于上次我使用&lt;code&gt;react-native-upgrade&lt;/code&gt;更新过版本，于是在一些文件夹里面会出现冲突，找到自己需要的，删除不需要的即可，我按照我自己想法，把their保留了下来，删了我以前的our，我认为更新之后应该是这样的&lt;/p&gt;
&lt;p&gt;二，然后，使用xcode重新编译之后，开始报第一个错，发现少了&lt;code&gt;react-native-root-toast&lt;/code&gt;这个库，install之后就可以正常运行了&lt;/p&gt;
&lt;p&gt;三，接着是&lt;code&gt;react-native-blur&lt;/code&gt;这个库，同样方法执行就可以了&lt;/p&gt;
&lt;p&gt;四，项目正常打开之后发现一个问题，缺少对应的Material Icons，于是找到&lt;code&gt;react-native-icons&lt;/code&gt;这个库，里面有对应的解决办法，这就轻松很多了，也就是将&lt;code&gt;node_modules/react-native-vector-icons&lt;/code&gt;里面的&lt;code&gt;Fonts&lt;/code&gt;文件夹添加到Xcode的项目中，正确执行方法是，在xcode中项目根目录下右键，选中Add flies to project，找到对应的fonts加进去即可&lt;/p&gt;
&lt;p&gt;五，fonts加进去之后还有一个问题，按照&lt;code&gt;react-native-vector-icons&lt;/code&gt;的说法，还有编辑一下Info.plist，添加对应的字体进去，顺手就把网络问题改了一下，也就是&lt;code&gt;App Transport Security Settings&lt;/code&gt;中添加并修改一个属性&lt;code&gt;Allow Arbitrary Loads&lt;/code&gt;，改为YES，ok， done！&lt;/p&gt;
&lt;p&gt;第四个问题可以参见这里：&lt;a href=&quot;https://github.com/oblador/react-native-vector-icons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/oblador/react-native-vector-icons&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;访问相册和获取拍照功能&quot;&gt;&lt;a href=&quot;#访问相册和获取拍照功能&quot; class=&quot;headerlink&quot; title=&quot;访问相册和获取拍照功能&quot;&gt;&lt;/a&gt;访问相册和获取拍照功能&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;昨天在ios上访问不了图册和照相功能，于是在&lt;code&gt;react-native-image-crop-picker&lt;/code&gt;的github上找到原因，缺少对应的权限，需要做一下几步来获取：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在xcode上打开&lt;code&gt;info.plist&lt;/code&gt;添加相应的key和string，按照github上的指引，我添加了三个权限，分别是&lt;code&gt;NSPhotoLibraryUsageDescription&lt;/code&gt;、&lt;code&gt;NSCameraUsageDescription&lt;/code&gt;和&lt;code&gt;NSMicrophoneUsageDescription&lt;/code&gt;,来获取相册、照相机和用户多媒体的权限，来上传照片还有视频，不过这里我是不需要多媒体的，因为我没有用到上传视频&lt;/li&gt;
&lt;li&gt;接着是判断自己电脑有没有安装&lt;code&gt;cocoapods&lt;/code&gt;，如果有的话，在podfile上修改&lt;code&gt;platform:ios, &amp;#39;8.0&amp;#39;&lt;/code&gt;，再添加&lt;code&gt;pod &amp;#39;RSKImageCropper&amp;#39;&lt;/code&gt;和&lt;code&gt;pod &amp;#39;QBImagePickerController&amp;#39;&lt;/code&gt;到pobfile中&lt;/li&gt;
&lt;li&gt;先来补充一下，&lt;code&gt;CocoaPods&lt;/code&gt;是iOS最常用最有名的类库管理工具，当项目中用到的类库有更新，要下载新版本并且要加到项目中，使用它一条命令行就可以解决了&lt;/li&gt;
&lt;li&gt;不过我没有安装这个，于是按照提示，我把&lt;code&gt;react-native-image-crop-picker&lt;/code&gt;模型中的ios/ImageCropPickerSDK文件夹拖到xcode项目中&lt;/li&gt;
&lt;li&gt;点击项目根目录，在xcode的主界面会有一个General界面，在里面将&lt;code&gt;Deployment Info&lt;/code&gt;设置&lt;code&gt;Deployment Target&lt;/code&gt;为8.0，我这里好像默认就是8.0了&lt;/li&gt;
&lt;li&gt;最后就是在&lt;code&gt;Embedded Binariesz&lt;/code&gt;中点击&lt;code&gt;+&lt;/code&gt;添加对应&lt;code&gt;RSKImageCropper.framework&lt;/code&gt;和&lt;code&gt;QBImagePicker.framework&lt;/code&gt;框架，这里我要提醒自己，需要提前将对应的RSKImageCropper和QBImagePicker文件drap到xcode上，方法同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;./img/updateAvatar1.png&quot; alt=&quot;配置权限详情&quot;&gt;&lt;br&gt;&lt;img src=&quot;./img/updateAvatar2.png&quot; alt=&quot;配置对应的框架&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;值得注意&quot;&gt;&lt;a href=&quot;#值得注意&quot; class=&quot;headerlink&quot; title=&quot;值得注意&quot;&gt;&lt;/a&gt;值得注意&lt;/h3&gt;&lt;p&gt;再次提醒一下自己，当把项目部署到ios上的时候，git clone之后，只用命令行&lt;code&gt;npm install&lt;/code&gt;即可以安装好对应的modal，然后使用&lt;code&gt;react-native link&lt;/code&gt;添加相关的依赖，接着就可以使用&lt;code&gt;react-native run-android&lt;/code&gt;就可以跑起来了，有可能会遇到上面的那些情况&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于ios新的坑&quot;&gt;&lt;a href=&quot;#关于ios新的坑&quot; class=&quot;headerlink&quot; title=&quot;关于ios新的坑&quot;&gt;&lt;/a&gt;关于ios新的坑&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;今天刚部署最新的项目到ios上时，发现一点问题：&lt;br&gt;一，由于上次我使用&lt;cod
    
    </summary>
    
      <category term="react" scheme="http://zuesblog.xyz/categories/react/"/>
    
    
      <category term="react-native" scheme="http://zuesblog.xyz/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之路-绪论（三）</title>
    <link href="http://zuesblog.xyz/2016/12/24/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF-%E7%BB%AA%E8%AE%BA%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://zuesblog.xyz/2016/12/24/产品经理之路-绪论（三）/</id>
    <published>2016-12-24T09:43:32.000Z</published>
    <updated>2017-07-28T05:34:40.901Z</updated>
    
    <content type="html">&lt;h2 id=&quot;产品经理的定位&quot;&gt;&lt;a href=&quot;#产品经理的定位&quot; class=&quot;headerlink&quot; title=&quot;产品经理的定位&quot;&gt;&lt;/a&gt;产品经理的定位&lt;/h2&gt;&lt;p&gt;PM的轨迹穿透整个产品的生命周期，从我收集的资料显示，从需求开始，经历产品评估、产品定义、产品开发、产品发布、产品迭代开发、产品发布…&lt;br&gt;&lt;img src=&quot;https://xmindshare.s3.amazonaws.com/preview/YG45-nMhabmo-74916.png&quot; alt=&quot;PM route&quot;&gt;&lt;/p&gt;
&lt;p&gt;千里之行始于足下，不难想象最为困难并且最重要的是&lt;strong&gt;产品评估&lt;/strong&gt;和&lt;strong&gt;产品定义环节&lt;/strong&gt;，如果这一道棋下错，后面损失的利益是难以衡量，甚至是致命的。&lt;/p&gt;
&lt;h3 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; title=&quot;定位&quot;&gt;&lt;/a&gt;定位&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;因此我认为产品经理的定位是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一名定义产品的技术可行性、市场可用性，通过开发团队输出成品，并站在用户角度，不断优化完善产品的团队灵魂。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;产品经理的定位&quot;&gt;&lt;a href=&quot;#产品经理的定位&quot; class=&quot;headerlink&quot; title=&quot;产品经理的定位&quot;&gt;&lt;/a&gt;产品经理的定位&lt;/h2&gt;&lt;p&gt;PM的轨迹穿透整个产品的生命周期，从我收集的资料显示，从需求开始，经历产品评估、产品定义、产品开发、
    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之路-绪论（二）</title>
    <link href="http://zuesblog.xyz/2016/12/23/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF-%E7%BB%AA%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://zuesblog.xyz/2016/12/23/产品经理之路-绪论（二）/</id>
    <published>2016-12-23T01:41:30.000Z</published>
    <updated>2017-07-28T05:34:21.851Z</updated>
    
    <content type="html">&lt;h2 id=&quot;我为什么希望成为产品经理？&quot;&gt;&lt;a href=&quot;#我为什么希望成为产品经理？&quot; class=&quot;headerlink&quot; title=&quot;我为什么希望成为产品经理？&quot;&gt;&lt;/a&gt;我为什么希望成为产品经理？&lt;/h2&gt;&lt;p&gt;这是续之前&lt;a href=&quot;&quot;&gt;产品经理之路_绪论&lt;/a&gt;目录写的第二篇，别人都说我像猪，倒头就能睡着，或许没毛病，哈哈，因为我好懒，真的没法一下子把四篇博客写完。&lt;/p&gt;
&lt;p&gt;转入正题，热爱产品经理这个职业是因为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;挑战性&lt;/li&gt;
&lt;li&gt;创造价值&lt;/li&gt;
&lt;li&gt;发现问题&lt;/li&gt;
&lt;li&gt;数据分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;挑战性&quot;&gt;&lt;a href=&quot;#挑战性&quot; class=&quot;headerlink&quot; title=&quot;挑战性&quot;&gt;&lt;/a&gt;挑战性&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;“将杰出人物和我们其他人区分开来的主要因素是：他们经过年复一年的练习，已经改变了大脑中的神经回路，以创建高度专业化的心理表征，这些心理表征反过来使得令人难以置信的记忆、规律的识别、问题的解决成为可能”&lt;/strong&gt;,在读安德斯·艾利克森的《刻意练习》被这句话所吸引，书中分析为何平凡人一直平凡，并非他们缺乏勤奋和练习，而是他们一直在舒服区间反复练习，与老鼠和猫、麋鹿和豹子甚至是互联网的竞争对手互相挑战互相进步不一样，保持安逸意味着止步不前，大脑也一样，不刻意挑战更高难度，终将变得迟钝，尽管很勤奋反复练习。PM作为产品核心，不仅要和公司内部各部门打交道，还要和外部的客户访谈获取一手数据，富有挑战。&lt;/p&gt;
&lt;h3 id=&quot;创造价值&quot;&gt;&lt;a href=&quot;#创造价值&quot; class=&quot;headerlink&quot; title=&quot;创造价值&quot;&gt;&lt;/a&gt;创造价值&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;7点45分，又该起床了，有时候我会苦恼，可不可以呆在宿舍，不去工作室，脑子充斥着重复造车轮的消极心理。程序员喜欢不断尝试新技术，我骨子里也流淌着这样的血液，渴望创造价值，不管是写一款富有创意的应用，亦或是一个酷炫的交互特效。产品经理要从0到1创造一个作品，而产品的定义，便是价值创造的过程，为解决现实问题提出需求，用更加人性化的简易操作解决问题。&lt;/p&gt;
&lt;h3 id=&quot;发现问题&quot;&gt;&lt;a href=&quot;#发现问题&quot; class=&quot;headerlink&quot; title=&quot;发现问题&quot;&gt;&lt;/a&gt;发现问题&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;在《人人都是产品经理》中提到了一个产品的职业病，虽说是调侃，但却令我非常向往那种细腻的观察力，能快速觉察到一个产品哪里不足，看一场春晚都会挑出很多毛病，唱一次K也会一直吐槽点歌系统，甚至是一群产品吃饭都会对菜单指指点点，提出很多改善的建议，刻意挑毛病固然简单，但若能发现问题，并提出有效的优化方案就很有趣了，方法总比问题多，而PM却能在众多可行解中找到最优解。&lt;/p&gt;
&lt;h3 id=&quot;数据分析&quot;&gt;&lt;a href=&quot;#数据分析&quot; class=&quot;headerlink&quot; title=&quot;数据分析&quot;&gt;&lt;/a&gt;数据分析&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;数据分析界中有一句名言：&lt;strong&gt;字&amp;lt;表&amp;lt;图&lt;/strong&gt;，数据可视化是数据分析的目的，挖掘数据只是第一步，能把复杂繁多的数据简化为让人几分钟甚至几十秒能看懂的报表非常困难，数据分析的价值不仅仅是报表，更多的是报表中了解用户真实需要的不是更快的马，或许是一辆车。透过现象看本质，从海量数据中还原最核心的需求，没有什么比这更具洞察力了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;或许产品经理还有更多优点，而我只是一个大三的菜鸟，哈哈哈！希望能下学期多点实战，下面附上整理好的PM特质，结束这一章的博客！&lt;br&gt;&lt;img src=&quot;https://xmindshare.s3.amazonaws.com/preview/983P-jYpLAih-67194.png&quot; alt=&quot;PM_advantage&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我为什么希望成为产品经理？&quot;&gt;&lt;a href=&quot;#我为什么希望成为产品经理？&quot; class=&quot;headerlink&quot; title=&quot;我为什么希望成为产品经理？&quot;&gt;&lt;/a&gt;我为什么希望成为产品经理？&lt;/h2&gt;&lt;p&gt;这是续之前&lt;a href=&quot;&quot;&gt;产品经理之路_绪论&lt;
    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
  </entry>
  
  <entry>
    <title>REACT-NATIVE开发_rn的ios真机调试</title>
    <link href="http://zuesblog.xyz/2016/12/20/REACT-NATIVE%E5%BC%80%E5%8F%91_ios%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/"/>
    <id>http://zuesblog.xyz/2016/12/20/REACT-NATIVE开发_ios真机调试/</id>
    <published>2016-12-20T06:58:30.000Z</published>
    <updated>2017-07-28T05:28:43.026Z</updated>
    
    <content type="html">&lt;h2 id=&quot;RN的ios真机调试&quot;&gt;&lt;a href=&quot;#RN的ios真机调试&quot; class=&quot;headerlink&quot; title=&quot;RN的ios真机调试&quot;&gt;&lt;/a&gt;RN的ios真机调试&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在没使用之前我就已经能猜到会出现无数的bug，果然不出我所料，但是对于开发安卓已经一年的我来说，这点小坑难不倒我，还是瞬间给我解决掉了，不久，也就花了两天而已。&lt;/p&gt;
&lt;p&gt;我是在虚拟机上安装的mac系统，首先借了一台ipone来调试，手机的系统是ios 10.2，很明显我的Xcode刚好是8.1不支持ios 10.2，无奈只好去更新版本。&lt;/p&gt;
&lt;p&gt;虚拟机网速慢是出了名的，于是一天就过去了。&lt;/p&gt;
&lt;p&gt;开始来真东西了，手机连接电脑，首先识别不了设备。于是在网上看到了这个解决办法&lt;a href=&quot;http://www.wuji8.com/meta/201556592.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的ipone不能被虚拟机识别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接着按照里面的步骤，将ipone连接电脑，在虚拟系统没有全屏的时候，鼠标右键点击右下角灰色usb设备图标和ipone图标，点击&lt;code&gt;连接（断开与主机的连接）&lt;/code&gt;，接着修改虚拟机的usb版本，重启。&lt;/p&gt;
&lt;h2 id=&quot;应用签名&quot;&gt;&lt;a href=&quot;#应用签名&quot; class=&quot;headerlink&quot; title=&quot;应用签名&quot;&gt;&lt;/a&gt;应用签名&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在上一步完成之后打开虚拟机这时候就可以连接到iphone了，但是这还不够，你还需要调试出来，选择了run的设备为真机之后开始运行，这时候弹出一个错误：&lt;code&gt;Code signing is required for product type &amp;#39;Application&amp;#39; in SDK &amp;#39;iOS 10.2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;过程我就不说了，直接说结果吧！我后面找了很多篇国内的博客还是不如stack overflow的问答好，尽管看英文有点蛋疼，不过耐心翻译之后基本问题就解决了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1,在Xcode上打开项目，然后点击自己项目的根目录，可以看到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;在VMWare上的mac-os共享win-10的文件夹&quot;&gt;&lt;a href=&quot;#在VMWare上的mac-os共享win-10的文件夹&quot; class=&quot;headerlink&quot; title=&quot;在VMWare上的mac os共享win 10的文件夹&quot;&gt;&lt;/a&gt;在VMWare上的mac os共享win 10的文件夹&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;首先我是在这篇&lt;a href=&quot;http://blog.csdn.net/limm33/article/details/52879761&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何在vmware中安装mac OS系统&lt;/a&gt;博客上找到的解决方法，非常感谢！&lt;/p&gt;
&lt;p&gt;一开始的时候，我启用共享文件夹之后，发现按照步骤，在mac虚拟机的桌面上看不到共享的文件夹，当时没在意，因为暂时还用不上共享的功能&lt;/p&gt;
&lt;p&gt;后来发现非常需要，因为本地的文件想要共享到mac上需要上传到云，再下载下来，得花不少时间。&lt;/p&gt;
&lt;p&gt;设置共享文件夹之前的步骤我就不聊了，google一下到处都会有教，其实最关键的一个步骤就是在启用文件共享之后&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.确保左上角苹果标志的旁边是”Finder”&lt;/li&gt;
&lt;li&gt;2.点击”Finder”&lt;/li&gt;
&lt;li&gt;3.选择”偏好设置”&lt;/li&gt;
&lt;li&gt;4.然后在 “通用” 标签下勾选”已连接服务器”&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/710856/201510/710856-20151029223326169-1014964687.png&quot; alt=&quot;左上角的finder&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/710856/201510/710856-20151029223332700-636849598.png&quot; alt=&quot;finder的偏好设置&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后就能看到桌面出现了VMware Shared Folders的图标了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RN的ios真机调试&quot;&gt;&lt;a href=&quot;#RN的ios真机调试&quot; class=&quot;headerlink&quot; title=&quot;RN的ios真机调试&quot;&gt;&lt;/a&gt;RN的ios真机调试&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在没使用之前我就已经能猜到会出现无数的bug，果然不出我所料，但是
    
    </summary>
    
      <category term="react" scheme="http://zuesblog.xyz/categories/react/"/>
    
    
      <category term="react-native" scheme="http://zuesblog.xyz/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之路-绪论</title>
    <link href="http://zuesblog.xyz/2016/12/20/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF-%E7%BB%AA%E8%AE%BA/"/>
    <id>http://zuesblog.xyz/2016/12/20/产品经理之路-绪论/</id>
    <published>2016-12-20T03:10:32.000Z</published>
    <updated>2017-07-28T05:34:36.932Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;这是我慎重思考后的一次感悟，希望会是一个起点，因为我发现眼前的灯，被点亮了！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;我对当前的生活满意吗？（赶时间的小伙伴可以跳过这章作者扯淡环节）&lt;/li&gt;
&lt;li&gt;我为什么希望成为产品经理？&lt;/li&gt;
&lt;li&gt;产品经理的定位是什么？&lt;/li&gt;
&lt;li&gt;这个过程中，我要怎么做？&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;围着这四个问题，我写下这篇心得。有兴趣的程序员可以借鉴一下我的想法，哈哈。&lt;/p&gt;
&lt;h2 id=&quot;我对当前的生活满意吗？&quot;&gt;&lt;a href=&quot;#我对当前的生活满意吗？&quot; class=&quot;headerlink&quot; title=&quot;我对当前的生活满意吗？&quot;&gt;&lt;/a&gt;我对当前的生活满意吗？&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;第一阶段——起源&quot;&gt;&lt;a href=&quot;#第一阶段——起源&quot; class=&quot;headerlink&quot; title=&quot;第一阶段——起源&quot;&gt;&lt;/a&gt;第一阶段——起源&lt;/h3&gt;&lt;p&gt;就读于江门最高学府，大二学生，听起来还是蛮不错的，但其实选这所学校之前我觉得校名很LOW，但命运之轮将我推向了它，还能怎么办，凉拌啊！&lt;/p&gt;
&lt;p&gt;我喜欢技术，但我也喜欢管理类的专业，听起来像是两门交叉学科，但确实学校有一门专业刚好在这两者之间找到了平衡，也就是我现在就读的电子商务专业，认为专业比学校重要的我在“物超所值”影响下（其实更多的是我发现马云也是电商领域的），毫不犹豫把它放在第一志愿。&lt;/p&gt;
&lt;p&gt;当然现实没有让我失望，幸运的我由于专业优势，在面试最高大上的电子商务研究开发实验室（&lt;strong&gt;袂卓工作室&lt;/strong&gt;）开发组中脱颖而出，原因是我提前学了HTML和CSS，不过HTML和移动开发真的差别挺大，为什么能被录取，哈哈哈。&lt;/p&gt;
&lt;h3 id=&quot;第二阶段——挣扎与反思&quot;&gt;&lt;a href=&quot;#第二阶段——挣扎与反思&quot; class=&quot;headerlink&quot; title=&quot;第二阶段——挣扎与反思&quot;&gt;&lt;/a&gt;第二阶段——挣扎与反思&lt;/h3&gt;&lt;p&gt;听着工作室二十位不到的“大牛”轻快的键盘敲击声，让我一刻都不敢放松，觉得空气都在挤压着我，两个星期下来发现加入之后学习效率反而比之前还慢，觉得宿舍学更轻松。&lt;/p&gt;
&lt;p&gt;舍友打机的声音很吵，有时还爆粗口，进去工作室后虽然被大部分的同学投以羡慕的眼光，但我内心却极度浮躁，面试之前的学习激情没有了，我不喜欢打游戏于是那个下午看了两部电影，倒头睡了一觉，晚上又看了一部电影，我当时咱这么能看啊#哭笑不得。&lt;/p&gt;
&lt;p&gt;睡前洗漱，突然一想，“糟糕，今天什么都没学，可能睡多了，头好疼”，在高中形成的习惯，睡前回忆今天学了什么。由于下午忙着睡觉，竟毫无睡意，脑海冒出一堆乱糟糟的东西，眼睛盯着蚊帐，开始慢慢平静下来，在思维垃圾堆中发现高考前最初的志向，就算考不到重点大学，我也要成为最让家人自豪的孩子。&lt;/p&gt;
&lt;h3 id=&quot;第三阶段——起色&quot;&gt;&lt;a href=&quot;#第三阶段——起色&quot; class=&quot;headerlink&quot; title=&quot;第三阶段——起色&quot;&gt;&lt;/a&gt;第三阶段——起色&lt;/h3&gt;&lt;p&gt;其实第二阶段我并没有记忆那么仔细，而是在工作室中，我反复做过同样的挣扎，最后是家人的力量让我重新战斗，我没细数有过多少这样的夜晚，能肯定的是我慢慢适应了工作室的氛围，现在的我总结出了当时呼吸困难的原因：&lt;code&gt;没实力自己又非常倔强，担心自己学校进度比其它计算机专业小伙伴慢&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但事实证明了，尽管我努力了很久，在技术方面我有很多地方都不及同时招进来的其它小伙伴，因为他们也不比我懒，局面很糟糕，但我依然入门了人生中第一门计算机语言&lt;code&gt;JAVA&lt;/code&gt;，为什么我敢肯定，因为我不断的实践失败总结复习、实践失败总结复习、实践失败总结复习……以至于后面上手安卓时读代码觉得很轻松，在博客上看到零基础的人学安卓都比较痛苦，而我就只是在看文档，与学会英语语法之后不断的练习词组使用场景一样。&lt;/p&gt;
&lt;h3 id=&quot;第四阶段——转折点&quot;&gt;&lt;a href=&quot;#第四阶段——转折点&quot; class=&quot;headerlink&quot; title=&quot;第四阶段——转折点&quot;&gt;&lt;/a&gt;第四阶段——转折点&lt;/h3&gt;&lt;p&gt;学会安卓之后写过几个简单的作品，包括2048，还不错哈哈，没忍住向班上同学灌输了我是大牛的假象，&lt;strong&gt;终于知道为什么越没能力越喜欢炫耀了，当时太急迫想得到别人肯定了&lt;/strong&gt;，工作室的都是大牛，其它组员也比我厉害得多，虽然那时候做法很笨，但也为我带来了机遇，由于技术知名度在班上的提高，女同学（男同学也有啦）都来问我电脑问题，碍于面子问题几乎没拒绝过，因为开发中精通了google大法，动手解决问题变得轻松许多，而在帮她们解决问题同时我也不断发现了一些优质的平台，类似知乎、简书、豆瓣、CSDN、维基百科等等，更重要的是，我开始被学生创业团队邀请成为他们的核心开发人员，有幸以程序员身份参加了商业比赛。&lt;/p&gt;
&lt;p&gt;不过早在大一开学不久我就开始参加创业比赛，那时很幸运能和几个大三师姐组队，获得了校内二等奖。大二下学期被邀请加入了一个四人女生的宿舍团队，或许我有经验并且逻辑思维较好，非常荣幸成为队长。从没充当过这个角色的我，显得有点焦虑，本来以为写好app和搭建网站就可以，不过队长要干的事情恐怕没有这么简单。&lt;/p&gt;
&lt;p&gt;项目的idea提出前，我看了小米应用商店的app种类，收集每个种类前3名的应用，整理它们的核心功能，希望能在现有的产品基础上获得项目灵感。收集好后我向团队成员发了一条通知：小伙伴们在早上收集一下社会痛点，整理好私聊发给我，下午3点书吧大家聚一聚，来个头脑风暴。&lt;/p&gt;
&lt;p&gt;于是这样的聚会就持续了几天，知识地点不一样，虽然讨论过程中大家的想法都比较好，而且还时而跑题，但我们聚会的目标很专注，就是想一个具有社会价值并具备可行性的项目。最终我们确定了项目核心，并把项目成功做了出来，在多项比赛中都获得了优秀的名次。&lt;/p&gt;
&lt;h3 id=&quot;第五阶段——认识自己&quot;&gt;&lt;a href=&quot;#第五阶段——认识自己&quot; class=&quot;headerlink&quot; title=&quot;第五阶段——认识自己&quot;&gt;&lt;/a&gt;第五阶段——认识自己&lt;/h3&gt;&lt;p&gt;当队长那段时间里，我经常反思，包括工作室的自卑心理，也是我最希望和大家分享的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然我只会JAVA和移动开发，技术水平比小伙伴们差，但我有他们不可比拟的优势，想起选专业时的初衷，我喜欢管理学，正是专业优势，我的商业意识比技术小伙伴们要敏锐得多，这也奠定了我现在的优势，我现在开发着一个签到系统，除了实现细节，更多会考虑app的实用性。工作室写过很多产品，都是突然想到一个绝佳的想法，然后开始干活，没有经过市场验证，这也带来过高人力成本的损失，当然交给师弟练手是不错的，但我们都已经有开发经验，除了在项目中用新学的技术，还要进行可靠性的市场调研，当然在当队长时我也只是做问卷调查，然后做数据透析表汇总再分析数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;又扯远了！遇上坏事突然用爱因斯坦的相对论来思考问题往往会很舒服，至少能很全面的认识自己，一件事情很糟糕？那肯定也很积极，换个角度想想，其实生活not bad。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;为什么我会突然写下这篇文章，灵感来自&lt;a href=&quot;http://developer.51cto.com/art/201211/364725.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从程序员到项目经理成长历程&lt;/a&gt;，今天花了早上两大节课才看完#哭笑不得。&lt;/p&gt;
&lt;p&gt;文章虽然讲述的是项目经理，但也阐述了一个观点，如果自身具备其它程序员所没有商业嗅觉和全局思维，为何不尝试做管理，我技术渣渣但我热爱生活，愿我能创造一款改变世界的产品。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;这是我慎重思考后的一次感悟，希望会是一个起点，因为我发现眼前的灯，被点亮了！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;我对当前的生活满意吗？（赶时间的小伙伴可以跳过这章作者扯淡环节）&lt;/li&gt;
&lt;li&gt;我为什么希望成为产品经理？
    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
  </entry>
  
  <entry>
    <title>REACT-NATIVE开发_项目感想9</title>
    <link href="http://zuesblog.xyz/2016/12/14/REACT-NATIVE%E5%BC%80%E5%8F%91_%E9%A1%B9%E7%9B%AE%E6%84%9F%E6%83%B39/"/>
    <id>http://zuesblog.xyz/2016/12/14/REACT-NATIVE开发_项目感想9/</id>
    <published>2016-12-14T08:03:58.000Z</published>
    <updated>2017-07-28T05:29:07.456Z</updated>
    
    <content type="html">&lt;h2 id=&quot;关于ref的一点坑&quot;&gt;&lt;a href=&quot;#关于ref的一点坑&quot; class=&quot;headerlink&quot; title=&quot;关于ref的一点坑&quot;&gt;&lt;/a&gt;关于ref的一点坑&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;今天在使用ref来调用自组件的时候发现了一个东西，可能我这个问题是特例吧！因为我是用了别人的库才发现这个问题的，不过我还是要记录一下。&lt;/p&gt;
&lt;p&gt;我使用的库是&lt;a href=&quot;https://github.com/exponent/react-native-tab-navigator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-tab-navigator&lt;/a&gt;，一个很优秀的底部导航栏。&lt;/p&gt;
&lt;p&gt;问题：当我在底部栏的home位置时，home对应的component也是home，home里面有一个按钮导航到分享页面.下面的DOM均为模拟&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;render()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;TabNavigator&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  &amp;lt;TabNavigator.Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				selected=&amp;#123;this.state.selectedTab === &amp;apos;home&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				title=&amp;quot;Home&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				renderIcon=&amp;#123;() =&amp;gt; &amp;lt;Image source=&amp;#123;...&amp;#125; /&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				renderSelectedIcon=&amp;#123;() =&amp;gt; &amp;lt;Image source=&amp;#123;...&amp;#125; /&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				badgeText=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				onPress=&amp;#123;this.toShare.bind(this)&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;home ref=&amp;#123;c =&amp;gt; this._home = c&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  &amp;lt;/TabNavigator.Item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  &amp;lt;TabNavigator.Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				selected=&amp;#123;this.state.selectedTab === &amp;apos;user&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				title=&amp;quot;user&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				renderIcon=&amp;#123;() =&amp;gt; &amp;lt;Image source=&amp;#123;...&amp;#125; /&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				renderSelectedIcon=&amp;#123;() =&amp;gt; &amp;lt;Image source=&amp;#123;...&amp;#125; /&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				badgeText=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				onPress=&amp;#123;this.toShare.bind(this)&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;user ref=&amp;#123;c =&amp;gt; this._user = c&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  &amp;lt;/TabNavigator.Item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;/TabNavigator&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toShare()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this._home.testRef();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在home里面有一个&lt;code&gt;testRef()&lt;/code&gt;方法。这时候点击home里面的onPress的时候就会有一个alert。&lt;br&gt;但是当我在user里面使用ref的时候，因为使用ref的时候需要先初始化，所以当我在select tab为home的时候使用&lt;code&gt;this._user.testRef()&lt;/code&gt;就警告说undefined了。&lt;/p&gt;
&lt;h2 id=&quot;Type-Error-Network-request-failed&quot;&gt;&lt;a href=&quot;#Type-Error-Network-request-failed&quot; class=&quot;headerlink&quot; title=&quot;Type Error: Network request failed&quot;&gt;&lt;/a&gt;Type Error: Network request failed&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;重新遇到ios的fetch API报错，Type Error: Network request failed问题&lt;br&gt;这一次我还是按照上次的有过的经验改了一下，可是一开始用文本编辑器修改了&lt;code&gt;appName/ios/appName/Info.plist&lt;/code&gt;还是改了之后没生效，我试过将模拟器重启，还有无数次reload，还是没生效，甚至我还试过长时间等待，再重新reboot模拟器，还是不行&lt;/p&gt;
&lt;p&gt;最后使用Xcode直接打开&lt;code&gt;Info.plist&lt;/code&gt;来修改，在对应的&lt;code&gt;AppTransportSecurity&lt;/code&gt;中点击一个&lt;code&gt;+&lt;/code&gt;号，会直接添加一个子key，找到key的名字为&lt;code&gt;Allow Arbitrary Loads&lt;/code&gt;就可以了。&lt;br&gt;对应&lt;code&gt;info.plist&lt;/code&gt;如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;true/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;key&amp;gt;NSExceptionDomains&amp;lt;/key&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;dict&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;key&amp;gt;localhost&amp;lt;/key&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;dict&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;key&amp;gt;NSTemporaryExceptionAllowsInsecureHTTPLoads&amp;lt;/key&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;true/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/dict&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/dict&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;xcode打开如下&lt;br&gt;&lt;img src=&quot;http://bbs.reactnative.cn/uploads/files/1473409969387-bd986712-10a5-4a38-9deb-f5b45d7fd16d.png&quot; alt=&quot;info.plist&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后重新安装到模拟器，&lt;code&gt;react-native run-ios&lt;/code&gt;，应用的网络就跑起来了。&lt;br&gt;至于为什么要修改原来默认的AppTransportSecurity的属性，可以参考这篇博客&lt;a href=&quot;http://www.pluto-y.com/ios9-nsapptransportsecurity/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS9 - NSAppTransportSecurity&lt;/a&gt;,我觉得写得蛮详细。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于ref的一点坑&quot;&gt;&lt;a href=&quot;#关于ref的一点坑&quot; class=&quot;headerlink&quot; title=&quot;关于ref的一点坑&quot;&gt;&lt;/a&gt;关于ref的一点坑&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;今天在使用ref来调用自组件的时候发现了一个东西，可能我这个问题是特例吧！
    
    </summary>
    
      <category term="react" scheme="http://zuesblog.xyz/categories/react/"/>
    
    
      <category term="react-native" scheme="http://zuesblog.xyz/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>python学习_一个python小常识</title>
    <link href="http://zuesblog.xyz/2016/12/05/python%E5%AD%A6%E4%B9%A0_%E5%B0%8F%E5%B8%B8%E8%AF%86/"/>
    <id>http://zuesblog.xyz/2016/12/05/python学习_小常识/</id>
    <published>2016-12-05T05:57:41.000Z</published>
    <updated>2017-07-28T05:27:33.458Z</updated>
    
    <content type="html">&lt;h2 id=&quot;python程序开头-usr-bin-python3&quot;&gt;&lt;a href=&quot;#python程序开头-usr-bin-python3&quot; class=&quot;headerlink&quot; title=&quot;python程序开头#!/usr/bin/python3&quot;&gt;&lt;/a&gt;python程序开头#!/usr/bin/python3&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;这是脚本语言共同遵循的一个规则，用来指定脚本的解释器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;必须是在代码的首行&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;#!&lt;/code&gt;标记&lt;/li&gt;
&lt;li&gt;后面的字符串表示的是脚本解释器的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;在linus中，shell是通过读取第一行来判断执行文件的类型。如果是&lt;code&gt;#!&lt;/code&gt;开头，被标记为脚本。而windows下则是通过文件后缀做类型关联，例如&lt;code&gt;hello.py&lt;/code&gt;，然后才确定使用什么程序去执行或者打开文件。&lt;/p&gt;
&lt;p&gt;下面是一些常见的脚本标记例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;#!/bin/sh        shell脚本&lt;/li&gt;
&lt;li&gt;#!/usr/perl        perl脚本&lt;/li&gt;
&lt;li&gt;#!/usr/bin/python        python脚本&lt;/li&gt;
&lt;li&gt;#!/usr/bin/python2        python2脚本&lt;/li&gt;
&lt;li&gt;#!/usr/bin/python3        python3脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果不清楚脚本解释器的具体路径，或者开发环境与运行路径的安装路径不同，为了保证兼容性，可以使用&lt;code&gt;#!/usr/bin/env python3&lt;/code&gt;,这句标记可以在运行时自动搜索脚本解释器的绝对路径&lt;br&gt;这里是stackoverflow的详细解释，英文功底不错的同学可以点进去看&lt;a href=&quot;http://stackoverflow.com/questions/7670303/purpose-of-usr-bin-python3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Purpose of #!/usr/bin/python3&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python程序开头-usr-bin-python3&quot;&gt;&lt;a href=&quot;#python程序开头-usr-bin-python3&quot; class=&quot;headerlink&quot; title=&quot;python程序开头#!/usr/bin/python3&quot;&gt;&lt;/a&gt;python
    
    </summary>
    
      <category term="python" scheme="http://zuesblog.xyz/categories/python/"/>
    
    
      <category term="python入门" scheme="http://zuesblog.xyz/tags/python%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络_入门</title>
    <link href="http://zuesblog.xyz/2016/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_%E5%85%A5%E9%97%A8/"/>
    <id>http://zuesblog.xyz/2016/12/05/计算机网络_入门/</id>
    <published>2016-12-05T05:56:53.000Z</published>
    <updated>2017-07-28T05:34:55.513Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;谈起计算机网络，很多人都是一头雾水，我们都只知道怎么使用电脑，但是不知道怎么改变电脑，除了硬件的改变，还有网络。&lt;/p&gt;
&lt;p&gt;在使用互联网的时候，电脑市如何通过这台电脑给另一台局域网内的电脑或者是外网的电脑通信的呢？&lt;/p&gt;
&lt;p&gt;打个比方，我们人与人之间交流，如果是面对面的话，一般情况下我要知道我想和谁聊天，我们用什么语言来聊天，这个语言必须是我们都知道的，通过聊天我根据朋友回应的信息反馈一些动作给他，例如击掌或者点头。&lt;/p&gt;
&lt;p&gt;如果不是面对面，那就要采取写信的形式与对方交流了，我们寄一封信给亲人，信封必须提到的几个内容，发件人，发件人地址，邮编，收件人姓名，收件人地址，收件人邮编，以及承载内容的信。&lt;/p&gt;
&lt;p&gt;网络中的协议就相当于我们交流的语言，世界上规定了一系列标准的协议，负责让不同的电脑识别出来对方电脑在讲什么。而网络中有五个层，每一层都有不同的专业术语来描述，类似生活中每一个行业都有自己的专业术语类似。&lt;/p&gt;
&lt;p&gt;ok，开始学习！&lt;/p&gt;
&lt;h2 id=&quot;OSI模型&quot;&gt;&lt;a href=&quot;#OSI模型&quot; class=&quot;headerlink&quot; title=&quot;OSI模型&quot;&gt;&lt;/a&gt;OSI模型&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在开放的互联网模型中，根据不同的功能将其分为7层，也有其他的资料将其分为五层，这里运用OSI模型用七层来描述计算机网络结构。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据单元&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;层&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;应用层&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;表示层&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;会话层&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据段&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;传输层&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络分组&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;网络层&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据帧&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;数据链路&lt;/td&gt;
&lt;td&gt;将电信号组成一个数据包，规定多少电信号为一组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;比特&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;物理层&lt;/td&gt;
&lt;td&gt;提供传送数据的通路，作为传输介质，类似马路作为物理基础提供环境给汽车，传输0和1的电信号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;谈起计算机网络，很多人都是一头雾水，我们都只知道怎么使用电脑，但是不知道怎么改变电脑，除了硬件的改变，还有网络。&lt;/p&gt;
&lt;p&gt;在
    
    </summary>
    
      <category term="The Fundamental Skills" scheme="http://zuesblog.xyz/categories/The-Fundamental-Skills/"/>
    
    
      <category term="Computer Network" scheme="http://zuesblog.xyz/tags/Computer-Network/"/>
    
  </entry>
  
  <entry>
    <title>REACT-NATIVE开发_项目感想8</title>
    <link href="http://zuesblog.xyz/2016/11/27/REACT-NATIVE%E5%BC%80%E5%8F%91_%E9%A1%B9%E7%9B%AE%E6%84%9F%E6%83%B38/"/>
    <id>http://zuesblog.xyz/2016/11/27/REACT-NATIVE开发_项目感想8/</id>
    <published>2016-11-27T03:20:14.000Z</published>
    <updated>2017-07-28T05:29:09.698Z</updated>
    
    <content type="html">&lt;h2 id=&quot;BIG-FOUND&quot;&gt;&lt;a href=&quot;#BIG-FOUND&quot; class=&quot;headerlink&quot; title=&quot;BIG FOUND&quot;&gt;&lt;/a&gt;BIG FOUND&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;写了那么久的react native才发现这个，感觉有点羞愧，因为当时刚学的时候没看懂，现在重新倒回来看发现有新的体会，不用猜了，就是这个教程&lt;a href=&quot;http://bbs.reactnative.cn/topic/20/%E6%96%B0%E6%89%8B%E7%90%86%E8%A7%A3navigator%E7%9A%84%E6%95%99%E7%A8%8B/2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新手理解navigator的教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始写点我个人觉得比较棒的事情了，写下这段文字的时候，刚刚优化好代码并且搞定了登录之后返回到原来页面的时候实现页面重新渲染，我渲染数据和普通的pop之后返回数据不太一样，我这里需要将数据在登录之后传递给home页面的时候在与子类通信，传递头像和姓名的数据到drawerView。&lt;/p&gt;
&lt;p&gt;一开始的时候，我使用了事件监听&lt;code&gt;DeviceEventEmitter&lt;/code&gt;,这个事件监听可以监听给同一个父类下的所有子组件，也就是说当我在login中使用&lt;code&gt;DeviceEventEmitter.emit(&amp;#39;test&amp;#39;,&amp;#39;hello&amp;#39;);&lt;/code&gt;然后在home和drawer注册监听，接着两个都能执行回调，这个当时给我灵感，但是后来发现，在执行回调的时候，本来想使用&lt;code&gt;setState&lt;/code&gt;改变数据重新渲染的，但是确报错说&lt;code&gt;undefine setState&lt;/code&gt;，于是这个灵感就被这样白白扼杀了。&lt;/p&gt;
&lt;p&gt;然后感觉百般困难的时候，无意中看到以前这篇教程，深有启发。先说一说这篇教程中我学到的用法，我直接摘抄原文了，自己写得不是太好。&lt;/p&gt;
&lt;p&gt;在我登录成功返回到home页面的时候，需要传递参数回到home页面，但是navigator.pop()并没有提供参数，因为pop()只是从 [路由1,路由2，路由3。。。]里把最后一个路由踢出去的操作，并不支持传递参数给倒数第二个路由，这里要用到一个概念，把上一个页面的实例或者回调方法，作为参数传递到当前页面来，在当前页面操作上一个页面的state。&lt;/p&gt;
&lt;h3 id=&quot;Login-js&quot;&gt;&lt;a href=&quot;#Login-js&quot; class=&quot;headerlink&quot; title=&quot;Login.js&quot;&gt;&lt;/a&gt;Login.js&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//我只贴出关键代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const &amp;#123; navigator &amp;#125; = this.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if(this.props.update)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.props.update(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (navigator)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    navigator.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当登录成功之后执行上面这段代码就会跳转回去home页面，接下里看home页面&lt;/p&gt;
&lt;h3 id=&quot;Home-js&quot;&gt;&lt;a href=&quot;#Home-js&quot; class=&quot;headerlink&quot; title=&quot;Home.js&quot;&gt;&lt;/a&gt;Home.js&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//上面忽略很多代码。。。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;DrawerView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   quitLogin=&amp;#123;this.quitLogin.bind(this)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   quitApp=&amp;#123;this.quitApp.bind(this)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   avatar=&amp;#123;this.state.avatar&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   username=&amp;#123;this.state.username&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//这里也忽略很代码。。。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toLogin()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       storage.load(&amp;#123;key:&amp;apos;loginState&amp;apos;&amp;#125;).then(r =&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           this.refs.drawer.openDrawer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;).catch(e =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           var params = &amp;#123;update:(ifRefresh) =&amp;gt; this.reRenderData(ifRefresh)&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           new Net().toOther(this.props,&amp;apos;Login&amp;apos;,Login,params);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           console.log(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//登录成功回调一个true，打开开关&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reRenderData(ifRefresh)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if(ifRefresh === true)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           new Net().getMethod(INFO).then((r) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               this.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   username:r.response.realname,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   avatar:r.response.avatar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;).catch(error =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               console.log(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       return null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;DrawerView-js&quot;&gt;&lt;a href=&quot;#DrawerView-js&quot; class=&quot;headerlink&quot; title=&quot;DrawerView.js&quot;&gt;&lt;/a&gt;DrawerView.js&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  source=&amp;#123;require(&amp;apos;../img/UserBackground.jpg&amp;apos;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  style=&amp;#123;styles.userBackground&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &amp;#123; this.props.avatar === null ?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &amp;lt;Image source=&amp;#123;require(&amp;apos;../img/UserDafault.png&amp;apos;)&amp;#125; style=&amp;#123;styles.avatar&amp;#125;&amp;gt;&amp;lt;/Image&amp;gt; :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &amp;lt;Image style=&amp;#123;styles.avatar&amp;#125; source=&amp;#123;&amp;#123;uri:&amp;apos;http://119.29.184.235:8080/jd/avatar/&amp;apos;+this.props.avatar&amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;Text style=&amp;#123;&amp;#123;color:&amp;apos;white&amp;apos;&amp;#125;&amp;#125;&amp;gt;你好，&amp;#123;this.props.username===null?this.state.myResponse:this.props.username&amp;#125;&amp;lt;/Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;#123;this.props.avatar === null?null:&amp;lt;Text style=&amp;#123;&amp;#123;color:&amp;apos;gray&amp;apos;&amp;#125;&amp;#125;&amp;gt;您已登录&amp;lt;/Text&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/Image&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ok，其实就是使用页面传参的方式，在导航倒转的时候带一个方法进去，在那个方法中可以修改原来页面的state，这个原理很好理解。&lt;br&gt;为什么当时没有想到，自己还真的有点笨，今天的博客写到这里下次学到新的东西再继续更新。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BIG-FOUND&quot;&gt;&lt;a href=&quot;#BIG-FOUND&quot; class=&quot;headerlink&quot; title=&quot;BIG FOUND&quot;&gt;&lt;/a&gt;BIG FOUND&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;写了那么久的react native才发现这个，感觉有点羞愧，因为当时刚学
    
    </summary>
    
      <category term="react" scheme="http://zuesblog.xyz/categories/react/"/>
    
    
      <category term="react-native" scheme="http://zuesblog.xyz/tags/react-native/"/>
    
  </entry>
  
</feed>
