<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zues blog</title>
  <subtitle>浅呼吸，深思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zuesblog.xyz/"/>
  <updated>2017-08-04T05:40:02.580Z</updated>
  <id>http://zuesblog.xyz/</id>
  
  <author>
    <name>漏雨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>产品经理之路-PRD撰写-TD传媒教育</title>
    <link href="http://zuesblog.xyz/2017/08/04/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF-PRD%E6%92%B0%E5%86%99-TD%E4%BC%A0%E5%AA%92%E6%95%99%E8%82%B2/"/>
    <id>http://zuesblog.xyz/2017/08/04/产品经理之路-PRD撰写-TD传媒教育/</id>
    <published>2017-08-04T05:40:02.000Z</published>
    <updated>2017-08-04T05:40:02.580Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IOS开发_机电E家人</title>
    <link href="http://zuesblog.xyz/2017/08/01/IOS%E5%BC%80%E5%8F%91%E2%80%94-%E6%9C%BA%E7%94%B5E%E5%AE%B6%E4%BA%BA/"/>
    <id>http://zuesblog.xyz/2017/08/01/IOS开发—-机电E家人/</id>
    <published>2017-08-01T13:58:12.000Z</published>
    <updated>2017-08-01T14:06:48.718Z</updated>
    
    <content type="html">&lt;h2 id=&quot;应用截图&quot;&gt;&lt;a href=&quot;#应用截图&quot; class=&quot;headerlink&quot; title=&quot;应用截图&quot;&gt;&lt;/a&gt;应用截图&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址&quot;&gt;&lt;/a&gt;下载地址&lt;/h2&gt;&lt;p&gt;&lt;strong&gt; &lt;a href=&quot;https://fir.im/69an&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;机电E家人下载地址&lt;/a&gt; &lt;/strong&gt; ，测试账号：3114001414，密码：123456。&lt;/p&gt;
&lt;p&gt;我将apk放到fir.im上了，这样很方便更新并且无需提交很多资料到应用商店审核。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;应用截图&quot;&gt;&lt;a href=&quot;#应用截图&quot; class=&quot;headerlink&quot; title=&quot;应用截图&quot;&gt;&lt;/a&gt;应用截图&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址
    
    </summary>
    
      <category term="react" scheme="http://zuesblog.xyz/categories/react/"/>
    
    
      <category term="ios" scheme="http://zuesblog.xyz/tags/ios/"/>
    
      <category term="react-native" scheme="http://zuesblog.xyz/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>鲈鱼的奇思妙想日记</title>
    <link href="http://zuesblog.xyz/2017/07/31/%E9%B2%88%E9%B1%BC%E7%9A%84%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%E6%97%A5%E8%AE%B0/"/>
    <id>http://zuesblog.xyz/2017/07/31/鲈鱼的奇思妙想日记/</id>
    <published>2017-07-31T08:03:49.000Z</published>
    <updated>2017-07-31T13:26:29.613Z</updated>
    
    <content type="html">&lt;h2 id=&quot;做梦&quot;&gt;&lt;a href=&quot;#做梦&quot; class=&quot;headerlink&quot; title=&quot;做梦&quot;&gt;&lt;/a&gt;做梦&lt;/h2&gt;&lt;p&gt;在睡觉的时候，明明梦里过去一天了，但是醒来发现就只有几个小时。&lt;/p&gt;
&lt;p&gt;就像今天中午，我挑了一个12分钟的闹钟，这是我长期积累下来的最佳午休时长（这个时间因人而异），睡得不会很久醒来也不会过分头晕，并且醒来之后效率很高，当然这里我指的是在最佳环境中，如果是直接趴在桌子上，那我或许整个下午都浑浑噩噩，我是直接躺在床上睡的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;why-time&quot;&gt;&lt;a href=&quot;#why-time&quot; class=&quot;headerlink&quot; title=&quot;why time&quot;&gt;&lt;/a&gt;why time&lt;/h2&gt;&lt;p&gt;在上面那段话中，有两个问题我觉得非常有趣：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1、为什么梦中的时间会那么快？&lt;/li&gt;
&lt;li&gt;2、为什么我趴在桌子上睡觉整个下午都会浑浑噩噩？&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img src=&quot;http://i5.qhmsg.com/t019348ccdf3644fc08.jpg&quot; alt=&quot;dream picture1&quot;&gt;&lt;/h2&gt;&lt;h2 id=&quot;为什么梦中的时间过得那么快？&quot;&gt;&lt;a href=&quot;#为什么梦中的时间过得那么快？&quot; class=&quot;headerlink&quot; title=&quot;为什么梦中的时间过得那么快？&quot;&gt;&lt;/a&gt;为什么梦中的时间过得那么快？&lt;/h2&gt;&lt;p&gt;难道是我产生错觉？我先记录下来，回头google一下寻找答案。&lt;/p&gt;
&lt;h3 id=&quot;假设&quot;&gt;&lt;a href=&quot;#假设&quot; class=&quot;headerlink&quot; title=&quot;假设&quot;&gt;&lt;/a&gt;假设&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;睡梦中我的思维是更加活跃的，大脑的运转速度比平时更快。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;奇思妙想&quot;&gt;&lt;a href=&quot;#奇思妙想&quot; class=&quot;headerlink&quot; title=&quot;奇思妙想&quot;&gt;&lt;/a&gt;奇思妙想&lt;/h3&gt;&lt;p&gt;若上面的假设成立的话，以后说不定能出一些睡梦记录设备，在梦中思考并解决问题，不但能起到休息的作用，甚至由于大脑在高速运转中，那么说不定解决问题的效率能高出平时的几倍，整个社会的进步就可能形成质的飞跃。&lt;/p&gt;
&lt;h3 id=&quot;若能成立，目前瓶颈&quot;&gt;&lt;a href=&quot;#若能成立，目前瓶颈&quot; class=&quot;headerlink&quot; title=&quot;若能成立，目前瓶颈&quot;&gt;&lt;/a&gt;若能成立，目前瓶颈&lt;/h3&gt;&lt;p&gt;假设能成立的话，那么目前的困难就是如何像《盗梦空间》那样能够控制梦境？&lt;/p&gt;
&lt;p&gt;然后是睡梦协作，甚至是更多娱乐方向的商业潜能！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;为什么我趴在桌子上睡觉整个下午都会浑浑噩噩？&quot;&gt;&lt;a href=&quot;#为什么我趴在桌子上睡觉整个下午都会浑浑噩噩？&quot; class=&quot;headerlink&quot; title=&quot;为什么我趴在桌子上睡觉整个下午都会浑浑噩噩？&quot;&gt;&lt;/a&gt;为什么我趴在桌子上睡觉整个下午都会浑浑噩噩？&lt;/h2&gt;&lt;p&gt;或许是我个人体质问题？这个我也留着后面解决&lt;/p&gt;
&lt;h3 id=&quot;假设-1&quot;&gt;&lt;a href=&quot;#假设-1&quot; class=&quot;headerlink&quot; title=&quot;假设&quot;&gt;&lt;/a&gt;假设&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;体内的血液循环不流畅，输氧不足导致大脑缺氧产生短暂性头晕。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;奇思妙想-1&quot;&gt;&lt;a href=&quot;#奇思妙想-1&quot; class=&quot;headerlink&quot; title=&quot;奇思妙想&quot;&gt;&lt;/a&gt;奇思妙想&lt;/h3&gt;&lt;p&gt;若是假设能成立的话，按照《刻意练习》的理论，长时间内经常的趴在桌子上睡觉的人，类似疯狂上班族或者是勤奋的高考生是不是在趴在桌子上睡觉能适应头晕，不舒服现象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为刻意练习可以锻炼大脑，和体型保持者长时间不断挑战自己的体力极限，最后练成完美的肌肉线条类似，大脑在被不断挑战的同时，会由于躯体提前迈出“舒适区”，大脑为了保持和躯体的平衡，也会做出改变来调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我猜测调整的方向可能有两个：&lt;strong&gt;1、增加大脑毛细血管的数量；2、降低大脑思考的速率。&lt;/strong&gt;这样一来的话，最好的当然希望是第一种结果了，因为那样的话，相当于那一类人可以通过更加艰难的环境下都能保持非常良好的呼吸，维持能量供应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.aqioo.com/article/2013_11/2013112110482005.jpg&quot; alt=&quot;dream picture2&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;做梦&quot;&gt;&lt;a href=&quot;#做梦&quot; class=&quot;headerlink&quot; title=&quot;做梦&quot;&gt;&lt;/a&gt;做梦&lt;/h2&gt;&lt;p&gt;在睡觉的时候，明明梦里过去一天了，但是醒来发现就只有几个小时。&lt;/p&gt;
&lt;p&gt;就像今天中午，我挑了一个12分钟的闹钟，这是我长期积累下来的最
    
    </summary>
    
      <category term="日记" scheme="http://zuesblog.xyz/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="http://zuesblog.xyz/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>鲈鱼的奇思妙想日记-小程序运营技巧总结</title>
    <link href="http://zuesblog.xyz/2017/06/05/%E9%B2%88%E9%B1%BC%E7%9A%84%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%E6%97%A5%E8%AE%B0-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%90%A5%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://zuesblog.xyz/2017/06/05/鲈鱼的奇思妙想日记-小程序运营技巧总结/</id>
    <published>2017-06-05T12:39:48.000Z</published>
    <updated>2017-08-05T13:18:54.529Z</updated>
    
    <content type="html">&lt;h2 id=&quot;鲈鱼的小程序技巧总结&quot;&gt;&lt;a href=&quot;#鲈鱼的小程序技巧总结&quot; class=&quot;headerlink&quot; title=&quot;鲈鱼的小程序技巧总结&quot;&gt;&lt;/a&gt;鲈鱼的小程序技巧总结&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;互联网发展轨迹&lt;/strong&gt;：工具（百度/导航网站）-&amp;gt;功能性产品（社交/游戏）&lt;br&gt;&lt;strong&gt;案例&lt;/strong&gt;：群名片，围绕行业人群，提供高效率/协作办公的工具&lt;br&gt;&lt;strong&gt;技巧&lt;/strong&gt;：由于容易被模仿，需要围绕用户需求小步快跑迭代出高粘性的附属功能/内容，提高壁垒&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;单独APP&lt;/strong&gt;：分拆功能满足用户需求&lt;br&gt;&lt;strong&gt;案例&lt;/strong&gt;：流畅的交互衔接，超简约的用户体验，仅需3步完成预服务阶段&lt;br&gt;&lt;strong&gt;流程&lt;/strong&gt;：福利引流→验证/注册→进入小程序，同比H5少了6步，提高了30%*6的转化率&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何利用小程序新功能？&quot;&gt;&lt;a href=&quot;#如何利用小程序新功能？&quot; class=&quot;headerlink&quot; title=&quot;如何利用小程序新功能？&quot;&gt;&lt;/a&gt;如何利用小程序新功能？&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;一、基于产品特性深挖用户喜好：排名-荣誉-占便宜&quot;&gt;&lt;a href=&quot;#一、基于产品特性深挖用户喜好：排名-荣誉-占便宜&quot; class=&quot;headerlink&quot; title=&quot;一、基于产品特性深挖用户喜好：排名/荣誉/占便宜&quot;&gt;&lt;/a&gt;一、基于产品特性深挖用户喜好：排名/荣誉/占便宜&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;新功能&lt;/strong&gt;：支持识别记录每个群的唯一ID&lt;br&gt;&lt;strong&gt;案例&lt;/strong&gt;：王者荣耀结合用户数据，微信群Pk排名技巧：可以结合产品的用户数据在用户社群做引爆（类似支付宝十年账单/我和微信的故事）&lt;br&gt;&lt;strong&gt;预测&lt;/strong&gt;：围绕社群需求的工具可能引起又一波爆发，例如群投票选举/群三观匹配/群匿名/群等级/群打卡/群分类搜索…&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;二、新展示形式在微信公众号-朋友圈的高转化红利&quot;&gt;&lt;a href=&quot;#二、新展示形式在微信公众号-朋友圈的高转化红利&quot; class=&quot;headerlink&quot; title=&quot;二、新展示形式在微信公众号/朋友圈的高转化红利&quot;&gt;&lt;/a&gt;二、新展示形式在微信公众号/朋友圈的高转化红利&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;新功能&lt;/strong&gt;：可在公众号文中展示，复用用户地址信息&lt;br&gt;&lt;strong&gt;案例&lt;/strong&gt;：玩物志发起“三行丧诗”活动，将小程序入口暴露在推文，用户看完想进入活动页面可以直接在推文进入小程序，转化率比点击原文、长按二维码高出几倍&lt;br&gt;&lt;strong&gt;技巧&lt;/strong&gt;：通过小程序，浏览商品体验如原生，同时商城自动保存到用户小程序列表，因此如果人脉广的话，可以圈到一大批用户。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;三、更强的运营工具支持：模板消息-客服消息-二维码&quot;&gt;&lt;a href=&quot;#三、更强的运营工具支持：模板消息-客服消息-二维码&quot; class=&quot;headerlink&quot; title=&quot;三、更强的运营工具支持：模板消息/客服消息/二维码&quot;&gt;&lt;/a&gt;三、更强的运营工具支持：模板消息/客服消息/二维码&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;新功能&lt;/strong&gt;：模板消息/客服消息/二维码&lt;br&gt;&lt;strong&gt;案例&lt;/strong&gt;：姨妈日历，通过模版消息提醒设置时间；群应用互动小程序，作者离开小程序收到对话消息&lt;br&gt;&lt;strong&gt;技巧&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过模版消息／客服消息，运营者可以主动接触用户，更接近一个微信好友的身份，假如提醒时间恰当，可以收获一大批忠实用户。&lt;/li&gt;
&lt;li&gt;另外小程序的传播途径，除了推文入口，小程序搜索框，还有二维码和添加分享，可快速实现病毒营销。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;四、小程序监管机制暂不完善的漏洞&quot;&gt;&lt;a href=&quot;#四、小程序监管机制暂不完善的漏洞&quot; class=&quot;headerlink&quot; title=&quot;四、小程序监管机制暂不完善的漏洞&quot;&gt;&lt;/a&gt;四、小程序监管机制暂不完善的漏洞&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;新功能&lt;/strong&gt;：无&lt;br&gt;&lt;strong&gt;案例&lt;/strong&gt;：某直播小程序，诱导用户转发小程序获点击赚佣金，引流用户到公众号兑换体现佣金&lt;br&gt;&lt;strong&gt;技巧&lt;/strong&gt;：小程序属于新物种，用户并未开始抵触广告意识，因此可通过小测试或小游戏诱导分享，通过有趣或有用的小程序增长用户&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;五、开放更多的入口，附近-菜单栏-蓝牙-朋友圈-广点通-应用宝-QQ&quot;&gt;&lt;a href=&quot;#五、开放更多的入口，附近-菜单栏-蓝牙-朋友圈-广点通-应用宝-QQ&quot; class=&quot;headerlink&quot; title=&quot;五、开放更多的入口，附近/菜单栏/蓝牙/朋友圈/广点通/应用宝/QQ&quot;&gt;&lt;/a&gt;五、开放更多的入口，附近/菜单栏/蓝牙/朋友圈/广点通/应用宝/QQ&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;新功能&lt;/strong&gt;：更多入口&lt;br&gt;&lt;strong&gt;案例&lt;/strong&gt;：线下门店做二维码入口引流，可带来可观流量；&lt;br&gt;&lt;strong&gt;技巧&lt;/strong&gt;：类似以前派传单，现在通过一张二维码可以更快将自己产品注入用户微信中；发展物联网智能控制小程序；有足够资金可投放入口到广点通、应用宝和qq多渠道引流&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;特别鸣谢有礼貌的兜兜&quot;&gt;&lt;a href=&quot;#特别鸣谢有礼貌的兜兜&quot; class=&quot;headerlink&quot; title=&quot;特别鸣谢有礼貌的兜兜&quot;&gt;&lt;/a&gt;特别鸣谢有礼貌的兜兜&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;amp;quality=100&amp;amp;size=b4000_4000&amp;amp;sec=1495432626&amp;amp;di=973c93b1d7b2db6c0883f096f5c3e837&amp;amp;src=http://d.hiphotos.baidu.com/zhidao/pic/item/9c16fdfaaf51f3de8751d74797eef01f3a297935.jpg&quot; alt=&quot;兜兜&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;鲈鱼的小程序技巧总结&quot;&gt;&lt;a href=&quot;#鲈鱼的小程序技巧总结&quot; class=&quot;headerlink&quot; title=&quot;鲈鱼的小程序技巧总结&quot;&gt;&lt;/a&gt;鲈鱼的小程序技巧总结&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;互联网发展轨迹&lt;/strong&gt;：工具（百度/导航
    
    </summary>
    
      <category term="日记" scheme="http://zuesblog.xyz/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="http://zuesblog.xyz/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>鲈鱼的奇思妙想日记_我心中的教育</title>
    <link href="http://zuesblog.xyz/2017/05/03/%E9%B2%88%E9%B1%BC%E7%9A%84%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%E6%97%A5%E8%AE%B0-%E6%88%91%E5%BF%83%E4%B8%AD%E7%9A%84%E6%95%99%E8%82%B2/"/>
    <id>http://zuesblog.xyz/2017/05/03/鲈鱼的奇思妙想日记-我心中的教育/</id>
    <published>2017-05-03T13:38:07.000Z</published>
    <updated>2017-08-03T14:13:27.969Z</updated>
    
    <content type="html">&lt;h2 id=&quot;看电影&quot;&gt;&lt;a href=&quot;#看电影&quot; class=&quot;headerlink&quot; title=&quot;看电影&quot;&gt;&lt;/a&gt;看电影&lt;/h2&gt;&lt;p&gt;今天看了由&lt;code&gt;阿米尔汗&lt;/code&gt;自导的一部电影——&lt;strong&gt;《Like Stars on Earth》&lt;/strong&gt;，故事发生在印度两个似同非同学校，详情我就不剧透了，看过的人就会知道里面描述着巨大的教育意义。&lt;br&gt;&lt;img src=&quot;https://img3.doubanio.com/view/photo/photo/public/p2197898056.webp&quot; alt=&quot;Like Stars on Earth&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;略剧透的故事简介&quot;&gt;&lt;a href=&quot;#略剧透的故事简介&quot; class=&quot;headerlink&quot; title=&quot;略剧透的故事简介&quot;&gt;&lt;/a&gt;略剧透的故事简介&lt;/h2&gt;&lt;p&gt;童年的&lt;code&gt;伊夏&lt;/code&gt;在生活中对各种事物都充满好奇的想象力，一切都和常人无异常的的他唯一难以掌握的确是上学的知识，不管怎样他都不能理解课堂上老师讲的大多数公式、单词和文章。故事中与之形成鲜明对比的是他哥哥勤奋的读书插曲，尽管描述的寥寥无几，但是依然备受影响力。&lt;/p&gt;
&lt;p&gt;当然故事中不止这一处的对比，而最鲜明的只能是两个，至少我认为是两个地方，除了上面提到的他和哥哥之间的对比，还有普通老师和尼克的对比。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;思考&quot;&gt;&lt;a href=&quot;#思考&quot; class=&quot;headerlink&quot; title=&quot;思考&quot;&gt;&lt;/a&gt;思考&lt;/h2&gt;&lt;p&gt;好比小学生写作文，有些时候真觉得作文命题人有点傻逼，让小学生写作文的要求竟然需要有生活感悟，小学生拿来这么多生活经历啊，智力水平和情绪触觉都还在不断的形成，就这样被强制的要求下，开始写“有深度”的作文，于是就出现了很多&lt;code&gt;爸爸/妈妈/亲人在作文死掉的悲剧引发的感想&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;拿我自己来说，或许是我自身的原因，反正我童年最讨厌写作，一味的模仿别人的文章但却不知道别人文章哪里好，为什么好。老师竟然还倡导我们抄好词好句，如果这样抄下来有用的话，那为什么还会出现很大一批朴实、语言浅显易懂的作家。&lt;/p&gt;
&lt;p&gt;我也知道不能埋怨谁，但孩童年纪确实需要一位非常好的导师。&lt;strong&gt;有一句话是这么说的：目光长远的人把目标当成手段，而目光短浅的人把手段当成目标。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;教师是一门职业？&quot;&gt;&lt;a href=&quot;#教师是一门职业？&quot; class=&quot;headerlink&quot; title=&quot;教师是一门职业？&quot;&gt;&lt;/a&gt;教师是一门职业？&lt;/h2&gt;&lt;p&gt;辽阔的社会下，当然不缺乏好老师，但更多的是把教师当成职业的老师，我不认为老师应该把教师当成是一门职业，为指标而活，被工资驱动着做起培育一大堆知识大众者的责任，甚至为了完成上头的指标把整个教育流程完善为最优解的更可怕，这样的教师无疑把学生当成自己的产品，尽管是不断优化教授的手段，但最后还是培育出一大批缺乏创新，只能按图索骥的“机器人”，这个过程老师就像硬件程序员，嵌入一份优雅的代码到硬件之后，通过反复的测试淘汰掉一生产下来就是质量比较差的硬件，过滤掉之后剩余性能优质的硬件，不断重复解决淘汰学生问题。&lt;/p&gt;
&lt;p&gt;我不针对程序员，程序员这么干是对的，因为我也是程序员，我想表达的教师不应该是被当成一门职业，而应该是父母的角色，用发展的眼光来培育小孩，按照兴趣做出不同创意的作品来判断期末成绩，同时成绩不应该非常差，也不能太优秀，多问问孩子为什么作品要这么做，而不是建议他怎么做，或许这样的老师能从孩子身上学会更多东西！&lt;/p&gt;
&lt;p&gt;当然要成为差异化对待孩纸的教师会累，毕竟每一个小孩都是独特的存在，而且老师也需要养活自己，为指标而活不是错，我只是想说明，如果想当教师那就多为孩子着想，我也只是空口说梦话，我没有调查实践得出过结论是否这样的教育方法会好一点，不过我还是要解释一下我的想法，是看了电影之后的感悟&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;结合电影故事&quot;&gt;&lt;a href=&quot;#结合电影故事&quot; class=&quot;headerlink&quot; title=&quot;结合电影故事&quot;&gt;&lt;/a&gt;结合电影故事&lt;/h2&gt;&lt;p&gt;故事中伊夏的老师观察到他的不寻常情况后，通过作业调查和家庭访谈，经过仔细分析之后将自己的想法告诉给伊夏父母，从而征得单独辅导伊夏的权利，倘若这件事情发生在中国，我觉得没有哪位家长会反对，因为孩子被收到关注。我更倡导这样老师以学生为驱动的教育。&lt;/p&gt;
&lt;p&gt;世间万物皆是矛盾体，普通教师也一样，口口声声说我们读好书就可以成就不凡的人生，但却将我们大部分学生教育成按部就班的社会中级阶层。而当下为什么企业招聘会如此注重创新力，因为这方面的人才供不应求，导师中国的劳动力非常廉价，可替代性高。&lt;/p&gt;
&lt;p&gt;我认为，学习好的学生可以鼓励他们用心的学，但不能过分好学生主意，认为坏学生就不是社会栋梁的苗子，如果可以在布置作业的时候按照期末作业对社会价值和影响力，那该有多好，每个人都有可能利用自己特长成为优等生。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;我心中的教育流程&quot;&gt;&lt;a href=&quot;#我心中的教育流程&quot; class=&quot;headerlink&quot; title=&quot;我心中的教育流程&quot;&gt;&lt;/a&gt;我心中的教育流程&lt;/h2&gt;&lt;p&gt;我认为学生和用户一样，一开始都是不知道自己喜欢什么，而孩童时期的大脑接纳能力、成长力和记忆力也是最旺盛的，我认为这时候的老师应该都要学会和数据挖掘师一样细腻的观察力，懂得如何在日常不同实践作业中挖掘学生优势。&lt;br&gt;&lt;img src=&quot;https://thumbnail0.baidupcs.com/thumbnail/69e8a5da0c291f717a05d6aa508656ee?fid=3375241367-250528-809718320989208&amp;amp;time=1501768800&amp;amp;rt=pr&amp;amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-Irh6WYZNYhnASz4krmmeD1346EA%3d&amp;amp;expires=8h&amp;amp;chkbd=0&amp;amp;chkv=0&amp;amp;dp-logid=4984693297551179141&amp;amp;dp-callid=0&amp;amp;size=c1280_u1024&amp;amp;quality=90&amp;amp;vuk=3375241367&amp;amp;ft=image&quot; alt=&quot;children power&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;看电影&quot;&gt;&lt;a href=&quot;#看电影&quot; class=&quot;headerlink&quot; title=&quot;看电影&quot;&gt;&lt;/a&gt;看电影&lt;/h2&gt;&lt;p&gt;今天看了由&lt;code&gt;阿米尔汗&lt;/code&gt;自导的一部电影——&lt;strong&gt;《Like Stars on Earth》&lt;/stro
    
    </summary>
    
      <category term="日记" scheme="http://zuesblog.xyz/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="http://zuesblog.xyz/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之路-PRD撰写-流程设计</title>
    <link href="http://zuesblog.xyz/2017/05/02/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF-PRD%E6%92%B0%E5%86%99-%E6%B5%81%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    <id>http://zuesblog.xyz/2017/05/02/产品经理之路-PRD撰写-流程设计/</id>
    <published>2017-05-02T14:15:45.000Z</published>
    <updated>2017-08-04T00:53:55.629Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于我还是学生，这些都是自己结合项目经历和参考互联网一些知名的PM文章感悟而成，如果有错误的地方欢迎随时邮箱骚扰我，保证一定回复！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%B5%81%E7%A8%8B%E5%9B%BE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;流程图&lt;/a&gt;，标识算法、工作流或者流程的一种框图表示，它以不同类型的框代表不同种类的步骤，每两个步骤之间则以箭头连接。这种表示方法便于说明解决已知问题的方法。&lt;/p&gt;
&lt;p&gt;很喜欢wiki上的这个定义，超级简练。这句话阐述了几个要点，那就是流程图具备一定的规则，同时每一个步骤之间都有联系不可能单独孤立，同时做这个流程图的时候已经知道了问题，一个穷游学生在陌生城市（起始点），知道景区位置（目标）但是不知道怎么过去，这时候导航路线就好比流程图的一个分支了，为什么这么说，因为流程图的目标经常都是矛盾的，常表现为是否对立面。因此目标是不定项的，也就是如果学生发现过去景区的路费太贵，就可能突然选择放弃。&lt;/p&gt;
&lt;p&gt;看过知乎上不少的定义，整理之后我的理解是：流程图只能针对用户做一件事而设计，不能统筹所有事情，因此流程我认为是为了应用核心功能的使用流程而生的，因为在产品开发中，马云曾经说过一句话，少就是多，也就是能把每一次要迭代的功能专注做好其实就非常不错了，做太多可能由于个人经验不足，反而容易兼顾不周，做得一团糟。因此如果能考虑到一个核心功能的使用流程所有问题，那么应用逻辑设计就会更人性化，也就是常说的智能。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;流程图能为谁服务：&quot;&gt;&lt;a href=&quot;#流程图能为谁服务：&quot; class=&quot;headerlink&quot; title=&quot;流程图能为谁服务：&quot;&gt;&lt;/a&gt;流程图能为谁服务：&lt;/h2&gt;&lt;h3 id=&quot;流程图分类&quot;&gt;&lt;a href=&quot;#流程图分类&quot; class=&quot;headerlink&quot; title=&quot;流程图分类&quot;&gt;&lt;/a&gt;流程图分类&lt;/h3&gt;&lt;p&gt;不同的流程图为不同的对象服务，而流程图的分类有三种，引用&lt;a href=&quot;http://www.woshipm.com/pd/441557.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;人人中关于三种流程图的概念&lt;/a&gt;分别是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;业务流程图（Transaction Flow）：一般设计多个主体，一般会用泳道图的形式去表示业务在多方协作下是如何运行的，设计产品最初先绘制业务流程图&lt;/li&gt;
&lt;li&gt;任务流程图（Mission Flow）：反映出用户完成某个具体任务时的操作流程。任务流程图可以是业务流程图作为表现方式之一衍生出来的分支，因为下文的对象比较多层次，因此这里列了出来。&lt;/li&gt;
&lt;li&gt;页面流程图（Page Flow）：包含页面、行动点、连接线，是产品从抽象到具象的关键点&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;服务角色&quot;&gt;&lt;a href=&quot;#服务角色&quot; class=&quot;headerlink&quot; title=&quot;服务角色&quot;&gt;&lt;/a&gt;服务角色&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1、设计师，页面流程图能提供设计师在满足流程设计中添加自己独特的交互和美观&lt;/li&gt;
&lt;li&gt;2、开发者，任务流程图能更好梳理开发中的业务逻辑细节设计&lt;/li&gt;
&lt;li&gt;3、上司，业务流程图能让上司清晰知道产品不同部门在协作某件任务时的业务流程&lt;/li&gt;
&lt;li&gt;4、自己，任务流程图能在产品上线之后，验证用户的真实操作是否按自己的逻辑来，能帮助自己更全面了解用户&lt;/li&gt;
&lt;li&gt;5、新员工，快速了解业务如何运作的视图，明白业务的最终目标是什么，中有哪些角色在参与以及他们的职责，以及彼此之间的联接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何做流程图&quot;&gt;&lt;a href=&quot;#如何做流程图&quot; class=&quot;headerlink&quot; title=&quot;如何做流程图&quot;&gt;&lt;/a&gt;如何做流程图&lt;/h2&gt;&lt;p&gt;首先最重要的一点就是要遵守规则，虽然时代倡导要具备创新意识，但有时候统一规则还是非常有好处的，那就是方便交流，不然辛苦做好的流程图发现别人根本看不懂，那就真的是对牛弹琴了！由于人人都是PM中的流程规则图太美，就盗了过来，希望能不追究！&lt;br&gt;&lt;img src=&quot;http://image.woshipm.com/wp-files/2016/11/l9c0hJu6wmNWtQl4oR6T.png&quot; alt=&quot;Flow此图来源在人人都是产品经理&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;业务流程图&quot;&gt;&lt;a href=&quot;#业务流程图&quot; class=&quot;headerlink&quot; title=&quot;业务流程图&quot;&gt;&lt;/a&gt;业务流程图&lt;/h3&gt;&lt;p&gt;业务流程图一般会使用泳道图表示，泳道图是一个二维的表格，因为和游泳池的比赛道类似，因此被称为泳道图（净说些废话充字数），在泳道图的X轴为涉及到的主题，相当于游泳比赛参赛者，而Y轴则是一个业务中每一个连续的环节。&lt;/p&gt;
&lt;p&gt;我平时在项目中也没有用过这个流程图，这里因为是学习过程所以肯定要先基于理论之后做一个图，加深学习印象。&lt;br&gt;&lt;img src=&quot;https://thumbnail0.baidupcs.com/thumbnail/4df6a8175757778f190e6acc6449d689?fid=3375241367-250528-475166661980917&amp;amp;time=1501761600&amp;amp;rt=pr&amp;amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-CgpOvB%2bB9KN2MDLwN0xKusvyETg%3d&amp;amp;expires=8h&amp;amp;chkbd=0&amp;amp;chkv=0&amp;amp;dp-logid=4983124670850609264&amp;amp;dp-callid=0&amp;amp;size=c1280_u1024&amp;amp;quality=90&amp;amp;vuk=3375241367&amp;amp;ft=image&quot; alt=&quot;狼人杀业务流程图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;任务流程图&quot;&gt;&lt;a href=&quot;#任务流程图&quot; class=&quot;headerlink&quot; title=&quot;任务流程图&quot;&gt;&lt;/a&gt;任务流程图&lt;/h3&gt;&lt;p&gt;任务流程图一般比较简单，因为是核心是为某一环的操作而模仿用户行为的图解，这里我直接用我博客的流程图举例子&lt;br&gt;&lt;img src=&quot;https://pcs.baidu.com/rest/2.0/pcs/thumbnail?method=generate&amp;amp;app_id=250528&amp;amp;path=%2F%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%E5%9B%BE.png&amp;amp;quality=90&amp;amp;size=c1280_u1024&quot; alt=&quot;zues blog flow&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;页面流程图&quot;&gt;&lt;a href=&quot;#页面流程图&quot; class=&quot;headerlink&quot; title=&quot;页面流程图&quot;&gt;&lt;/a&gt;页面流程图&lt;/h3&gt;&lt;p&gt;页面流程图我真的没做过，这是一个好机会，又能学新东西，理论已经在脑海中形成抽象的概念，手动模仿一个例子做出来的话能在脑海中形成更长久的记忆，希望到工作时不会忘记，哈哈！&lt;/p&gt;
&lt;p&gt;google的结果很大部分都是用Axure做的，基本都是低保真矩形框加箭头的线框图，看到一些复制的页面流程图，整体看起来非常帅，但其实线头非常多，如果想要做好我觉得需要提前脑海有一个整体的每部分图形，不然没拍好每一个页面的位置，恐怕箭头的指向都让其它看的人会晕，如果时那样觉得或许直接做原型会更好，不过做原型又要和设计师协作，我也不清楚怎么分情况讨论，没有经验也不敢随意参考别人的博客，还是自己以后亲手经历之后再说。&lt;br&gt;&lt;img src=&quot;https://s-media-cache-ak0.pinimg.com/736x/56/06/76/560676051a2970d8ae5c13f615962979--flowchart-service-design.jpg&quot; alt=&quot;page flow&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;持续更新&quot;&gt;&lt;a href=&quot;#持续更新&quot; class=&quot;headerlink&quot; title=&quot;持续更新&quot;&gt;&lt;/a&gt;持续更新&lt;/h2&gt;&lt;p&gt;mark一下，因为这里好多都只是个人理解，还有很多不懂的东西，以后就业之后会不断更新。谢谢各位来看我博客的小伙伴！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于我还是学生，这些都是自己结合项目经历和参考互联网一些知名的PM文章感悟而成，如果有错误的地方欢迎随时邮箱骚扰我，保证一定回复！&lt;/p&gt;

    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
      <category term="PRD" scheme="http://zuesblog.xyz/tags/PRD/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之之路-PRD撰写-产品结构图</title>
    <link href="http://zuesblog.xyz/2017/04/30/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E4%B9%8B%E8%B7%AF-PRD%E6%92%B0%E5%86%99-%E4%BA%A7%E5%93%81%E7%BB%93%E6%9E%84%E5%9B%BE/"/>
    <id>http://zuesblog.xyz/2017/04/30/产品经理之之路-PRD撰写-产品结构图/</id>
    <published>2017-04-30T07:17:07.000Z</published>
    <updated>2017-08-01T06:46:01.837Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在参考&lt;a href=&quot;http://www.woshipm.com/it/80078.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;产品需求文档的写作(二) – 梳理需求(产品结构图和用户流程图)&lt;/a&gt;这篇文章时，可能是我太笨，没看懂这里的信息结构中对频道的解释。&lt;/p&gt;
&lt;p&gt;我的理解是这样的，因为文章中说到产品结构图是在设计原型之前做的一种思路梳理方式，并不是给所有人看的，因为这一步或许和微信的设计一样，按照不同的维度来设计，并且参考用户习惯来排列哪些频道应该先展示。&lt;/p&gt;
&lt;p&gt;在微信的设计中，之前有一个很经典的问题是这样的，为什么微信不把朋友圈放在首页，基于这个问题的回答在PMCAFF和人人都是产品经理等社区的讨论都炸开了花，感谢我一位非常好的朋友，她的思维水平高我几个台阶。&lt;/p&gt;
&lt;p&gt;我整理总结了一下她的思考方式：手机流行时，大家最习以为常的社交恐怕就是手机电话和短信了，相信80年代的大学生都经历过和男/女朋友用手机打电话/发短信聊天，那是IM雏形。回想一下，那时候的IM只有通讯记录和通讯列表，这不刚好对应的微信的前两个tab，而社区功能在互联网盛行时出现，人们使用社区来讨论话题，对于那时候的手机用户，最核心的功能是电话/短信，其次按照马斯洛的需求理论，才会使用社区功能，而朋友圈则更像是一个社区。&lt;/p&gt;
&lt;p&gt;好了，通过上面的逻辑，在用户习惯上思考，就不难想到为什么把朋友圈放在第三个tab了。不过这是基于单独朋友圈的功能来思考，另一方面按照微信的定位来分析，我的想法是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;微信是基于点对点的IM应用，从核心功能上分析朋友圈就不会被放在首页&lt;/li&gt;
&lt;li&gt;第三个tab发现是一系列社交功能的集合，在IM的基础上，增强用户体验，如果说微信能让人们用来通讯，那么朋友圈能让人增加使用微信的频率&lt;/li&gt;
&lt;li&gt;部分特殊人群不喜欢看朋友圈、发朋友圈，而朋友圈的路径深的话可以很好的规避这类用户的散失。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;除此之外，在网上有很多不一样的想法，例如朋友圈带来导流”的效果，通过朋友圈来曝光“发现”中的其它功能。&lt;/p&gt;
&lt;p&gt;不过我还是先回到今天的主题，按照上面的思考，产品结构图给PM带来的是如何将最核心的功能放在首页，并且每一个模块的不同功能路径深浅要如何安排才能最大符合用户习惯，并且带来持续的用户转化，这就是产品结构图的功能了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;p&gt;那么如何来做产品结构图呢，我个人想法是因人而异，因业务而异，具体做法的话参考网上的一些资深回复，或许不合适我，但肯定比自己摸索能少走很多弯路：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1、确定产品所有的功能&lt;/li&gt;
&lt;li&gt;2、将多个功能组合为一个模块&lt;/li&gt;
&lt;li&gt;3、在组合中确定子模块或子功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实还是有点迷茫，不清楚怎么做，我用我的博客做一个test版本试一试，哈哈哈！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在参考&lt;a href=&quot;http://www.woshipm.com/it/80078.html&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
      <category term="PRD" scheme="http://zuesblog.xyz/tags/PRD/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之路—-Axure踩坑系列</title>
    <link href="http://zuesblog.xyz/2017/04/29/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF%E2%80%94-Axure%E8%B8%A9%E5%9D%91%E7%B3%BB%E5%88%97/"/>
    <id>http://zuesblog.xyz/2017/04/29/产品经理之路—-Axure踩坑系列/</id>
    <published>2017-04-29T13:28:52.000Z</published>
    <updated>2017-08-03T13:36:18.416Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Axure踩坑系列&quot;&gt;&lt;a href=&quot;#Axure踩坑系列&quot; class=&quot;headerlink&quot; title=&quot;Axure踩坑系列&quot;&gt;&lt;/a&gt;Axure踩坑系列&lt;/h2&gt;&lt;p&gt;1 、编辑条件的时候，一开始没看到&lt;code&gt;edit Condition&lt;/code&gt;弹出框的顶部，&lt;code&gt;Satify&lt;/code&gt;的下拉框，有一个&lt;code&gt;all&lt;/code&gt;和&lt;code&gt;any&lt;/code&gt;，表示全部满足或者满足其中一条就可以&lt;/p&gt;
&lt;p&gt;2、使用&lt;code&gt;fire&lt;/code&gt;功能可以触发其它事件，这个因为做的原型小组件中使用到这个比较少，容易被遗忘，希望这次记下来之后没有下一次犯错了，必须没有下次。&lt;/p&gt;
&lt;p&gt;3、在设计联盟的资讯页面原型中，一开始其实犯了一个错误，明明设计师都给了图片，一开始应该先放一个动态面板的，不然跳转到详情页的时候就不能左移切换面板状态了，后面重新加上去就好比突然改需求一样，感觉挺麻烦的&lt;/p&gt;
&lt;p&gt;4、哈哈哈，在做顶部&lt;code&gt;tab&lt;/code&gt;的时候，一开始不清楚如何拿到对应组件的Y坐标，然后乱猜，竟然才对了，在声明变量&lt;code&gt;LVAR1&lt;/code&gt;的时候赋值为对应的&lt;code&gt;target&lt;/code&gt;组件，然后拿Y坐标的时候直接用&lt;code&gt;LVAR1.y&lt;/code&gt;就ok了！哈哈，有时候不得不被自己的机智所陶醉。不过当然这样的逻辑是不灵活的，因为被限定死了，如果突然添加新的顶部&lt;code&gt;tab&lt;/code&gt;的话就会导致原来的代码无法复用&lt;/p&gt;
&lt;p&gt;5、做圆形头像图片的时候，一直没做成功，后来去知乎上搜索了一下答案，真的被自己笨到了，知乎上的回答是这样的，&lt;code&gt;在图片左上角有一个倒三角按钮，往右拖图片就会变圆&lt;/code&gt;，我试了一下，以为自己被骗了，这不是设置圆角的灵活按钮吗？然后那个回答点赞数挺高的，就试一下图形变换，把图片宽高设置为相等就可以显示为圆形了。&lt;/p&gt;
&lt;h2 id=&quot;发散思维不够强&quot;&gt;&lt;a href=&quot;#发散思维不够强&quot; class=&quot;headerlink&quot; title=&quot;发散思维不够强&quot;&gt;&lt;/a&gt;发散思维不够强&lt;/h2&gt;&lt;p&gt;这里我暴露了自己的一个缺点，以前在开发RN时做圆形头像设置一定的&lt;code&gt;corner Radirus&lt;/code&gt;之后就变成圆形了。这里我也尝试过，但是一开始的时候仅仅设置&lt;code&gt;corner Radirus&lt;/code&gt;确不是圆角时我放弃了下一步尝试，这是一个失败的决定，如果我当时能考虑到开发时图片已经被调整为正方形的话，我就能理所当然的把圆形图片做出来了，我的发散思维能力不够强，这是一个机会，如果弥补这个缺点，以后遇到不懂的东西说不定尝试的付出的时间成本会随着融会贯通的程度逐渐减少。在这里我自己标记一下&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;6、将一系列&lt;code&gt;Radio Button&lt;/code&gt;结合新城一个单选框的秘诀是：选中所有单选框，右键鼠标，点击&lt;code&gt;Assign Radio Group&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;7、在做轮播图的时候一开始一直想着在&lt;code&gt;panel state&lt;/code&gt;改变时，&lt;code&gt;onSelect&lt;/code&gt;轮播图下方对应的导航点，但是发现不能单独设置每一个&lt;code&gt;state&lt;/code&gt;的&lt;code&gt;panelStateChange&lt;/code&gt;，在图标上做的&lt;code&gt;Interactive style&lt;/code&gt;白用了，一直在这个状态想了好久，最后发现还是直接用一个&lt;code&gt;dynamic panel&lt;/code&gt;来做轮播图下方的点好了，不过做好一开始预览的时候还是出现发了问题，那就是点并没有随着轮播图移动，最后检查了一遍轮播图，发现是没有设置循环时间，因为我使用的是&lt;code&gt;next&lt;/code&gt;模式，设置时间为2000毫秒之后就可以循环播放了。&lt;/p&gt;
&lt;p&gt;8、在使用&lt;code&gt;Inline Frame&lt;/code&gt;时候，一直隐藏不了网页右边的滚动条，这就太影响美观了，最后在检查器中不断的试，发现只要把&lt;code&gt;Frame Scrollbars&lt;/code&gt;设置为&lt;code&gt;never show&lt;/code&gt;就可以了！&lt;/p&gt;
&lt;p&gt;9、制作获取验证码时，一直出现错误，一开始的时候设置&lt;code&gt;onLoadVariable&lt;/code&gt;是设置在最大的动态面板上的，这里我发现了&lt;code&gt;Axure&lt;/code&gt;的一个不好的地方，那就是假如这个时候在多个&lt;code&gt;state&lt;/code&gt;中单独设置某一个&lt;code&gt;state&lt;/code&gt;的事件，其它事件也会被复制该事件，因此我一直在预览的时候接收到事件冲突提示，因为我多个页面使用了同一个&lt;code&gt;onLoadVariable&lt;/code&gt;，最后我单独在对应的获取验证码矩形框设置它的&lt;code&gt;OnLoad&lt;/code&gt;事件之后，一切都可以正常run了。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;踩坑系列将会持续更新…&quot;&gt;&lt;a href=&quot;#踩坑系列将会持续更新…&quot; class=&quot;headerlink&quot; title=&quot;踩坑系列将会持续更新…&quot;&gt;&lt;/a&gt;踩坑系列将会持续更新…&lt;/h4&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Axure踩坑系列&quot;&gt;&lt;a href=&quot;#Axure踩坑系列&quot; class=&quot;headerlink&quot; title=&quot;Axure踩坑系列&quot;&gt;&lt;/a&gt;Axure踩坑系列&lt;/h2&gt;&lt;p&gt;1 、编辑条件的时候，一开始没看到&lt;code&gt;edit Condition&lt;/cod
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IOS开发_记ios登录功能</title>
    <link href="http://zuesblog.xyz/2017/04/26/IOS%E5%BC%80%E5%8F%91_ios%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
    <id>http://zuesblog.xyz/2017/04/26/IOS开发_ios登录功能/</id>
    <published>2017-04-26T05:30:56.000Z</published>
    <updated>2017-07-28T05:26:27.193Z</updated>
    
    <content type="html">&lt;p&gt;入门ios一个星期，开始写ios，对于Xcode有点懵逼，我要写一篇博客来理清楚整个流程的顺序，为后面的编写加印象&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;封装好网路请求库，创建model、controller、Operation事件处理三者的父类，然后开始干活&lt;/p&gt;
&lt;h3 id=&quot;创建model&quot;&gt;&lt;a href=&quot;#创建model&quot; class=&quot;headerlink&quot; title=&quot;创建model&quot;&gt;&lt;/a&gt;创建model&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;继承父类BaseModel，根据和服务器说好的协议，也就是根据返回的json来创建变量，通过传入有网络请求拿到的数据，用NSDictionary字典将其保存起来并且传入到infoFromDict函数，返回一个UserModel对象，完成整个model层的创建。&lt;/p&gt;
&lt;h4 id=&quot;UserModel-h&quot;&gt;&lt;a href=&quot;#UserModel-h&quot; class=&quot;headerlink&quot; title=&quot;UserModel.h&quot;&gt;&lt;/a&gt;UserModel.h&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DABaseModel.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface UserModel : DABaseModel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, strong) NSString *sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, strong) NSString *avatar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;UserModel-m&quot;&gt;&lt;a href=&quot;#UserModel-m&quot; class=&quot;headerlink&quot; title=&quot;UserModel.m&quot;&gt;&lt;/a&gt;UserModel.m&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;UserModel.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation UserModel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (UserModel *)infoFromDict:(NSDictionary *)dict&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UserModel *user = [[UserModel alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user.ID = [dict objectForKey:@&amp;quot;userId&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user.name = [dict objectForKey:@&amp;quot;username&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user.sex = [dict objectForKey:@&amp;quot;sex&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user.avatar = [dict objectForKey:@&amp;quot;avatar&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建Controller&quot;&gt;&lt;a href=&quot;#创建Controller&quot; class=&quot;headerlink&quot; title=&quot;创建Controller&quot;&gt;&lt;/a&gt;创建Controller&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Controller类与view类关联，处理的是对应的username，password的获取，登录按钮的操作，以后还包括将数据呈现在view上。&lt;/p&gt;
&lt;p&gt;其中，处理数据的类就交给了Operation代理类，在Operation类中将请求上传到服务器，并且将返回的数据拿到。&lt;/p&gt;
&lt;h4 id=&quot;LoginPage-h&quot;&gt;&lt;a href=&quot;#LoginPage-h&quot; class=&quot;headerlink&quot; title=&quot;LoginPage.h&quot;&gt;&lt;/a&gt;LoginPage.h&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DABasePage.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface LoginPage : DABasePage&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IBOutlet UITextField    *username;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IBOutlet UITextField    *password;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;LoginPage-m&quot;&gt;&lt;a href=&quot;#LoginPage-m&quot; class=&quot;headerlink&quot; title=&quot;LoginPage.m&quot;&gt;&lt;/a&gt;LoginPage.m&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;LoginPage.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DALogin.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;UserModel.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation LoginPage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)didReceiveMemoryWarning &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super didReceiveMemoryWarning];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//此行为和用户的行为关联，当用户按下确定按钮，触发这个方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (IBAction)doLoginEvent:(id)sender&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if([self checkValidate])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //构造请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *body = [NSString stringWithFormat:@&amp;quot;phone=%@&amp;amp;password=%@&amp;quot;,username.text,password.text];    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NSDictionary *opInfo = @&amp;#123;@&amp;quot;url&amp;quot;:LoginURL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             @&amp;quot;body&amp;quot;:body&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _operation = [[DALogin alloc] initWithDelegate:self opInfo:opInfo]; //初始化代理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_operation executeOp];	//执行代理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//请求成功执行下面的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)opSuccess:(UserModel *)data&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super opSuccess:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BASE_INFO_FUN(data.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BASE_INFO_FUN(data.sex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//检查数据有效性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)checkValidate&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (![username.text  isEqual: @&amp;quot;&amp;quot;]&amp;amp;&amp;amp;![password.text  isEqual: @&amp;quot;&amp;quot;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BASE_INFO_FUN(@&amp;quot;用户名或者密码为空&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建DALogin数据代理类&quot;&gt;&lt;a href=&quot;#创建DALogin数据代理类&quot; class=&quot;headerlink&quot; title=&quot;创建DALogin数据代理类&quot;&gt;&lt;/a&gt;创建DALogin数据代理类&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;在父类中请求数据，加载数据，解析数据，处理成功或者失败之后的操作，DALogin只需要进行重写解析成功之后的操作即可。&lt;/p&gt;
&lt;h4 id=&quot;DALogin-h&quot;&gt;&lt;a href=&quot;#DALogin-h&quot; class=&quot;headerlink&quot; title=&quot;DALogin.h&quot;&gt;&lt;/a&gt;DALogin.h&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DABaseOperation.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface DALogin : DABaseOperation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;DALogin-m&quot;&gt;&lt;a href=&quot;#DALogin-m&quot; class=&quot;headerlink&quot; title=&quot;DALogin.m&quot;&gt;&lt;/a&gt;DALogin.m&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DALogin.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;UserModel.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation DALogin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)parseSuccess:(NSDictionary *)dict jsonString:(NSString *)jsonString&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSDictionary *dictData = [dict objectForKey:NetData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UserModel *info = [UserModel infoFromDict:dictData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_delegate opSuccess:info]; //告诉代理登录成功&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码显示了，将请求拿到数据，传入到model类，通过model类转化为本地的json数据，可以填充到view上，这里用来告知用户登录成功，也就是这里的opSuccess函数&lt;/p&gt;
&lt;p&gt;通过opSuccess函数，我们可以把传进来的info，也就是服务器返回的数据展示到view上，通过alert等形式告诉用户登录成功了，也可以在这里执行页面跳转的操作。&lt;/p&gt;
&lt;h3 id=&quot;创建和展示View&quot;&gt;&lt;a href=&quot;#创建和展示View&quot; class=&quot;headerlink&quot; title=&quot;创建和展示View&quot;&gt;&lt;/a&gt;创建和展示View&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;新建一个view，也就是这里的LoginPage.xib，通过拖拽和配置图片的方式将需要的控件拼接进去&lt;/p&gt;
&lt;p&gt;然后将控件调整到合适的位置，我这里其实有点疑惑，因为这里是通过在界面使用某一种iphone设备来调试，也就是说，我觉得是绝对定位，主要是控件的长度宽度到时遇到适配就可能很蛋疼了。&lt;/p&gt;
&lt;p&gt;这里来介绍一下关于最左边的六个顶部按钮的作用&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;show the file inspector译为“显示文件检查器”，可以查看view文件名字、类型、相对位置、绝对路径、界面构建器文档、本地化&lt;/li&gt;
&lt;li&gt;show Quick help inspector译为“显示帮助检查器”，有声明和描述，反正是一大段英文&lt;/li&gt;
&lt;li&gt;show the indentity inspector译为“显示身份检查器”，可以定制一个类和模块，暂时还不知道怎么用&lt;/li&gt;
&lt;li&gt;show the attribute inspector译为“显示属性检查器”，可以显示对应选中控件的所有属性，例如Button有button type有Custom、system、Detail Disclosure、info Light、info Dark，还有颜色等等&lt;/li&gt;
&lt;li&gt;show the size inspector译为“显示尺寸检查器”，定制组件的大小和位置&lt;/li&gt;
&lt;li&gt;show the connection inspector译为“显示连接检查器”，可以将对应组件在这里与对应的代码相关联&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多具体的用法还不知道，这里只是为了加深印象，理清后面要写的思路。&lt;/p&gt;
&lt;p&gt;最后通过点击Placeholders还有view来完成对应的关联操作，关联也相当简单，只需要像连线一样，把控件连接起来就可以了。&lt;/p&gt;
&lt;h3 id=&quot;预编译头文件&quot;&gt;&lt;a href=&quot;#预编译头文件&quot; class=&quot;headerlink&quot; title=&quot;预编译头文件&quot;&gt;&lt;/a&gt;预编译头文件&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;为了更方便在全局使用一些需要经常要用到的类，可以在Xcode中创建一个pch的预编译头文件，然后在文件中添加的类就可以不需要导入，都可以使用了，超级方便。&lt;/p&gt;
&lt;h4 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h4&gt;&lt;p&gt;然后在项目的Build Settings中找到Apple LLVM 8.0 - Language&lt;br&gt;选中Prefix Header并且将pch文件路径写进去&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#ifndef name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//在此处导入要预编译的头文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;入门ios一个星期，开始写ios，对于Xcode有点懵逼，我要写一篇博客来理清楚整个流程的顺序，为后面的编写加印象&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="ios" scheme="http://zuesblog.xyz/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之路-PRD撰写-设计联盟项目</title>
    <link href="http://zuesblog.xyz/2017/04/24/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF-PRD%E6%92%B0%E5%86%99-%E8%AE%BE%E8%AE%A1%E8%81%94%E7%9B%9F%E9%A1%B9%E7%9B%AE/"/>
    <id>http://zuesblog.xyz/2017/04/24/产品经理之路-PRD撰写-设计联盟项目/</id>
    <published>2017-04-24T09:09:14.000Z</published>
    <updated>2017-08-03T14:13:57.286Z</updated>
    
    <content type="html">&lt;h2 id=&quot;时间线（保持更新到ios上线）&quot;&gt;&lt;a href=&quot;#时间线（保持更新到ios上线）&quot; class=&quot;headerlink&quot; title=&quot;时间线（保持更新到ios上线）&quot;&gt;&lt;/a&gt;时间线（保持更新到ios上线）&lt;/h2&gt;&lt;p&gt;这里的内容是后面增加上去的，为了节省上线时间，我将安卓端首先发布在阿里应用分发平台，上线过程中比较颠簸，审核中遇到很多突发事件，不过成功上线之后都幸运的成为了自己的经验。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://m.pp.cn/detail.html?appid=7627447&amp;amp;ch_src=pp_dev&amp;amp;ch=default&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计联盟安卓端下载地址&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;看了比较多的产品类书籍，包括《启示录》《人人都是产品经理》，都明确提出了需求文档的重要性，而作为团队负责人，更加应该对目标不明确而导致的后期变更需求，产生的成本负责，为了尽量避免这种事情发现，在写设计联盟之前已经开始和美工的汉子（这次的美工是大一的师弟，真可惜本以为可以和妹子合作）合作把高保真的原型做了出来，图片很不错。&lt;/p&gt;
&lt;p&gt;而我也继续将机会转化为锻炼不断完善自己的全面产品技能，反正尽量不会让用户思考就对了。我将从以下几点记录我这次的PRD撰写。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;信息结构设计&lt;/li&gt;
&lt;li&gt;流程设计&lt;/li&gt;
&lt;li&gt;功能设计&lt;/li&gt;
&lt;li&gt;交互与视觉设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;信息结构设计&quot;&gt;&lt;a href=&quot;#信息结构设计&quot; class=&quot;headerlink&quot; title=&quot;信息结构设计&quot;&gt;&lt;/a&gt;信息结构设计&lt;/h2&gt;&lt;p&gt;在知乎网友的建议下，为了更快的梳理信息架构，开发前我就直接采用表格形式进行描述好了。&lt;br&gt;&lt;img src=&quot;https://thumbnail0.baidupcs.com/thumbnail/d5dd60363198329ce3af0ddada56b57a?fid=3375241367-250528-555763392663296&amp;amp;time=1501765200&amp;amp;rt=pr&amp;amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-oiJVDfrZbZKXuKQximaLO0ta7CQ%3d&amp;amp;expires=8h&amp;amp;chkbd=0&amp;amp;chkv=0&amp;amp;dp-logid=4983945965219799693&amp;amp;dp-callid=0&amp;amp;size=c1280_u1024&amp;amp;quality=90&amp;amp;vuk=3375241367&amp;amp;ft=image&quot; alt=&quot;DesignAliance Information structor&quot;&gt;&lt;br&gt;在网上会有人说使用MindManage或是Xmind来制作信息架构图，我觉得这之间有一个误会，工具只是为人而生的，当然我不否认使用脑图工具看上去会更专业，也更清晰，但有时候可能追求专业的同时会增加了时间成本，工具是为方便快捷而生，只有最适合自己的才是最好的。&lt;/p&gt;
&lt;h2 id=&quot;产品原型&quot;&gt;&lt;a href=&quot;#产品原型&quot; class=&quot;headerlink&quot; title=&quot;产品原型&quot;&gt;&lt;/a&gt;产品原型&lt;/h2&gt;&lt;p&gt;最快并且直观了解PRD的方式估计就是看原型图了，这里我用Axure做了一个原型，在阿里买的服务器到期了，没办法，只能托管到Axure share空间了。&lt;br&gt;如需查看可以点击这里打开,&lt;a href=&quot;http://4hf2wg.axshare.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计联盟APP产品原型&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;时间线（保持更新到ios上线）&quot;&gt;&lt;a href=&quot;#时间线（保持更新到ios上线）&quot; class=&quot;headerlink&quot; title=&quot;时间线（保持更新到ios上线）&quot;&gt;&lt;/a&gt;时间线（保持更新到ios上线）&lt;/h2&gt;&lt;p&gt;这里的内容是后面增加上去的，为了节省
    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
      <category term="PRD" scheme="http://zuesblog.xyz/tags/PRD/"/>
    
  </entry>
  
  <entry>
    <title>IOS开发_Objective-C指针</title>
    <link href="http://zuesblog.xyz/2017/04/19/IOS%E5%BC%80%E5%8F%91_Objective-C%E6%8C%87%E9%92%88/"/>
    <id>http://zuesblog.xyz/2017/04/19/IOS开发_Objective-C指针/</id>
    <published>2017-04-19T09:10:38.000Z</published>
    <updated>2017-07-28T15:58:36.886Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Objective-C指针&quot;&gt;&lt;a href=&quot;#Objective-C指针&quot; class=&quot;headerlink&quot; title=&quot;Objective-C指针&quot;&gt;&lt;/a&gt;Objective-C指针&lt;/h2&gt;&lt;p&gt;在java中也有指针的说法，当然Objective-C中也有，指针的学习可以更好的分配内存。&lt;/p&gt;
&lt;h3 id=&quot;指针概念&quot;&gt;&lt;a href=&quot;#指针概念&quot; class=&quot;headerlink&quot; title=&quot;指针概念&quot;&gt;&lt;/a&gt;指针概念&lt;/h3&gt;&lt;p&gt;这个概念是比较难以理解的，首先要先明白什么是指针，给等会要解释的Objective-C的指针做辅垫，&lt;br&gt;&lt;strong&gt;指针：计算机的内存是由连续的存储单元组成的，每个存储单元都有惟一确定的编号，这个编号就是“地址”。如果程序中定义了一个变量，编译系统在编译程序时，会根据变量的类型给这个变量分配一定长度并且连续的存储单元。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;怎么来理解呢？举个例子，随便在java中声明一个变量int i = 5;那么在内存梯子上会对应开辟出一块空间（也就是编号）专门用来存在5这个数字，而i就被指向了这块内存空间。&lt;/p&gt;
&lt;h3 id=&quot;Objective-C的指针&quot;&gt;&lt;a href=&quot;#Objective-C的指针&quot; class=&quot;headerlink&quot; title=&quot;Objective-C的指针&quot;&gt;&lt;/a&gt;Objective-C的指针&lt;/h3&gt;&lt;p&gt;在OC中，任意创建一个变量的时候，通过&lt;code&gt;NSObject *object = [[NSObject alloc] init];&lt;/code&gt;形式创建了一个变量，他就像是准备去订酒店的房客，拥有预定房间的权利，但此时还未做好决定，这时候的变量被称为指针变量，是指用来存放&lt;code&gt;[[NSObject alloc] init]&lt;/code&gt;对象的地址。&lt;/p&gt;
&lt;p&gt;然后&lt;code&gt;object&lt;/code&gt;可以通过内存地址来访问存放的数据，也就是被赋值，这时候这个房客预定了房间，他可以通过预定好的房间号来查找到对应的房间，而这个过程被称为间接访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1370044-f7df9c4b1e38a74e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;C程序设计语言&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Objective-C指针&quot;&gt;&lt;a href=&quot;#Objective-C指针&quot; class=&quot;headerlink&quot; title=&quot;Objective-C指针&quot;&gt;&lt;/a&gt;Objective-C指针&lt;/h2&gt;&lt;p&gt;在java中也有指针的说法，当然Objective-
    
    </summary>
    
    
      <category term="ios" scheme="http://zuesblog.xyz/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>IOS开发_ios入门</title>
    <link href="http://zuesblog.xyz/2017/04/07/IOS%E5%BC%80%E5%8F%91_ios%E5%85%A5%E9%97%A8/"/>
    <id>http://zuesblog.xyz/2017/04/07/IOS开发_ios入门/</id>
    <published>2017-04-07T01:28:47.000Z</published>
    <updated>2017-07-28T05:26:24.131Z</updated>
    
    <content type="html">&lt;h2 id=&quot;IOS基础入门&quot;&gt;&lt;a href=&quot;#IOS基础入门&quot; class=&quot;headerlink&quot; title=&quot;IOS基础入门&quot;&gt;&lt;/a&gt;IOS基础入门&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;ios的开发使用Objective-C语言，和java一样，它页是一种面向对象的语言&quot;&gt;&lt;a href=&quot;#ios的开发使用Objective-C语言，和java一样，它页是一种面向对象的语言&quot; class=&quot;headerlink&quot; title=&quot;ios的开发使用Objective C语言，和java一样，它页是一种面向对象的语言&quot;&gt;&lt;/a&gt;ios的开发使用Objective C语言，和java一样，它页是一种面向对象的语言&lt;/h2&gt;&lt;h3 id=&quot;消息传递&quot;&gt;&lt;a href=&quot;#消息传递&quot; class=&quot;headerlink&quot; title=&quot;消息传递&quot;&gt;&lt;/a&gt;消息传递&lt;/h3&gt;&lt;p&gt;在java中我们把Objective-C的消息传递叫做调用方法&lt;/p&gt;
&lt;h4 id=&quot;不带参数&quot;&gt;&lt;a href=&quot;#不带参数&quot; class=&quot;headerlink&quot; title=&quot;不带参数&quot;&gt;&lt;/a&gt;不带参数&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[obj method]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;带一个参数&quot;&gt;&lt;a href=&quot;#带一个参数&quot; class=&quot;headerlink&quot; title=&quot;带一个参数&quot;&gt;&lt;/a&gt;带一个参数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[obj method:value];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[counter increse:1];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应java版本&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;counter.increse(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;带多个参数&quot;&gt;&lt;a href=&quot;#带多个参数&quot; class=&quot;headerlink&quot; title=&quot;带多个参数&quot;&gt;&lt;/a&gt;带多个参数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- void setColorToRed: (float)red Green:(float)green Blue:(float)blue&amp;#123;...&amp;#125; //定义方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Obj setColorToRed: 1.0 Green:0.8 Blue: 0.2]; //调用方法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对应的java&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setColorToRedGreenBlue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; red, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; green, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; blue)&lt;/span&gt;&lt;/span&gt;&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Obj.setColorToRedGreenBlue(&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我找了几个博客，对比了一下，看到了别人总结的规律&lt;br&gt;定义：&lt;code&gt;-(void) setWord1:(NSString *) word1 setWord2:(NSString *) word2&lt;/code&gt;&lt;br&gt;也就是：&lt;code&gt;-(方法返回类型) 方法名:(参数1的数据类型) 参数1的变量名 参数2名称:(参数2的数据类型) 参数2的变量名 ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后调用方法是这样的:&lt;code&gt;[obj setWord1:&amp;quot;parameter1&amp;quot; setWord2:&amp;quot;parameter2&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;我简单粗暴的总结了下来，发现非常容易记，那就是把方法名直接记忆为参数1的名称，也就是通过`参数名:参数值`调用即可
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;消息嵌套&quot;&gt;&lt;a href=&quot;#消息嵌套&quot; class=&quot;headerlink&quot; title=&quot;消息嵌套&quot;&gt;&lt;/a&gt;消息嵌套&lt;/h4&gt;&lt;p&gt;对比上面的带多个参数，消息嵌套就灰常简单了，完全有据可循&lt;br&gt;直接就是把一个&lt;code&gt;[]&lt;/code&gt;符号当作java中的&lt;code&gt;.&lt;/code&gt;符号即可，只是&lt;code&gt;[]&lt;/code&gt;是包括了对象和消息，而&lt;code&gt;.&lt;/code&gt;是将对象和方法连接起来&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Obj *obj = [[[Obj methodOne] methodTwo] methodThree];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的java就是&lt;code&gt;Obj obj = Obj.methodOne().methodTwo().methodThree();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到对于变量名字前面是带了一个&lt;code&gt;*&lt;/code&gt;号的，在Onjective中，是代表一个指针，也就是说，可以指向一个内存地址，关于&lt;code&gt;*&lt;/code&gt;号的放置其实有四种方式，我采用其中一种就可以，也就是这里的这种，当然也有人会喜欢这种&lt;code&gt;NSString* obj = @&amp;quot;Hello&amp;quot;&lt;/code&gt;，因为使用obj的时候是不用带*号的&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;p&gt;在Objective-C中关于@符号，似乎是一种象征，字符串也一样，由双引号包裹，并且在引号前面加一个@符号&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title = @&amp;quot;Hello&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if(title == @&amp;quot;Hello&amp;quot;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h3&gt;&lt;p&gt;在Objective-C中类可以分为接口定义和实现两个部分，接口定义(Interface)放在头文件中，文件扩展名是.h，实现(implementation)放在实现文件中，文件扩展名是.m，网上不建议将接口定义写在.m中，最好是分开两个文件写。&lt;/p&gt;
&lt;h4 id=&quot;Interface&quot;&gt;&lt;a href=&quot;#Interface&quot; class=&quot;headerlink&quot; title=&quot;Interface&quot;&gt;&lt;/a&gt;Interface&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface Myclass &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int menberVar1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	id memberVar2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance_method1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance_method2: (int) p1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance_method3: (int) p1 parameter2: (int) p2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Implementation&quot;&gt;&lt;a href=&quot;#Implementation&quot; class=&quot;headerlink&quot; title=&quot;Implementation&quot;&gt;&lt;/a&gt;Implementation&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation MyClass &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int memberVar3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance_method1 &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance)method2: (int) p1 &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(return_type) instance_method3: (int) p1 parameter2: (int) p2 &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到接口还有实现都是以@interface、@implementation开头，都以@end结束。&lt;/p&gt;
&lt;p&gt;如果用java来写是这样的&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; memberVar1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; pointer memberVar2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; memberVar3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; (return_type) instance_method1() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; (return_type) instance_method2(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; (return_type) instance_method3andPar(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在Objective-C中，对于&lt;code&gt;Interface&lt;/code&gt;没有私有方法，都是公共的。我还不清楚变量的&lt;code&gt;protected&lt;/code&gt;和&lt;code&gt;private&lt;/code&gt;，后面慢慢写到应该会理解的&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;类方法和实例方法&quot;&gt;&lt;a href=&quot;#类方法和实例方法&quot; class=&quot;headerlink&quot; title=&quot;类方法和实例方法&quot;&gt;&lt;/a&gt;类方法和实例方法&lt;/h3&gt;&lt;p&gt;类方法就是在&lt;code&gt;java&lt;/code&gt;中使用&lt;code&gt;static&lt;/code&gt;修饰的方法，不用实例化就可以直接调用，类方法的声明用一个&lt;code&gt;+&lt;/code&gt;号修饰。&lt;/p&gt;
&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface MyClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	+(void) sayHello;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation MyClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+(void) sayHello &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NSLog(@&amp;quot;Hello&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[MyClass sayHello];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例方法就是需要实例化一个对象才可以调用的普通方法，实例方法使用一个&lt;code&gt;-&lt;/code&gt;号修饰。&lt;/p&gt;
&lt;h4 id=&quot;定义-1&quot;&gt;&lt;a href=&quot;#定义-1&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface MyClass : NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void) sayHello;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;实现-1&quot;&gt;&lt;a href=&quot;#实现-1&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation MyClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void) sayHello &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NSLog(@&amp;quot;Hello&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;使用-1&quot;&gt;&lt;a href=&quot;#使用-1&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;myCls = [MyClass new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[myCls sayHello]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的myCls前面没有类来修饰，在java中实例是这样的，&lt;code&gt;MyClass myCls = new MyClass();&lt;/code&gt;，这个应该是区别。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;继承和java是一样的原理，不同的是Objective-C是写在Interface定义里面的。语法为：子类名:父类名。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface MyClass : NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在java中：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MyClass extends NSObject&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;协议（Protocol）&quot;&gt;&lt;a href=&quot;#协议（Protocol）&quot; class=&quot;headerlink&quot; title=&quot;协议（Protocol）&quot;&gt;&lt;/a&gt;协议（Protocol）&lt;/h3&gt;&lt;p&gt;Objective-C的协议就相当于java中的Interface。&lt;/p&gt;
&lt;h4 id=&quot;定义-2&quot;&gt;&lt;a href=&quot;#定义-2&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@protocol Printable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(void)print:(NSString)str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在java中&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Printable&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;协议的继承&quot;&gt;&lt;a href=&quot;#协议的继承&quot; class=&quot;headerlink&quot; title=&quot;协议的继承&quot;&gt;&lt;/a&gt;协议的继承&lt;/h4&gt;&lt;p&gt;协议本身可以实现别的协议，通过两个尖括号包裹&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@protocol Printable &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(void)print:(NSString)str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在java中&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Printable&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;entends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;可选方法&quot;&gt;&lt;a href=&quot;#可选方法&quot; class=&quot;headerlink&quot; title=&quot;可选方法&quot;&gt;&lt;/a&gt;可选方法&lt;/h4&gt;&lt;p&gt;和java中的abstract声明的抽象类相反，java抽象类里面的抽象方法必须被重写，Objective-C的协议也可以包含可选方法，通过@optional关键字标识的方法，可以不被类实现：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@protocol Printable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(void)print:(NSString)str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;协议的实现&quot;&gt;&lt;a href=&quot;#协议的实现&quot; class=&quot;headerlink&quot; title=&quot;协议的实现&quot;&gt;&lt;/a&gt;协议的实现&lt;/h4&gt;&lt;p&gt;语法：协议名用尖括号包裹，多个协议名用逗号隔开，协议写在父类的右边。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@ interface class Myclass : NSObject &amp;lt;Printable,Drawable&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中Printable和Drawable就是两个协议。在java中&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Printable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Drawable&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;分类（Category）&quot;&gt;&lt;a href=&quot;#分类（Category）&quot; class=&quot;headerlink&quot; title=&quot;分类（Category）&quot;&gt;&lt;/a&gt;分类（Category）&lt;/h3&gt;&lt;p&gt;分类可以给一个已经存在的类增加方法，而不用去修改它的源码，这在java中可没有这样的特性。&lt;/p&gt;
&lt;p&gt;例如，NSObject是一个Objective-C内置的系统类，我们想给它增加toJson方法，就像这样：&lt;br&gt;头文件：NSObject+Json.h&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface NSObject (Json)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toJson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实现文件：NSObject+Json.m&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation NSObject (Json)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toJson&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用的时候，只要包含NSObject+Json.h，实例化NSObject类，就可以使用toJson方法了：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;quot;NSObject+Json.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation XYZController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(void)test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		NSObject *obj = [[NSObject alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		NSString *str = [obj toJson]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;分类多个方法&quot;&gt;&lt;a href=&quot;#分类多个方法&quot; class=&quot;headerlink&quot; title=&quot;分类多个方法&quot;&gt;&lt;/a&gt;分类多个方法&lt;/h4&gt;&lt;p&gt;头文件：NSObject+Json+XML.h&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface NSObject (Json)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toJson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface NSObject(XML)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toXML;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实现文件：NSObject+Json+XML.m&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;implementation NSObject (Json)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toJson &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(NSString)toXML &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;quot;NSObject+Json+XML.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation XYZController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-(void)test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		NSObject *obj = [[NSObject alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		NSString *json = [obj toJson];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		NSString *xml = [obj toXML];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Selector&quot;&gt;&lt;a href=&quot;#Selector&quot; class=&quot;headerlink&quot; title=&quot;Selector&quot;&gt;&lt;/a&gt;Selector&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IOS基础入门&quot;&gt;&lt;a href=&quot;#IOS基础入门&quot; class=&quot;headerlink&quot; title=&quot;IOS基础入门&quot;&gt;&lt;/a&gt;IOS基础入门&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;ios的开发使用Objective-C语言，和java一样，它页是一种面向对象的
    
    </summary>
    
    
      <category term="ios" scheme="http://zuesblog.xyz/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之路-Axure中英转换</title>
    <link href="http://zuesblog.xyz/2017/04/05/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF-Axure%E4%B8%AD%E8%8B%B1%E8%BD%AC%E6%8D%A2/"/>
    <id>http://zuesblog.xyz/2017/04/05/产品经理之路-Axure中英转换/</id>
    <published>2017-04-05T13:49:40.000Z</published>
    <updated>2017-07-28T16:05:59.670Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;当然不是因为我不会汉化Axure，而是想用更接近原著的方式使用一款国外的工具，使用Axure也做了不少的简单demo小组件，想记录下中英转换词，我不一定会翻看，因为在写的过程中，我或许完全记住每个功能标签了，从本质上去理解，这比单纯的背更持久更具备重复利用性。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;成为产品经理必备要素之一：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、逻辑清晰;&lt;br&gt;2、事先策划;&lt;br&gt;3，用最简约的载体展示最丰富的内容;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此下面的中英转换我会尊造一个原则：&lt;code&gt;文字&amp;lt;图表&amp;lt;图片&lt;/code&gt;,同时按照Axure的框架来管理不同功能标签，ok,let go!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整体流程&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/img/Axure RP 8.png&quot; alt=&quot;AXURE RP 8&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;右面板&quot;&gt;&lt;a href=&quot;#右面板&quot; class=&quot;headerlink&quot; title=&quot;右面板&quot;&gt;&lt;/a&gt;右面板&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;一、检查器&quot;&gt;&lt;a href=&quot;#一、检查器&quot; class=&quot;headerlink&quot; title=&quot;一、检查器&quot;&gt;&lt;/a&gt;一、检查器&lt;/h3&gt;&lt;p&gt;为什么从这部分说起，因为我认为这里是整个Axure中的交互核心，汇聚了各种事件监听和样式设计。&lt;/p&gt;
&lt;h4 id=&quot;1、PROPERTIES-gt-属性&quot;&gt;&lt;a href=&quot;#1、PROPERTIES-gt-属性&quot; class=&quot;headerlink&quot; title=&quot;1、PROPERTIES-&amp;gt;属性&quot;&gt;&lt;/a&gt;1、PROPERTIES-&amp;gt;属性&lt;/h4&gt;&lt;p&gt;Interactions-&amp;gt;交互，还好学过，在云南旅行时这个词被一对般配的法国情侣说出来了，他们是做虚拟现实的素材采集的，男主很帅气女主很美，真的，哎呀走偏了！&lt;br&gt;回到刚刚说的，在交互这里我按照&lt;code&gt;事件种类-&amp;gt;共有的事件监听-&amp;gt;每一种监听的详细实现&lt;/code&gt;步骤来翻译这里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事件种类&lt;/strong&gt;&lt;br&gt;事件种类按照&lt;code&gt;page&lt;/code&gt;和&lt;code&gt;libraries&lt;/code&gt;来分，两者有不同的&lt;code&gt;Event&lt;/code&gt;。&lt;strong&gt;首先是&lt;code&gt;page&lt;/code&gt;的事件种类&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;OnPageLoad&lt;/li&gt;
&lt;li&gt;OnWindowResize&lt;/li&gt;
&lt;li&gt;OnWindowScroll&lt;/li&gt;
&lt;li&gt;OnPageClick&lt;/li&gt;
&lt;li&gt;OnpageDoubleClick&lt;/li&gt;
&lt;li&gt;OnPageContextMenu&lt;/li&gt;
&lt;li&gt;OnPageMouseMove&lt;/li&gt;
&lt;li&gt;OnPageKeyDowm&lt;/li&gt;
&lt;li&gt;OnPageKeyUp&lt;/li&gt;
&lt;li&gt;OnwindowScrollUp&lt;/li&gt;
&lt;li&gt;OnWindowScrollDown&lt;/li&gt;
&lt;li&gt;OnAdaptiveViewChange&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;然后是&lt;code&gt;libraries&lt;/code&gt;的事件种类&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;OnClick&lt;/li&gt;
&lt;li&gt;OnMouseEnter&lt;/li&gt;
&lt;li&gt;OnMouseOut&lt;/li&gt;
&lt;li&gt;OnDoubleClick&lt;/li&gt;
&lt;li&gt;OnContextMenu&lt;/li&gt;
&lt;li&gt;OnMouseDown&lt;/li&gt;
&lt;li&gt;OnMouseUp&lt;/li&gt;
&lt;li&gt;OnMouseMove&lt;/li&gt;
&lt;li&gt;OnMouseHover&lt;/li&gt;
&lt;li&gt;OnLongClick&lt;/li&gt;
&lt;li&gt;OnKeyDown&lt;/li&gt;
&lt;li&gt;OnkeyUp&lt;/li&gt;
&lt;li&gt;OnMove&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Adaptive-&amp;gt;适配，点击了Enable之后可以适配很多不同终端设备，点最右边的突变之后，有一些参数可以挑包括：&lt;br&gt;Presets-&amp;gt;预设，可以提前设定适配的是不同的尺寸的视角，这个和苹果开发的时候，制作启动页的图考虑的差不多，如果想要适配每一种的话就不断点击“+”号添加就行。&lt;br&gt;Large Display -&amp;gt;大型显示屏,屏幕宽度大于1200像素&lt;br&gt;Landscape Tablet-&amp;gt;横屏平板，屏幕宽度小于1024像素&lt;br&gt;Portrait Tablet-&amp;gt;竖屏平板，屏幕宽度小于768像素&lt;br&gt;Landscape Phone-&amp;gt;横屏手机，屏幕宽度小于480像素&lt;br&gt;Portrait Phone-&amp;gt;竖屏手机，屏幕宽度小于320像素&lt;/p&gt;
&lt;p&gt;提到这个我就想起了开发iphone的时候，在设计LaunchImage的时候，刚开始被弄糊涂了，怎么一个启动页可以有这么多尺寸图片来组成，原来，这是为了保证在不同的屏幕下图片都可以在不丢失长宽比且保持最佳分辨率展示，说实话很喜欢这样的标准，或许这就是苹果公司的产品原则吧，哈哈，体现了苹果公司的严谨团队理念和用户体验至上价值观。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/ios_launchImage_size.png&quot; alt=&quot;ios_launch_image_size&quot;&gt;&lt;br&gt;在上图中可以看到，在侧边的检查器部分是有四个不同的iphone/ipad尺寸，认真看，其实就是不同分辨率的Portrait和Landscape，因为我开发的是iphone竖屏应用，所以我没有勾选其它ipad或者landscape的启动页适配。&lt;br&gt;看到中间面板，可以发现尽管是ios5、6，也有1x、2x和Retina（视网膜屏）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;ios_version&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;type&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;size&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;just like&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 5、6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1x&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;320 x 480 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 3GS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 5、6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2x&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;640 x 960 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 4、iPhone 4s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 5、6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Retina 4&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;640 x 1136 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 4、iPhone 4s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 8、9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Retina HD 5.5&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1242 x 2208 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 6 plus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 8、9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Retina HD 4.7&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;750 x 1334 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 6、iPhone 6s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 7-9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2x&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;320 x 480 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 5、iPhone 5c、iPhone 5s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ios 7-9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Retina 4&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;640 x 1136 pixel&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;iPhone 5、iPhone 5c、iPhone 5s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当然这个是不属于这次的中英文转化，因此我把这部分放到最后面，作为额外奖励看完整篇博客的读者，哈哈，当然也为加深自己印象。&lt;/p&gt;
&lt;p&gt;当浏览器大小不满足任何其他视图的尺寸时，将显示基本视图。基本视图的宽度和高度仅影响画布上显示的指南。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img src=&quot;/img/Axure RP 8_Panel.png&quot; alt=&quot;Axure_Panel&quot;&gt;&lt;/h2&gt;&lt;h3 id=&quot;Axure原型设计之tab选项卡&quot;&gt;&lt;a href=&quot;#Axure原型设计之tab选项卡&quot; class=&quot;headerlink&quot; title=&quot;Axure原型设计之tab选项卡&quot;&gt;&lt;/a&gt;Axure原型设计之tab选项卡&lt;/h3&gt;&lt;p&gt;第一步：拖拉摆放相关的控件&lt;/p&gt;
&lt;p&gt;1、三个同样大小的矩形控件(Rectangle)，分别命名为“tab1”，“tab2”和“tab3”，均设置为无底边(STYLE-&amp;gt;Border-&amp;gt;Border Visibility)、黑边(STYLE-&amp;gt;Border-&amp;gt;line color)、灰底(STYLE-&amp;gt;Fill-&amp;gt;Fill Type)矩形，整齐横排在动态面板的左上方；&lt;/p&gt;
&lt;p&gt;2、一个动态面板控件(Libraries-&amp;gt;Dynamic Panel)，并为其设置3个相对应面板状态(state)，分别命名为“面板1”，“面板2”和“面板3”，这3个面板状态中都放置一个黑边白底的矩形和一张各不相同的图片，其中矩形与动态面板一样大小。&lt;/p&gt;
&lt;p&gt;第二步：设置选项卡的样式&lt;/p&gt;
&lt;p&gt;1、选中“tab1”，右键设置其初始状态为选中状态(selected)；&lt;/p&gt;
&lt;p&gt;2、同时选中“tab1”，“tab2”和“tab3”，右键“设置选项组(Assian Selection Group)”，设置名称为“tab选项卡”；&lt;/p&gt;
&lt;p&gt;3、同时选中“tab1”，“tab2”和“tab3”，右键“交互样式(Interaction Styles)”，设置“鼠标悬停(MouseOver)”，“鼠标按下(MouseDown)”和“选中(Selected)”三种状态的“填充颜色(Fill Color)”均为白色。&lt;/p&gt;
&lt;p&gt;第三步：设置选项卡的鼠标单击时用例&lt;/p&gt;
&lt;p&gt;分别为“tab1”，“tab2”和“tab3”添加一个鼠标单击时用例(Add Case-&amp;gt;onclick)，并为用例添加以下4个动作：&lt;/p&gt;
&lt;p&gt;1、设置选中当前元件(selected)&lt;/p&gt;
&lt;p&gt;2、将动态面板置于顶层(Bring to Front/Back-&amp;gt;Bring to Front)&lt;/p&gt;
&lt;p&gt;3、将当前元件置于顶层(Bring to Front/Back-&amp;gt;Bring to Front)&lt;/p&gt;
&lt;p&gt;4、设置动态面板为相对应的面板状态(Set Panel State)（“tab1”对应“面板1”，“tab2”对应“面板2”，“tab3”对应“面板3”）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;axure原型设计之播放控制条&quot;&gt;&lt;a href=&quot;#axure原型设计之播放控制条&quot; class=&quot;headerlink&quot; title=&quot;axure原型设计之播放控制条&quot;&gt;&lt;/a&gt;axure原型设计之播放控制条&lt;/h2&gt;&lt;p&gt;第二步：为“面板2”设置拖动时用例&lt;/p&gt;
&lt;p&gt;在拖动时用例中(Add Case-&amp;gt;onDrag)，添加2个移动动作。&lt;/p&gt;
&lt;p&gt;1、移动(move)“面板2”，移动设置为“水平拖动(with drag x)”，添加左侧边界(Add boundary)大于等于(is greater than)0，添加右侧边界小于等于(is less than or equals)“控制槽”的宽度([[widget.width]])。&lt;/p&gt;
&lt;p&gt;这里刚做完的时候我有一个疑问就是:明明添加的case中只针对面板2的state1，也就是控制点，但是为什么会连着控制条也会动呢！&lt;br&gt;我猜测这是boundaries的作用，在拖动的时候给对应的面板2和控制条一起移动，所以导致在拖动的时候，两者都会移动。&lt;br&gt;理解面板2的移动到容易，因为在拖动事例中，控制点只能在左边边缘和右边移动，故只能被水平移动右侧距离为控制槽的长度&lt;br&gt;而控制条却是，一开始就是为了连接控制点，部分被移动到动态面板外，因为是在面板1内的state1，故移出部分不可见。而在拖动实例中，控制条的左侧肯定不会超过当全部控制条长度的负值，这里的负值代表在向左边移动的数值，而右侧和控制点一样，不会超过控制槽的宽度。&lt;/p&gt;
&lt;p&gt;还是感觉有点不清晰，不过比分析前好多了！&lt;/p&gt;
&lt;p&gt;Fire Event = 事件触发&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;当然不是因为我不会汉化Axure，而是想用更接近原著的方式使用一款国外的工具，使用Axure也做了不少的简单demo小组件，想记录下中英转换
    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Axure" scheme="http://zuesblog.xyz/tags/Axure/"/>
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
  </entry>
  
  <entry>
    <title>ANDROID开发_rxAndroid基础入门</title>
    <link href="http://zuesblog.xyz/2017/03/26/ANDROID%E5%BC%80%E5%8F%91_rxAndroid%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://zuesblog.xyz/2017/03/26/ANDROID开发_rxAndroid基础入门/</id>
    <published>2017-03-26T10:50:02.000Z</published>
    <updated>2017-07-28T05:19:14.667Z</updated>
    
    <content type="html">&lt;p&gt;这篇博客参考&lt;a href=&quot;https://gank.io/post/560e15be2dca930e00da1083#toc_5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给 Android 开发者的 RxJava 详解&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建Observer&quot;&gt;&lt;a href=&quot;#创建Observer&quot; class=&quot;headerlink&quot; title=&quot;创建Observer&quot;&gt;&lt;/a&gt;创建Observer&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observer&amp;lt;String&amp;gt; observer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observer&amp;lt;String&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外还有一个抽象类&lt;code&gt;Subscriber&lt;/code&gt;也实现了Observer接口，源码中可以看到&lt;code&gt;Subscriber&lt;/code&gt;中没有实现&lt;code&gt;Observer&lt;/code&gt;的三个方法，而是新增了一些新的方法。因此创建一个&lt;code&gt;Subscriber&lt;/code&gt;能实现同样的方法，而且还可以使用新增的&lt;code&gt;onStart&lt;/code&gt;和&lt;code&gt;unsubscribe&lt;/code&gt;方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onStart()&lt;/code&gt;能在事件未发送之前调用，可以做一些准备的事件，例如数据的清零，更多详情还是看文章一开始的链接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsubscribe()&lt;/code&gt;可以取消订阅，使用了这个方法之前使用&lt;code&gt;isUnsubscribed()&lt;/code&gt;判断状态，可以防止内存泄漏&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建Observable&quot;&gt;&lt;a href=&quot;#创建Observable&quot; class=&quot;headerlink&quot; title=&quot;创建Observable&quot;&gt;&lt;/a&gt;创建Observable&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.create(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observable.OnSubscribe&amp;lt;String&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Subscriber&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; String&amp;gt; subscriber)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onNext(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onNext(&lt;span class=&quot;string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onNext(&lt;span class=&quot;string&quot;&gt;&quot;Aloha&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，create里面的参数是一个&lt;code&gt;OnSubscribe&lt;/code&gt;参数，从字面理解就是正在注册着广播的观察者，查看源码，&lt;code&gt;OnSubscribe&lt;/code&gt;是一个接口继承了一个叫&lt;code&gt;Action1&amp;lt;Subscriber&amp;lt;? super T&amp;gt;&amp;gt;&lt;/code&gt;的接口&lt;br&gt;当call方法被调用的时候，已经注册的观察者会依次执行三个&lt;code&gt;onNext()&lt;/code&gt;和&lt;code&gt;onCompleted()&lt;/code&gt;方法&lt;/p&gt;
&lt;h3 id=&quot;just-方法和from-方法&quot;&gt;&lt;a href=&quot;#just-方法和from-方法&quot; class=&quot;headerlink&quot; title=&quot;just()方法和from()方法&quot;&gt;&lt;/a&gt;just()方法和from()方法&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.just(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;my&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;is&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;zues&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//等价于依次调用create的onNext(&quot;hello&quot;);onNext(&quot;my&quot;);onNext(&quot;name&quot;);onNext(&quot;is&quot;);onNext(&quot;zues&quot;);onCompleted();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String[] words = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;my&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;is&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;zues&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.from(words);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//同样等价于依次调用create的onNext(&quot;hello&quot;);onNext(&quot;my&quot;);onNext(&quot;name&quot;);onNext(&quot;is&quot;);onNext(&quot;zues&quot;);onCompleted();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;建立订阅关系&quot;&gt;&lt;a href=&quot;#建立订阅关系&quot; class=&quot;headerlink&quot; title=&quot;建立订阅关系&quot;&gt;&lt;/a&gt;建立订阅关系&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe(observer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//或者是observeable.subscribe(subscriber);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看源码可以发现，在&lt;code&gt;subscribe()&lt;/code&gt;方法中，传入一个&lt;code&gt;Subscriber&lt;/code&gt;参数,在方法中调用&lt;code&gt;onStart()&lt;/code&gt;和&lt;code&gt;call()&lt;/code&gt;方法，也就是&lt;code&gt;observable&lt;/code&gt;不是在创建的时候就开始发送事件，而是在被订阅的时候才开始执行。&lt;/p&gt;
&lt;h2 id=&quot;自定义创建出Subscriber&quot;&gt;&lt;a href=&quot;#自定义创建出Subscriber&quot; class=&quot;headerlink&quot; title=&quot;自定义创建出Subscriber&quot;&gt;&lt;/a&gt;自定义创建出Subscriber&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Action1&amp;lt;String&amp;gt; onNextAction = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;String&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Action1&amp;lt;Throwable&amp;gt; onErrorAction = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Throwable&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable throwable)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Action0 onCompletedAction = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action0()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe(onNextAction);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe(onNextAction, onErrorAction);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe(onNextAction, onErrorAction, onCompletedAction);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;调度器Scheduler的使用&quot;&gt;&lt;a href=&quot;#调度器Scheduler的使用&quot; class=&quot;headerlink&quot; title=&quot;调度器Scheduler的使用&quot;&gt;&lt;/a&gt;调度器Scheduler的使用&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribeOn(Schedulers.io()) &lt;span class=&quot;comment&quot;&gt;//指定subscribe()发生在IO线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.observeOn(AndroidSchedulers.mainThread()) &lt;span class=&quot;comment&quot;&gt;//指定Subscriber的回调发生在主线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Integer&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Integer number)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;Scheduler&lt;/code&gt;中,默认在当前线程运行，也就是&lt;code&gt;Scheduler.immediate()&lt;/code&gt;，另外还可以新开一个线程，在新的线程操作的&lt;code&gt;Scheduler.newThread()&lt;/code&gt;方法，以及比较常用的io流上工作的&lt;code&gt;Scheduler.io()&lt;/code&gt;，原理我解释不清楚，但是这个比&lt;code&gt;newThread()&lt;/code&gt;更有效率，因为我没有读懂博客的内容&lt;/p&gt;
&lt;p&gt;除此之外，还有&lt;code&gt;Schedulers.computation()&lt;/code&gt;主要CPU-bound(计算密集型)操作和指定在Android主线程运行的&lt;code&gt;AndroidSchedulers.mainThread()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;关于密集型操作是指用来计算、逻辑判断，例如计算圆周率、开根号、图形的计算等大型操作。&lt;/p&gt;
&lt;h2 id=&quot;区分subscribeOn-和observeOn-区分&quot;&gt;&lt;a href=&quot;#区分subscribeOn-和observeOn-区分&quot; class=&quot;headerlink&quot; title=&quot;区分subscribeOn()和observeOn()区分&quot;&gt;&lt;/a&gt;区分subscribeOn()和observeOn()区分&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observeable.just(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribeOn(Sbhedules.io())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Integer&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Integer number)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;subscribeOn(Schedulers.io())&lt;/code&gt;指定的是事件的创建也就是观察者发生在IO线程&lt;br&gt;&lt;code&gt;observeOn(AndroidSchedulers.mainThread())&lt;/code&gt;指定Subscriber的回调，也就是订阅者的回调运行在Android主线程&lt;/p&gt;
&lt;h2 id=&quot;map-和flatMap&quot;&gt;&lt;a href=&quot;#map-和flatMap&quot; class=&quot;headerlink&quot; title=&quot;map()和flatMap()&quot;&gt;&lt;/a&gt;map()和flatMap()&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(&lt;span class=&quot;string&quot;&gt;&quot;images/logo.png&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.map(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;String, Bitmap&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Bitmap &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String filePath)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getBitmapFromPath(filePath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Bitmap&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bitmap bitmap)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//showBitmap(bitmap); 展示图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;map()方法&lt;/code&gt;同样不说原理了，在new Fun1中传入的键值对是自定义的，由传入just的数据类型来定义键，对应的值由自己的需求来更换，这里需要返回Bitmap对象，然后将返回的类型传入subscribe中去，传入call函数使用&lt;/p&gt;
&lt;p&gt;当直接传入的对象不是一对一的单个对象，而是一对多的转化，怎样才能把一个Student转化为多个Course，这时候就可以用到&lt;code&gt;flatMap()&lt;/code&gt;了&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Student[] students = ...;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Subacriber&amp;lt;Corese&amp;gt; subscriber = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;Course&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Course course)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Log.d(tag, course.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.from(students)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;Student, Observable&amp;lt;Course&amp;gt;&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;Couese&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Student student)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.from(student.getCourses());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribe(subscriber);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看了几遍，终于搞懂了这里的逻辑，首先将学生对象传进去，接着就是转化为一个Observable对象，返回的是每一个遍历好的student.getCourses，也就是返回course数组，最后在&lt;code&gt;Observable.from()&lt;/code&gt;中将数组对象再依次遍历出来&lt;/p&gt;
&lt;p&gt;逻辑：students—传入—&amp;gt;&amp;gt;通过&lt;code&gt;Observable.from&lt;/code&gt;遍历数组每一个&lt;code&gt;students&lt;/code&gt;的值拿到每一个学生对应的课程&lt;code&gt;Course&lt;/code&gt;—返回—&amp;gt;&amp;gt;student.getCourses—传入—&amp;gt;&amp;gt;通过&lt;code&gt;Observable.from&lt;/code&gt;遍历数组每一个&lt;code&gt;Course&lt;/code&gt;的值拿到每一个学生对应的课程&lt;code&gt;Course.getName()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于interface的理解&quot;&gt;&lt;a href=&quot;#关于interface的理解&quot; class=&quot;headerlink&quot; title=&quot;关于interface的理解&quot;&gt;&lt;/a&gt;关于interface的理解&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1、关于接口的匿名内部类&quot;&gt;&lt;a href=&quot;#1、关于接口的匿名内部类&quot; class=&quot;headerlink&quot; title=&quot;1、关于接口的匿名内部类&quot;&gt;&lt;/a&gt;1、关于接口的匿名内部类&lt;/h3&gt;&lt;p&gt;今天看到rxJava中的一个方法&lt;code&gt;Observer&amp;lt;String&amp;gt; observer = new Observer&amp;lt;String&amp;gt;(){...}&lt;/code&gt;是直接内部类，然后看了一下Observer的源码，发现是一个接口，突然想了一想，觉得接口不是不可以new的吗&lt;/p&gt;
&lt;p&gt;接着就去看了知乎的一些解释，其实就是另一种隐藏的实现了对应Observer接口的匿名内部类，类似如下&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observer&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也就是在new的时候会自动实现一个匿名的内部类，而里面的内部类实现了Observer接口&lt;/p&gt;
&lt;h3 id=&quot;2、关于接口的意义&quot;&gt;&lt;a href=&quot;#2、关于接口的意义&quot; class=&quot;headerlink&quot; title=&quot;2、关于接口的意义&quot;&gt;&lt;/a&gt;2、关于接口的意义&lt;/h3&gt;&lt;p&gt;我们都知道接口是一个规范，也就是只有空的方法，但是没有实现，非抽象类一旦实现了接口的话就要实现接口的所有方法，但是抽象类可以不用是实现接口的所有方法。&lt;/p&gt;
&lt;p&gt;关于接口的意义，在知乎看到一个网友这么说，感觉很贴切：&lt;br&gt;`接口就是个招牌。比如说你今年放假出去杭州旅游，玩了一上午，你也有点饿了，突然看到前面有个店子，上面挂着KFC，然后你就知道今天中饭有着落了。KFC就是接口，我们看到了这个接口，就知道这个店会卖炸鸡腿（实现接口）。那么为神马我们要去定义一个接口涅，这个店可以直接卖炸鸡腿啊（直接写实现方法），是的，这个店可以直接卖炸鸡腿，但没有挂KFC的招牌，我们就不能直接简单粗暴的冲进去叫服务员给两个炸鸡腿了。要么，我们就要进去问，你这里卖不卖炸鸡腿啊，卖不卖汉堡啊，卖不卖圣代啊（这就是反射）。很显然，这样一家家的问实在是非常麻烦（反射性能很差）。要么，我们就要记住，中山路108号卖炸鸡，黄山路45号卖炸鸡（硬编码），很显然这样我们要记住的很多很多东西（代码量剧增），而且，如果有新的店卖炸鸡腿，我们也不可能知道（不利于扩展）。&lt;/p&gt;
&lt;p&gt;（上面那句回答来自&lt;a href=&quot;https://www.zhihu.com/question/20111251/answer/16585393&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java 中的接口有什么作用？&lt;/a&gt;,作者：Ivony）&lt;/p&gt;
&lt;p&gt;我又看了一下，rxAndroid中一个比较重要的东西&lt;code&gt;Subscriber&lt;/code&gt;，&lt;code&gt;Subscriber&lt;/code&gt;是抽象类并且实现了&lt;code&gt;Observer&lt;/code&gt;的接口，&lt;code&gt;Subscriber&lt;/code&gt;没有实现Observer的方法，不过当我实现&lt;code&gt;Subscriber&lt;/code&gt;的时候，也一样要实现Observer的三个方法&lt;/p&gt;
&lt;p&gt;也就是，一个实现了接口的抽象类可以实现接口的方法，但是一个一个普通类实现了接口或者是继承了抽象类就要实现所有的父类实现接口的那些方法，也要实现抽象类的抽象方法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客参考&lt;a href=&quot;https://gank.io/post/560e15be2dca930e00da1083#toc_5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给 Android 开发者的 RxJava 详解&lt;/a&gt;&lt;/p&gt;
&lt;h2 i
    
    </summary>
    
    
      <category term="android" scheme="http://zuesblog.xyz/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>鲈鱼的奇思妙想日记-珠三角东部发展优势</title>
    <link href="http://zuesblog.xyz/2017/03/23/%E9%B2%88%E9%B1%BC%E7%9A%84%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%E6%97%A5%E8%AE%B0-1/"/>
    <id>http://zuesblog.xyz/2017/03/23/鲈鱼的奇思妙想日记-1/</id>
    <published>2017-03-23T12:32:45.000Z</published>
    <updated>2017-08-05T12:42:13.179Z</updated>
    
    <content type="html">&lt;h2 id=&quot;珠三角东部&quot;&gt;&lt;a href=&quot;#珠三角东部&quot; class=&quot;headerlink&quot; title=&quot;珠三角东部&quot;&gt;&lt;/a&gt;珠三角东部&lt;/h2&gt;&lt;p&gt;在整个珠三角地区，最发达和竞争最大的地区，只能是珠东地区，想起上次有趣的一组数据，前8名珠三角城市排名，深圳广州稳居前10，佛山和东莞前20，中山和珠海排前30，江门和惠州前60，主要是名次之间层次分明。&lt;/p&gt;
&lt;p&gt;而这节课不仅仅是讲这个，更重要的是为什么珠东会是最好的个人发展地方，而这里的关键是在于深港一体。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;深港一体&quot;&gt;&lt;a href=&quot;#深港一体&quot; class=&quot;headerlink&quot; title=&quot;深港一体&quot;&gt;&lt;/a&gt;深港一体&lt;/h2&gt;&lt;p&gt;深港一体具备得天独厚的优势，甚至在全球内也可以名列前茅，结合后的深港地区，可以和纽约、伦敦、东京、新加坡有得一拼，未来10几年将会发展为全世界最高科技、繁荣之一的地方。&lt;/p&gt;
&lt;p&gt;回顾历史，在深圳没有发展起来时，香港除了发展金融业、服务业还发展制造业，但由于香港地少，制造业过于密集，于是被迁移到珠三角其他地区了，当然制造业也阻碍香港的发展，不过香港也并非发展得一帆风顺。&lt;/p&gt;
&lt;p&gt;因为还存在几个劣势，除了土地少、水资源，还有很重要的两点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;香港的&lt;strong&gt;教育资源尚未开发完全&lt;/strong&gt;，尤其是新界那边&lt;/li&gt;
&lt;li&gt;这也导致了第二个问题，&lt;strong&gt;产业结构不完善，缺乏高科技&lt;/strong&gt;，这也是为什么香港会落后于新加坡的原因&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;仅仅是高速发展金融和房地产行业只能做到短时间繁荣，而不能赶超新加坡。于是这时候深圳出现了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;深圳重视科技，主张科技创新的定位，这对深港优劣势互补的天作之合，香港依靠深圳的科技人才优势，成就了在全球都享有地位的优势。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何定居香港&quot;&gt;&lt;a href=&quot;#如何定居香港&quot; class=&quot;headerlink&quot; title=&quot;如何定居香港&quot;&gt;&lt;/a&gt;如何定居香港&lt;/h2&gt;&lt;p&gt;由于香港得独特优势，能过去香港发展的话将是难得一遇的机会，曾经在课堂上听过老师强调要&lt;strong&gt;抓住机会，要快&lt;/strong&gt;，我倒觉得没有这个必要，香港太挤了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于留学香港的方法&lt;/strong&gt;：前面我也没听清楚老师说什么，他吐字不清，不过应该是通过优才计划，也就是类似留学的方式申请在香港定居7年后，可以获得香港本地居民身份证。&lt;/p&gt;
&lt;p&gt;不过从下表可以看出，香港是属于超一线城市，在珠东地区地位不可替代。&lt;br&gt;| 城市        | 地位    |&lt;br&gt;| ——–   | —–:   |&lt;br&gt;| 香港        | 超一线    |&lt;br&gt;| 深圳        | 一线      |&lt;br&gt;| 东莞        | 二线      |&lt;br&gt;| 惠州        | 三线      |&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;选择&quot;&gt;&lt;a href=&quot;#选择&quot; class=&quot;headerlink&quot; title=&quot;选择&quot;&gt;&lt;/a&gt;选择&lt;/h2&gt;&lt;p&gt;如何选择城市发展，根据自己的抗压和期待的生活节奏决定，老师不赞同我们走出珠东发展，这里已经是全广东，甚至是全国最好的了。&lt;/p&gt;
&lt;p&gt;如果选择的话香港和深圳可以首选，次选择东莞、然后是惠州。东莞由于背靠广州，邻屿深港，会相对繁荣，但人口也不少，由于发展较快，在300多万人口中，有200多万都是外地人，节奏较快压力相对小一点&lt;/p&gt;
&lt;p&gt;惠州的话就生活节奏在整个珠东最慢，人口相对不那么密集，老师好像说适合我们学校的人在惠州发展[捂脸]，我就是惠州人啊，并不觉得很适合我发展。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;问题环节&quot;&gt;&lt;a href=&quot;#问题环节&quot; class=&quot;headerlink&quot; title=&quot;问题环节&quot;&gt;&lt;/a&gt;问题环节&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;佛山和东光排名相近，为什么东光能成为新一线城市，佛山却没有？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过地理位置可以发现，东光依靠良好的地理优势，不仅距离广州近，而且与深港也近。而佛山则没有那么好的地理优势了，除广州外，比较近的只能是中山和江门，给城市带来的优势远不及东莞的地理位置，在交通上已经输掉了，所以这也比较正常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;江门如何才能崛起？&lt;/strong&gt;&lt;br&gt;在短暂时间内基本不能，江门在80年代时发展的趋势非常可观，全省GDP排第3，而东莞只不过是一个农业城市，但三十年河东三十年河西，比较失望的是后面几十年的发展急速落后，变成现在的三线城市，这和交通有关系，那就是虎门大桥一直堵车，交通不方便，不利于江门和珠东地区城市贸易，而江门所在的珠西地区，能依靠的城市不能企及东莞、惠州。&lt;/p&gt;
&lt;p&gt;不过按照不可靠消息，7月1日，港珠澳大桥的成功通车或许可以拯救珠西地区，也能拯救江门，成功通车的话可以增加珠西和珠东之间的贸易。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;鼓励&quot;&gt;&lt;a href=&quot;#鼓励&quot; class=&quot;headerlink&quot; title=&quot;鼓励&quot;&gt;&lt;/a&gt;鼓励&lt;/h2&gt;&lt;p&gt;由于珠东地区人口密集，外来人口比本地人更多，所以在珠东地区主流语言已经是普通话和粤语，单单会两个语言中的一种都可能会吃亏，最好是两门都精通，当然英语最好是精通，哈哈哈！&lt;/p&gt;
&lt;p&gt;而我的理想工作地点已经定好了，那就是到深圳，离家不远而且技术氛围浓厚，希望能成功找到深圳的岗位！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;珠三角东部&quot;&gt;&lt;a href=&quot;#珠三角东部&quot; class=&quot;headerlink&quot; title=&quot;珠三角东部&quot;&gt;&lt;/a&gt;珠三角东部&lt;/h2&gt;&lt;p&gt;在整个珠三角地区，最发达和竞争最大的地区，只能是珠东地区，想起上次有趣的一组数据，前8名珠三角城市排名，深圳广州稳居
    
    </summary>
    
      <category term="日记" scheme="http://zuesblog.xyz/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="http://zuesblog.xyz/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ANDROID开发_android知识总结</title>
    <link href="http://zuesblog.xyz/2017/03/22/ANDROID%E5%BC%80%E5%8F%91_android%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://zuesblog.xyz/2017/03/22/ANDROID开发_android知识总结/</id>
    <published>2017-03-22T07:26:32.000Z</published>
    <updated>2017-07-28T05:18:37.634Z</updated>
    
    <content type="html">&lt;h2 id=&quot;三种命名空间&quot;&gt;&lt;a href=&quot;#三种命名空间&quot; class=&quot;headerlink&quot; title=&quot;三种命名空间&quot;&gt;&lt;/a&gt;三种命名空间&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;作用：我的理解是标识属性的命名，解决命名上的冲突。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xmlns:android=”http://schemas.android.com/apk/res/android”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xmlns:tools=”http://schemas.android.com/tools”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xmlns:app=”http://schemas.android.com/apk/res-auto”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;1和2命名空间里的属性是系统封装好的，第3种命名空间里的属性是用户自定义的&lt;/p&gt;
&lt;p&gt;对于第三种，自定义的xmlns的来源其实是自定义view里面的自己定义的属性，而那个app只是一个名字，可以把xmlns:app改成xmlns:test,效果都是一样&lt;br&gt;举一个比较典型的例子，我们现在都在用的一个&lt;code&gt;android.support.design.widget.CoordinatorLayout&lt;/code&gt;,它属于一个自定义的viewGroud，它有自己专属的属性，例如layout_behavior属性，可以用来控制子组件的滚动效果，但是安卓预定义没有这个属性名字，那么我们用来表示标识的时候就要用到自己的自定义的命名空间了，所以才出现了xmlns:app=”…”，可以用来区分属性。&lt;/p&gt;
&lt;p&gt;我也可能说错了吧！不过我确实是这样认为的。&lt;/p&gt;
&lt;p&gt;详情看这篇博客：&lt;a href=&quot;http://xiroid.com/post/android/ru-he-li-jie-androidzhong-de-xmlns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Android中XML的命名空间&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;id与-id的区别&quot;&gt;&lt;a href=&quot;#id与-id的区别&quot; class=&quot;headerlink&quot; title=&quot;@id与@+id的区别&quot;&gt;&lt;/a&gt;@id与@+id的区别&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;同样的地方就是都可以标识一个组件，但是@id是引用在&lt;code&gt;R.java&lt;/code&gt;中已经创建过的id，而@+id则是假如不存在对应的id，就创建新的id&lt;br&gt;其实按照我的想法，那么使用@+id不就一劳永逸？或许可以考虑到代码复用的情况，不过我还是喜欢用@+id，哈哈，这样不用考虑太多&lt;/p&gt;
&lt;h2 id=&quot;CoordinatorLayout用法&quot;&gt;&lt;a href=&quot;#CoordinatorLayout用法&quot; class=&quot;headerlink&quot; title=&quot;CoordinatorLayout用法&quot;&gt;&lt;/a&gt;CoordinatorLayout用法&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;这个部分比较难，不过大体上知道效果是怎样的，先放着&lt;br&gt;&lt;code&gt;CoordinatorLayout&lt;/code&gt;可以给自己的子组件制造出一种折叠的效果，例如可以产生有视觉差的详情页，还有可以扩展用户视图的tarbar，当用互手势上划的时候，会将顶部的toolbar隐藏，等用户向下滑动的时候，显示出来。&lt;/p&gt;
&lt;h2 id=&quot;java的protect关键字&quot;&gt;&lt;a href=&quot;#java的protect关键字&quot; class=&quot;headerlink&quot; title=&quot;java的protect关键字&quot;&gt;&lt;/a&gt;java的protect关键字&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;一直被这个关键困扰着，本来以为自己已经熟练掌握了，但是才发现，protect还没理解好，关于public和private两个极端就不说了&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;priavte          本类可见&lt;/li&gt;
&lt;li&gt;public            所有类可见&lt;/li&gt;
&lt;li&gt;protected      本包和所有子类都可见&lt;/li&gt;
&lt;li&gt;friendly          本包可见（即默认的形式）&lt;br&gt;也就是protected：protected对于子女、朋友来说，就是public的，可以自由使用，没有任何限制，而对于其他的外部class，protected就变成private。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;java的assert关键字&quot;&gt;&lt;a href=&quot;#java的assert关键字&quot; class=&quot;headerlink&quot; title=&quot;java的assert关键字&quot;&gt;&lt;/a&gt;java的assert关键字&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;assert关键字语法很简单，有两种用法：&lt;/p&gt;
&lt;p&gt;1、assert &lt;boolean表达式&gt;&lt;br&gt;如果&lt;boolean表达式&gt;为true，则程序继续执行。&lt;br&gt;如果为false，则程序抛出AssertionError，并终止执行。&lt;/boolean表达式&gt;&lt;/boolean表达式&gt;&lt;/p&gt;
&lt;p&gt;2、assert &lt;boolean表达式&gt; : &amp;lt;错误信息表达式&amp;gt;&lt;br&gt;如果&lt;boolean表达式&gt;为true，则程序继续执行。&lt;br&gt;如果为false，则程序抛出java.lang.AssertionError，并输入&amp;lt;错误信息表达式&amp;gt;。&lt;/boolean表达式&gt;&lt;/boolean表达式&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;使用assert断言有陷阱，详情可以看这篇博客[Java陷阱之assert关键字详解](http://m.jb51.net/article/41155.htm)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;LayoutInflater与MenuInflater&quot;&gt;&lt;a href=&quot;#LayoutInflater与MenuInflater&quot; class=&quot;headerlink&quot; title=&quot;LayoutInflater与MenuInflater&quot;&gt;&lt;/a&gt;LayoutInflater与MenuInflater&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;Inflater方法&quot;&gt;&lt;a href=&quot;#Inflater方法&quot; class=&quot;headerlink&quot; title=&quot;Inflater方法&quot;&gt;&lt;/a&gt;Inflater方法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;public View inflate (int resource, ViewGroup root)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;参数resource：将要加载的XML布局id，例如R.layout.list_item&lt;/li&gt;
&lt;li&gt;参数root：父视图，可选项，一般为Null,不过在填充menu的时候父视图就是menu对象了&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关于LayoutInflater可以在运行是加载一个xml文件，这样可以减少在onCreate的时候对应用的加载造成太大的负担，有三种方式可以获取LayoutInflater&quot;&gt;&lt;a href=&quot;#关于LayoutInflater可以在运行是加载一个xml文件，这样可以减少在onCreate的时候对应用的加载造成太大的负担，有三种方式可以获取LayoutInflater&quot; class=&quot;headerlink&quot; title=&quot;关于LayoutInflater可以在运行是加载一个xml文件，这样可以减少在onCreate的时候对应用的加载造成太大的负担，有三种方式可以获取LayoutInflater&quot;&gt;&lt;/a&gt;关于LayoutInflater可以在运行是加载一个xml文件，这样可以减少在onCreate的时候对应用的加载造成太大的负担，有三种方式可以获取LayoutInflater&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这是第一种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LayoutInflater inflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这是第二种，from方法封装了getSystemService(...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LayoutInflater inflater = LayoutInflater.from(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这是第三种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LayoutInflater inflater = getLayoutInflater();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取之后，就可以调用inflater获取一个View对象了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View myView = inflater.inflate(R.layout.main, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;MenuInflater用法要简单很多，它只有Activity-getMenuInflater-方法&quot;&gt;&lt;a href=&quot;#MenuInflater用法要简单很多，它只有Activity-getMenuInflater-方法&quot; class=&quot;headerlink&quot; title=&quot;MenuInflater用法要简单很多，它只有Activity.getMenuInflater()方法&quot;&gt;&lt;/a&gt;MenuInflater用法要简单很多，它只有Activity.getMenuInflater()方法&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreateOptionsMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Menu menu)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getMenuInflater().inflater.inflate(R.menu.mymenu, menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreateOptionsMenu(menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多详情参考：&lt;a href=&quot;http://www.bozhiyue.com/anroid/boke/2016/0330/12683.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android菜单详解（二）——创建并响应选项菜单&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;onSaveInstanceState方法&quot;&gt;&lt;a href=&quot;#onSaveInstanceState方法&quot; class=&quot;headerlink&quot; title=&quot;onSaveInstanceState方法&quot;&gt;&lt;/a&gt;onSaveInstanceState方法&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在每一个&lt;code&gt;activity&lt;/code&gt;的&lt;code&gt;onCreate&lt;/code&gt;函数重都会带一个&lt;code&gt;bundle&lt;/code&gt;参数，也就是&lt;code&gt;bundle SaveInstanceState&lt;/code&gt;，拆分单词为Save Instance State，也就是保存实例状态，不过其实这个是保存&lt;code&gt;activity&lt;/code&gt;状态的&lt;/p&gt;
&lt;p&gt;使用的话，可以通过下面的代码来理解&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle saveInstanceState)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(saveInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码很经常可以见到，可是saveInstanceState中的数据中怎么拿到的呢！&lt;br&gt;在一个&lt;code&gt;activity&lt;/code&gt;生命周期结束的时候，会调用&lt;code&gt;onSaveInstanceState&lt;/code&gt;方法,如下面的代码所示&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle saveInstanceState)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(saveInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果需要保存状态，就在onsaveInstanceState中，将状态数据以key-value的形式放入到saveInstanceState中，如果需要手动将数据保存到状态中，可以通过下面的代码实现&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      savedInstanceState.putInt(&lt;span class=&quot;string&quot;&gt;&quot;IntTest&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      savedInstanceState.putString(&lt;span class=&quot;string&quot;&gt;&quot;StrTest&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;savedInstanceState test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;手动将activity传进来的的savedInstanceState参数，添加key，value值，下次要取值的时候就可以调用&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onRestoreInstanceState(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; IntTest = savedInstanceState.getInt(&lt;span class=&quot;string&quot;&gt;&quot;IntTest&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String StrTest = savedInstanceState.getString(&lt;span class=&quot;string&quot;&gt;&quot;StrTest&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;setRetainInstance-作用&quot;&gt;&lt;a href=&quot;#setRetainInstance-作用&quot; class=&quot;headerlink&quot; title=&quot;setRetainInstance()作用&quot;&gt;&lt;/a&gt;setRetainInstance()作用&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;可以让fragment在重新创建activity的时候，不完全被销毁，以便恢复&lt;br&gt;我看到的代码是在onCreate中调用setRetainInstance()的，返回true的时候，fragment会被保存到内存中&lt;br&gt;在销毁时，直接从onDestroyView()到onDeatch()，跳过了onDestroy()；&lt;br&gt;在创建的时候，直接从onAttach()到onCreateView()，跳过了onCreate()；&lt;br&gt;这时候就不适宜在在onCreate()中放置一些初始化逻辑&lt;/p&gt;
&lt;p&gt;详情见&lt;a href=&quot;http://blog.csdn.net/weihan1314/article/details/7997421&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android4.0-Fragment框架实现方式剖析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;adapter简单使用&quot;&gt;&lt;a href=&quot;#adapter简单使用&quot; class=&quot;headerlink&quot; title=&quot;adapter简单使用&quot;&gt;&lt;/a&gt;adapter简单使用&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;常用的有 BaseAdapter，SimpleAdapter，ArrayAdapter，SimpleCursorAdapter&lt;br&gt;1、ArrayAdapter是最简单的adapter了，只显示纯文本，&lt;code&gt;ArrayAdapter(Context context, int textViewResourceId, List&amp;lt;T&amp;gt; objects)&lt;/code&gt;的第一个参数是上下文，一般都是this；第二个参数比如&lt;code&gt;android.R.layout.simple_list_item_1&lt;/code&gt;，就是每一个text的排列方式，第三个就是数据列表了&lt;/p&gt;
&lt;p&gt;2、SimpleAdapter的扩展性最好,可以定义各种不同的&lt;code&gt;item view&lt;/code&gt;布局，&lt;code&gt;SimpleAdapter adapter = new SimpleAdapter(this, getData(), R.layout.simple, new String[] { &amp;quot;title&amp;quot;,  &amp;quot;img&amp;quot; }, new int[] { R.id.title, R.id.img });&lt;/code&gt;&lt;br&gt;同样，this代表上下文，getData是要适配进去的数据，第三个是每一个item view的xml文件，接着就是数据中的不同数组对象的键，通过键可以读取对应的值，放到第五个参数对应的&lt;code&gt;child view&lt;/code&gt;中，第五个是&lt;code&gt;item view&lt;/code&gt;不同的&lt;code&gt;child view id&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;3、SimpleCursorAdapter，这个我没用过，不过也很好理解，一定要以数据库作为数据源的时候,才能使用SimpleCursorAdapter&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SimpleCursorAdapterActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListActivity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;//获得一个指向系统通讯录数据库的Cursor对象获得数据来源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         Cursor cur = getContentResolver().query(People.CONTENT_URI, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         startManagingCursor(cur);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;//实例化列表适配器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;//上下文，显示的view形式，数据源，数据源的键获取对应的值，适配到id为text1的位置上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ListAdapter adapter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleCursorAdapter(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, android.R.layout.simple_list_item_1, cur, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[] &amp;#123;People.NAME&amp;#125;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] &amp;#123;android.R.id.text1&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         setListAdapter(adapter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要在AndroidManifest.xml文件中加入权限，&lt;code&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.READ_CONTACTS&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么findViewById之后要强制转化&quot;&gt;&lt;a href=&quot;#为什么findViewById之后要强制转化&quot; class=&quot;headerlink&quot; title=&quot;为什么findViewById之后要强制转化&quot;&gt;&lt;/a&gt;为什么findViewById之后要强制转化&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;这时候可以查看源码，下面的源码可以看到findViewById返回的基本类型是View&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@IdRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后随便找一个组件，例如Button，继承的是TextView，而TextView又是View子类，在java中，子类由于继承于父类并且比父类更多一些属性，所以当向下转化的时候就需要强制变成子类了&lt;/p&gt;
&lt;p&gt;ok，好像就是这些了！&lt;/p&gt;
&lt;h2 id=&quot;区别final变量、final方法、final类&quot;&gt;&lt;a href=&quot;#区别final变量、final方法、final类&quot; class=&quot;headerlink&quot; title=&quot;区别final变量、final方法、final类&quot;&gt;&lt;/a&gt;区别final变量、final方法、final类&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fianl&lt;/code&gt;变量，一般和&lt;code&gt;static&lt;/code&gt;关键字一起使用声明一个常量,这样可以保证共享内存，最关键的是，&lt;code&gt;final&lt;/code&gt;变量是只读的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;方法，如果一个方法的功能已经很完整了，子类不需要改变，可以声明为&lt;code&gt;final&lt;/code&gt;方法，值得注意的是，&lt;code&gt;final&lt;/code&gt;方法比非&lt;code&gt;final&lt;/code&gt;方法更快，因为在编译的时候已经静态绑定，不需要在运行时动态绑定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;类的功能是完整的，不能被继承，    例如&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Interger&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;final有几个优点&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;final关键字提高了性能。JVM和Java应用都会缓存final变量。&lt;/li&gt;
&lt;li&gt;final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。&lt;/li&gt;
&lt;li&gt;使用final关键字，JVM会对方法、变量及类进行优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考&lt;a href=&quot;http://www.importnew.com/7553.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解Java中的final关键字&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Application类的用法&quot;&gt;&lt;a href=&quot;#Application类的用法&quot; class=&quot;headerlink&quot; title=&quot;Application类的用法&quot;&gt;&lt;/a&gt;Application类的用法&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;通过单例创造整个应用中唯一的&lt;code&gt;Application&lt;/code&gt;类，生命周期就是应用的生命周期，应用内所有的&lt;code&gt;activity&lt;/code&gt;都运行在该&lt;code&gt;application&lt;/code&gt;所在的进程上。&lt;br&gt;因为所有组件都可以使用&lt;code&gt;getApplication&lt;/code&gt;来获取&lt;code&gt;application&lt;/code&gt;对象，而且这个对象都是相同的，所有&lt;code&gt;application&lt;/code&gt;也可以进行数据共享、数据缓存&lt;/p&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;安卓应用创建的时候会自定义一个&lt;code&gt;application&lt;/code&gt;，作为该程序的入口，可以通过继承&lt;code&gt;Application&lt;/code&gt;来自定义自己的&lt;code&gt;application&lt;/code&gt;对象，&lt;code&gt;getApplication()&lt;/code&gt;这个方法可以用来获取&lt;code&gt;applicaltion&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;通过继承&lt;code&gt;Application&lt;/code&gt;类来实现应用程序级的全局变量，这种全局变量方法相对静态类更有保障，直到应用的所有&lt;code&gt;Activity&lt;/code&gt;全部被&lt;code&gt;destory&lt;/code&gt;掉之后才会被释放掉&lt;/p&gt;
&lt;h2 id=&quot;SharedPreferences对象&quot;&gt;&lt;a href=&quot;#SharedPreferences对象&quot; class=&quot;headerlink&quot; title=&quot;SharedPreferences对象&quot;&gt;&lt;/a&gt;SharedPreferences对象&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在整个应用中，可以通过&lt;code&gt;SharedPreferences&lt;/code&gt;来保存对象，实现方式有很多，我陈列几种：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Context.getSharedPreferences()&lt;/code&gt;，获取的数据可以被同一应用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Activity.getPreferences()&lt;/code&gt;，数据只能在该Activity中共享&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PreferenceManager.getDefaultSharedPreferences()&lt;/code&gt;，与&lt;code&gt;getSharedPreferences()&lt;/code&gt;不同的是，这个使用默认名称，例如：com.example.something_prefer&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;操作模式&quot;&gt;&lt;a href=&quot;#操作模式&quot; class=&quot;headerlink&quot; title=&quot;操作模式&quot;&gt;&lt;/a&gt;操作模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Context.MOED_PRIVATE&lt;/code&gt;，默认操作模式，只能在应用本身访问，写入的内容会覆盖原文件的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Context.MOED_APPEND&lt;/code&gt;，检查文件是否存在，存在则追加内容，否则就新创建&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Context.MOED_WORLD_READABLE&lt;/code&gt;，表示当前文件可以被其它应用阅读&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Context.MODE_WORLD_WRITAEBLE&lt;/code&gt;，表示当前文件可以被其它应用写入&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多用法自己google，我只是记载一些基本内容唤醒记忆而已！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;三种命名空间&quot;&gt;&lt;a href=&quot;#三种命名空间&quot; class=&quot;headerlink&quot; title=&quot;三种命名空间&quot;&gt;&lt;/a&gt;三种命名空间&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;作用：我的理解是标识属性的命名，解决命名上的冲突。&lt;br&gt;&lt;figure class=&quot;highl
    
    </summary>
    
    
      <category term="android" scheme="http://zuesblog.xyz/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>ANDROID开发_KJMusic源码分析心得</title>
    <link href="http://zuesblog.xyz/2017/03/15/ANDROID%E5%BC%80%E5%8F%91-KJMusic%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%BF%83%E5%BE%97/"/>
    <id>http://zuesblog.xyz/2017/03/15/ANDROID开发-KJMusic源码分析心得/</id>
    <published>2017-03-15T13:04:42.000Z</published>
    <updated>2017-08-05T13:13:14.502Z</updated>
    
    <content type="html">&lt;h3 id=&quot;透明度&quot;&gt;&lt;a href=&quot;#透明度&quot; class=&quot;headerlink&quot; title=&quot;透明度&quot;&gt;&lt;/a&gt;透明度&lt;/h3&gt;&lt;p&gt;android:fromAlpha=”0.4”&lt;br&gt;android:toAlpha=”1”&lt;br&gt;分别表示从透明度为0.4到最终变成透明度为1&lt;/p&gt;
&lt;h3 id=&quot;获取设备媒体资源&quot;&gt;&lt;a href=&quot;#获取设备媒体资源&quot; class=&quot;headerlink&quot; title=&quot;获取设备媒体资源&quot;&gt;&lt;/a&gt;获取设备媒体资源&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;下面这个函数可以用来获取设备上所有的媒体资源（URL），通过游标定位进行数据访问&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ContentResolver contentResolver = getContentResolver();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cursor cursor = contentResolver.query(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MediaStore.Audio.Media.****&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不同的位置就可以读取不同的资源信息，例如手机联系人就是&lt;code&gt;android.provider.ContactsContract.Contacts.CONTENT_URI&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KJDB db  = KJDB.create(this, Config.DB_NAME,Config.isDebug);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在安卓中添加依赖，compile ‘org.kymjs.kjframe:kjframe:2.6’ 使用&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KJDB db  = KJDB.create(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, Config.DB_NAME,Config.isDebug);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.deleteByWhere(Music.class,&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//根据第二参数来删除数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;遍历循环&quot;&gt;&lt;a href=&quot;#遍历循环&quot; class=&quot;headerlink&quot; title=&quot;遍历循环&quot;&gt;&lt;/a&gt;遍历循环&lt;/h3&gt;&lt;p&gt;for(cursor.moveToFirst();!cursor.isAfterLast();cursor.moveToNext()){&lt;/p&gt;
&lt;p&gt;在用完corsor之后记得关闭游标，节省资源&lt;br&gt;cursor.close();&lt;/p&gt;
&lt;h3 id=&quot;mrark标记&quot;&gt;&lt;a href=&quot;#mrark标记&quot; class=&quot;headerlink&quot; title=&quot;mrark标记&quot;&gt;&lt;/a&gt;mrark标记&lt;/h3&gt;&lt;p&gt;在一开始的时候忘记了怎么理解下面这段代码的意思，现在mark一下&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String action = result ? Config.RECEIVER_UPDATE_MUSIC_LIST : Config.RECEIVER_MUSIC_SCAN_FAIL;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当布朗值&lt;code&gt;result&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;的时候则&lt;code&gt;action&lt;/code&gt;等于&lt;code&gt;Config&lt;/code&gt;。&lt;code&gt;RECEIVER_UPDATE_MUSIC_LIST&lt;/code&gt;的值，反之就是另外一个的值。&lt;/p&gt;
&lt;h3 id=&quot;overridePendingTransition&quot;&gt;&lt;a href=&quot;#overridePendingTransition&quot; class=&quot;headerlink&quot; title=&quot;overridePendingTransition&quot;&gt;&lt;/a&gt;overridePendingTransition&lt;/h3&gt;&lt;p&gt;这个函数有两个参数，一个参数是第一个&lt;code&gt;activity&lt;/code&gt;进入时的动画，另外一个参数则是第二个&lt;code&gt;activity&lt;/code&gt;退出时的动画。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PreferenceHelper.write(this, Config.FIRSTINSTALL_FILE,Config.FIRSTINSTALL_KEY,false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过上面那条代码执行将安装信息写入本地记录，参数分别是上下文，目标文件夹，目标文件夹的关键字（标识），&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 实现textview的跑马灯的效果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android:ellipsize=&quot;marquee&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android:focusable=&quot;true&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android:focusableInTouchMode=&quot;true&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android:marqueeRepeatLimit=&quot;marquee_forever&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一段代码实现无线联动&lt;/p&gt;
&lt;p&gt;&lt;code&gt;android:scrollHorizontally=&amp;quot;true&amp;quot;&lt;/code&gt;表示一个&lt;code&gt;EditText&lt;/code&gt;满了后是自动横着移动不是默认的换行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adjustViewBounds&lt;/code&gt;: 是否去调整这个视图的界限去保存绘制的初始范围比例；&lt;/p&gt;
&lt;p&gt;上面解释是Android API中说的。我百度了一下，得出如下结果：&lt;br&gt;&lt;code&gt;android:adjustViewBounds&lt;/code&gt; 是否保持宽高比。需要与&lt;code&gt;maxWidth&lt;/code&gt;、&lt;code&gt;MaxHeight&lt;/code&gt;一起使用，否则单独使用没有效果。&lt;/p&gt;
&lt;h3 id=&quot;ViewGroup拦截触摸事件详解&quot;&gt;&lt;a href=&quot;#ViewGroup拦截触摸事件详解&quot; class=&quot;headerlink&quot; title=&quot;ViewGroup拦截触摸事件详解&quot;&gt;&lt;/a&gt;ViewGroup拦截触摸事件详解&lt;/h3&gt;&lt;p&gt;触摸事件拦截就是在触摸事件被&lt;code&gt;parent view&lt;/code&gt;拦截，而不会分发给其&lt;code&gt;child&lt;/code&gt;，即使触摸发生在该&lt;code&gt;child&lt;/code&gt;身上。被拦截的事件会转到&lt;code&gt;parent view&lt;/code&gt;的&lt;code&gt;onTouchEvent&lt;/code&gt;方法中进行处理。&lt;/p&gt;
&lt;h3 id=&quot;Android-屏幕手势滑动中onFling-函数的技巧&quot;&gt;&lt;a href=&quot;#Android-屏幕手势滑动中onFling-函数的技巧&quot; class=&quot;headerlink&quot; title=&quot;Android 屏幕手势滑动中onFling()函数的技巧&quot;&gt;&lt;/a&gt;Android 屏幕手势滑动中onFling()函数的技巧&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://jcodecraeer.com/a/anzhuokaifa/androidkaifa/2012/1020/448.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;e1： The first down motion event that started the fling.手势起点的移动事件
e2： The move motion event that triggered the current onFling.当前手势点的移动事件
velocityX： The velocity of this fling measured in pixels per second along the x axis.每秒x轴方向移动的像素
velocityY： The velocity of this fling measured in pixels per second along the y axis.每秒y轴方向移动的像素
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说的更简单点就是，鼠标手势相当于一个向量（当然有可能手势是曲线），e1为向量的起点，e2为向量的终点，velocityX为向量水平方向的速度，velocityY为向量垂直方向的速度&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(e1.getX() - e2.getX() &amp;gt; verticalMinDistance &amp;amp;&amp;amp; Math.abs(velocityX) &amp;gt; minVelocity)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 则上面的语句能知道啥意思了吧，就是说向量的水平长度（滑了有多长）必须大于&lt;code&gt;verticalMinDistance&lt;/code&gt;，并且水平方向速度大于&lt;code&gt;minVelocity&lt;/code&gt;。&lt;br&gt;从而我们可以如此判断手势是否满足一定的条件从而进行相应响应，也可以根据这个写出更复杂的手势判断。&lt;/p&gt;
&lt;p&gt;集中不同的进入形式&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (position) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//加速进入  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                a.setInterpolator(AnimationUtils.loadInterpolator(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android.R.anim.accelerate_interpolator));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//减速进入  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                a.setInterpolator(AnimationUtils.loadInterpolator(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android.R.anim.decelerate_interpolator));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//加速进入.与第一个的区别为当repeatMode为reverse时,仍为加速返回原点  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                a.setInterpolator(AnimationUtils.loadInterpolator(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android.R.anim.accelerate_decelerate_interpolator));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//先往后退一点再加速前进  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                a.setInterpolator(AnimationUtils.loadInterpolator(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android.R.anim.anticipate_interpolator));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//减速前进,冲过终点前再后退  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                a.setInterpolator(AnimationUtils.loadInterpolator(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android.R.anim.overshoot_interpolator));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//case 3,4的结合体  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                a.setInterpolator(AnimationUtils.loadInterpolator(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android.R.anim.anticipate_overshoot_interpolator));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//停止前来回振几下  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                a.setInterpolator(AnimationUtils.loadInterpolator(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android.R.anim.bounce_interpolator));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;startForeground&lt;/code&gt;让服务前台运行，当&lt;code&gt;stopservice&lt;/code&gt;的时候通过&lt;code&gt;stopForeground&lt;/code&gt;去掉&lt;br&gt;意思是当音乐播放的时候，使用&lt;code&gt;foreground&lt;/code&gt;机制使服务不会在手机休眠长时间之后被kill掉&lt;br&gt;要想实现需求，我们只需要在&lt;code&gt;onStartCommand&lt;/code&gt;里面调用 &lt;code&gt;startForeground&lt;/code&gt;，然后再&lt;code&gt;onDestroy&lt;/code&gt;里面调用&lt;code&gt;stopForeground&lt;/code&gt;即可！&lt;br&gt;&lt;code&gt;startForeground(1,new Notification());&lt;/code&gt;&lt;br&gt;第一个参数是唯一的服务的标识符，用来表示这个&lt;code&gt;NOtification&lt;/code&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;透明度&quot;&gt;&lt;a href=&quot;#透明度&quot; class=&quot;headerlink&quot; title=&quot;透明度&quot;&gt;&lt;/a&gt;透明度&lt;/h3&gt;&lt;p&gt;android:fromAlpha=”0.4”&lt;br&gt;android:toAlpha=”1”&lt;br&gt;分别表示从透明度为0.4到最终变
    
    </summary>
    
      <category term="android" scheme="http://zuesblog.xyz/categories/android/"/>
    
    
      <category term="android进阶" scheme="http://zuesblog.xyz/tags/android%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之路-PRD撰写-信息结构图</title>
    <link href="http://zuesblog.xyz/2017/03/07/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF-PRD%E6%92%B0%E5%86%99-%E4%BF%A1%E6%81%AF%E7%BB%93%E6%9E%84%E5%9B%BE/"/>
    <id>http://zuesblog.xyz/2017/03/07/产品经理之路-PRD撰写-信息结构图/</id>
    <published>2017-03-07T00:54:11.000Z</published>
    <updated>2017-08-04T00:48:50.860Z</updated>
    
    <content type="html">&lt;h2 id=&quot;信息架构&quot;&gt;&lt;a href=&quot;#信息架构&quot; class=&quot;headerlink&quot; title=&quot;信息架构&quot;&gt;&lt;/a&gt;信息架构&lt;/h2&gt;&lt;p&gt;在产品设计中，按照对产品决定作用大小排列，依次为：信息结构设计、流程设计、功能设计、交互设计、视觉设计!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;个人理解&quot;&gt;&lt;a href=&quot;#个人理解&quot; class=&quot;headerlink&quot; title=&quot;个人理解&quot;&gt;&lt;/a&gt;个人理解&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在整个应用中，按照模块来区分每一个模块中展示的信息，和&lt;code&gt;功能具备交互性&lt;/code&gt;不同，&lt;code&gt;信息是可以在页面中被呈现出来的元素&lt;/code&gt;，常见的信息包括数字、文字、图片等具象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那我的博客来说明的话，入口启动页就是一个模块，它有一个背景图，有我的头像、个性签名、首页通道、关于通道、归类通道，还有我的github、facebook地址和instagram地址，以及友情链接。因为友情链接下的两个是属于统一维度的，所以在这里就没有被细分，而是直接当成同一个信息层来区分&lt;/p&gt;
&lt;p&gt;那我可不可以这样来理解，如果信息结构设计是供数据库设计人员而做，那么流程设计和功能设计则是为了开发者编码而做，交互设计和视觉设计是为用户体验师而做，这样总结下来一个信息结构图，就可以简单的理解为给不同角色提供不同的前期判断帮助而做，那么由于处理的对象不同功能就区分下来了！&lt;/p&gt;
&lt;p&gt;依据上面的分析，做了自己博客的信息结构图（最好是使用表格来显示）：&lt;br&gt;&lt;img src=&quot;https://xmindshare.s3.amazonaws.com/preview/vGVD-VFKVufj-94527.png&quot; alt=&quot;zues blog信息结构图&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;信息结构设计&quot;&gt;&lt;a href=&quot;#信息结构设计&quot; class=&quot;headerlink&quot; title=&quot;信息结构设计&quot;&gt;&lt;/a&gt;信息结构设计&lt;/h3&gt;&lt;p&gt;信息结构是产品呈现的信息层次（也有人把信息结构称为信息架构），而我认为主要是信息，因为大多数人都把它与功能结构图混在一起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在&lt;a href=&quot;https://www.zhihu.com/question/21252588&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎上整理了两个优质的答案&lt;/a&gt;，个人觉得醍醐灌顶很提神。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;信息结构关注的是单个页面的元素、信息来源、字段限制等，而非结构化的信息，不符合思维导图的特点，建议用表格来展示。&lt;br&gt;在PRD中，信息结构是供开发建数据库的参考依据，这里引用UML里面类的概念，一个类包含属性和方法，而信息就是类的属性，举个例子，博客系统有最主要的文章类、评论类，文章类包含的信息有：标题、作者、发布时间、摘要、正文、访问量等；评论类包含的信息有评论者头像、昵称、回复内容、邮件、QQ等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相比之下，我会更倾向于理解第二个，因为在&lt;code&gt;java&lt;/code&gt;设计中也采用到了类的概念,另外类似&lt;code&gt;ANDROID&lt;/code&gt;开发中的&lt;code&gt;model&lt;/code&gt;来理解信息结构对我来说更具优势，按照对象来划分属性，这个分类觉得是最好的了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;流程设计&quot;&gt;&lt;a href=&quot;#流程设计&quot; class=&quot;headerlink&quot; title=&quot;流程设计&quot;&gt;&lt;/a&gt;流程设计&lt;/h2&gt;&lt;p&gt;细致描述用户在使用产品的流程，同时也在时间的角度上规定各个部分之间的关系，如下图是我的博客操作流程，采用visio设计：&lt;br&gt;&lt;img src=&quot;https://pcs.baidu.com/rest/2.0/pcs/thumbnail?method=generate&amp;amp;app_id=250528&amp;amp;path=%2F%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%E5%9B%BE.png&amp;amp;quality=90&amp;amp;size=c1280_u1024&quot; alt=&quot;博客流程图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;功能设计&quot;&gt;&lt;a href=&quot;#功能设计&quot; class=&quot;headerlink&quot; title=&quot;功能设计&quot;&gt;&lt;/a&gt;功能设计&lt;/h2&gt;&lt;p&gt;在功能上，整个博客核心是展示文章，因此更多的是首页功能，显示文章列表，进而可以查看文章详情。&lt;br&gt;&lt;img src=&quot;https://xmindshare.s3.amazonaws.com/preview/W7kL-lbQAbyQ-95290.png&quot; alt=&quot;zues blog 功能设计&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;由于是个人的博客，所以没有很负责的业务逻辑，只有寥寥几张粗暴的图，哈哈哈，产品小白第一次做难免非常粗糙，希望我有机会在项目中成长！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;信息架构&quot;&gt;&lt;a href=&quot;#信息架构&quot; class=&quot;headerlink&quot; title=&quot;信息架构&quot;&gt;&lt;/a&gt;信息架构&lt;/h2&gt;&lt;p&gt;在产品设计中，按照对产品决定作用大小排列，依次为：信息结构设计、流程设计、功能设计、交互设计、视觉设计!&lt;/p&gt;
&lt;hr&gt;

    
    </summary>
    
      <category term="产品经理之路" scheme="http://zuesblog.xyz/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="PM" scheme="http://zuesblog.xyz/tags/PM/"/>
    
      <category term="PRD" scheme="http://zuesblog.xyz/tags/PRD/"/>
    
  </entry>
  
  <entry>
    <title>REACT-NATIVE开发_项目感想11</title>
    <link href="http://zuesblog.xyz/2017/03/05/REACT-NATIVE%E5%BC%80%E5%8F%91_%E9%A1%B9%E7%9B%AE%E6%84%9F%E6%83%B311/"/>
    <id>http://zuesblog.xyz/2017/03/05/REACT-NATIVE开发_项目感想11/</id>
    <published>2017-03-05T08:56:10.000Z</published>
    <updated>2017-07-28T05:29:03.118Z</updated>
    
    <content type="html">&lt;h3 id=&quot;记录map方法&quot;&gt;&lt;a href=&quot;#记录map方法&quot; class=&quot;headerlink&quot; title=&quot;记录map方法&quot;&gt;&lt;/a&gt;记录map方法&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;map方法可以很轻松的迭代数组中的每一个元素，并且根据回调函数来处理每一个元素，最后返回一个新的数组。这个方法不会改变原始数组。&lt;/p&gt;
&lt;p&gt;当然回调函数也可以支持多个参数，除了当前元素本身，还返回元素的索引index、原始数组arr。&lt;/p&gt;
&lt;p&gt;这是一个粒子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var Array = [1,2,3,4,5];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var newArray = Array.map(function(value)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return value+10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//输出新的数组newArray为[11,12,13,14,15]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这次意外的发现bug的所在，总结出一个道理，那就是检索出来的信息，仔细阅读，肯定是有用的。&lt;/p&gt;
&lt;p&gt;详细的说明一下这次的bug，&lt;code&gt;Warning:setState(...):Can only update a mounter or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Login component.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后我把setState和导航跳转的顺序调了之后就正常运行，没有警告。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//改之后&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let timer =  setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    clearTimeout(timer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    this.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        //...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    const &amp;#123; navigator &amp;#125; = this.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    navigator.resetTo(&amp;#123;name: &amp;apos;BottomTap&amp;apos;, component: BottomTap&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,3000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//改之前&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let timer =  setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    clearTimeout(timer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    const &amp;#123; navigator &amp;#125; = this.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    navigator.resetTo(&amp;#123;name: &amp;apos;BottomTap&amp;apos;, component: BottomTap&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					this.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        editable: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        login:false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        disabled:false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,3000);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;哈哈，我也是比较笨，这都没看到！当时写的时候也不规范。全都怪我，没把改写的代码好好写。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;记录map方法&quot;&gt;&lt;a href=&quot;#记录map方法&quot; class=&quot;headerlink&quot; title=&quot;记录map方法&quot;&gt;&lt;/a&gt;记录map方法&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;map方法可以很轻松的迭代数组中的每一个元素，并且根据回调函数来处理每一个元素，最后返回一
    
    </summary>
    
      <category term="react" scheme="http://zuesblog.xyz/categories/react/"/>
    
    
      <category term="react-native" scheme="http://zuesblog.xyz/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>REACT-NATIVE开发_项目感想10</title>
    <link href="http://zuesblog.xyz/2017/03/04/REACT-NATIVE%E5%BC%80%E5%8F%91_%E9%A1%B9%E7%9B%AE%E6%84%9F%E6%83%B310/"/>
    <id>http://zuesblog.xyz/2017/03/04/REACT-NATIVE开发_项目感想10/</id>
    <published>2017-03-04T12:16:05.000Z</published>
    <updated>2017-07-28T05:29:05.474Z</updated>
    
    <content type="html">&lt;h2 id=&quot;关于ios新的坑&quot;&gt;&lt;a href=&quot;#关于ios新的坑&quot; class=&quot;headerlink&quot; title=&quot;关于ios新的坑&quot;&gt;&lt;/a&gt;关于ios新的坑&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;今天刚部署最新的项目到ios上时，发现一点问题：&lt;br&gt;一，由于上次我使用&lt;code&gt;react-native-upgrade&lt;/code&gt;更新过版本，于是在一些文件夹里面会出现冲突，找到自己需要的，删除不需要的即可，我按照我自己想法，把their保留了下来，删了我以前的our，我认为更新之后应该是这样的&lt;/p&gt;
&lt;p&gt;二，然后，使用xcode重新编译之后，开始报第一个错，发现少了&lt;code&gt;react-native-root-toast&lt;/code&gt;这个库，install之后就可以正常运行了&lt;/p&gt;
&lt;p&gt;三，接着是&lt;code&gt;react-native-blur&lt;/code&gt;这个库，同样方法执行就可以了&lt;/p&gt;
&lt;p&gt;四，项目正常打开之后发现一个问题，缺少对应的Material Icons，于是找到&lt;code&gt;react-native-icons&lt;/code&gt;这个库，里面有对应的解决办法，这就轻松很多了，也就是将&lt;code&gt;node_modules/react-native-vector-icons&lt;/code&gt;里面的&lt;code&gt;Fonts&lt;/code&gt;文件夹添加到Xcode的项目中，正确执行方法是，在xcode中项目根目录下右键，选中Add flies to project，找到对应的fonts加进去即可&lt;/p&gt;
&lt;p&gt;五，fonts加进去之后还有一个问题，按照&lt;code&gt;react-native-vector-icons&lt;/code&gt;的说法，还有编辑一下Info.plist，添加对应的字体进去，顺手就把网络问题改了一下，也就是&lt;code&gt;App Transport Security Settings&lt;/code&gt;中添加并修改一个属性&lt;code&gt;Allow Arbitrary Loads&lt;/code&gt;，改为YES，ok， done！&lt;/p&gt;
&lt;p&gt;第四个问题可以参见这里：&lt;a href=&quot;https://github.com/oblador/react-native-vector-icons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/oblador/react-native-vector-icons&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;访问相册和获取拍照功能&quot;&gt;&lt;a href=&quot;#访问相册和获取拍照功能&quot; class=&quot;headerlink&quot; title=&quot;访问相册和获取拍照功能&quot;&gt;&lt;/a&gt;访问相册和获取拍照功能&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;昨天在ios上访问不了图册和照相功能，于是在&lt;code&gt;react-native-image-crop-picker&lt;/code&gt;的github上找到原因，缺少对应的权限，需要做一下几步来获取：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在xcode上打开&lt;code&gt;info.plist&lt;/code&gt;添加相应的key和string，按照github上的指引，我添加了三个权限，分别是&lt;code&gt;NSPhotoLibraryUsageDescription&lt;/code&gt;、&lt;code&gt;NSCameraUsageDescription&lt;/code&gt;和&lt;code&gt;NSMicrophoneUsageDescription&lt;/code&gt;,来获取相册、照相机和用户多媒体的权限，来上传照片还有视频，不过这里我是不需要多媒体的，因为我没有用到上传视频&lt;/li&gt;
&lt;li&gt;接着是判断自己电脑有没有安装&lt;code&gt;cocoapods&lt;/code&gt;，如果有的话，在podfile上修改&lt;code&gt;platform:ios, &amp;#39;8.0&amp;#39;&lt;/code&gt;，再添加&lt;code&gt;pod &amp;#39;RSKImageCropper&amp;#39;&lt;/code&gt;和&lt;code&gt;pod &amp;#39;QBImagePickerController&amp;#39;&lt;/code&gt;到pobfile中&lt;/li&gt;
&lt;li&gt;先来补充一下，&lt;code&gt;CocoaPods&lt;/code&gt;是iOS最常用最有名的类库管理工具，当项目中用到的类库有更新，要下载新版本并且要加到项目中，使用它一条命令行就可以解决了&lt;/li&gt;
&lt;li&gt;不过我没有安装这个，于是按照提示，我把&lt;code&gt;react-native-image-crop-picker&lt;/code&gt;模型中的ios/ImageCropPickerSDK文件夹拖到xcode项目中&lt;/li&gt;
&lt;li&gt;点击项目根目录，在xcode的主界面会有一个General界面，在里面将&lt;code&gt;Deployment Info&lt;/code&gt;设置&lt;code&gt;Deployment Target&lt;/code&gt;为8.0，我这里好像默认就是8.0了&lt;/li&gt;
&lt;li&gt;最后就是在&lt;code&gt;Embedded Binariesz&lt;/code&gt;中点击&lt;code&gt;+&lt;/code&gt;添加对应&lt;code&gt;RSKImageCropper.framework&lt;/code&gt;和&lt;code&gt;QBImagePicker.framework&lt;/code&gt;框架，这里我要提醒自己，需要提前将对应的RSKImageCropper和QBImagePicker文件drap到xcode上，方法同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;./img/updateAvatar1.png&quot; alt=&quot;配置权限详情&quot;&gt;&lt;br&gt;&lt;img src=&quot;./img/updateAvatar2.png&quot; alt=&quot;配置对应的框架&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;值得注意&quot;&gt;&lt;a href=&quot;#值得注意&quot; class=&quot;headerlink&quot; title=&quot;值得注意&quot;&gt;&lt;/a&gt;值得注意&lt;/h3&gt;&lt;p&gt;再次提醒一下自己，当把项目部署到ios上的时候，git clone之后，只用命令行&lt;code&gt;npm install&lt;/code&gt;即可以安装好对应的modal，然后使用&lt;code&gt;react-native link&lt;/code&gt;添加相关的依赖，接着就可以使用&lt;code&gt;react-native run-android&lt;/code&gt;就可以跑起来了，有可能会遇到上面的那些情况&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于ios新的坑&quot;&gt;&lt;a href=&quot;#关于ios新的坑&quot; class=&quot;headerlink&quot; title=&quot;关于ios新的坑&quot;&gt;&lt;/a&gt;关于ios新的坑&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;今天刚部署最新的项目到ios上时，发现一点问题：&lt;br&gt;一，由于上次我使用&lt;cod
    
    </summary>
    
      <category term="react" scheme="http://zuesblog.xyz/categories/react/"/>
    
    
      <category term="react-native" scheme="http://zuesblog.xyz/tags/react-native/"/>
    
  </entry>
  
</feed>
